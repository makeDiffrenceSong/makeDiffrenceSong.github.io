<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Make a difference</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-12-30T00:34:44.958Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>SongSong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OkHttp源码分析</title>
    <link href="http://example.com/2020/12/29/OkHttp%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2020/12/29/OkHttp%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2020-12-29T05:58:48.000Z</published>
    <updated>2020-12-30T00:34:44.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-分发器"><a href="#1-分发器" class="headerlink" title="1.分发器"></a>1.分发器</h1><p>分发器的作用是分发任务，决定任务是立即执行还是等待一会再执行</p><h2 id="1-1异步请求"><a href="#1-1异步请求" class="headerlink" title="1.1异步请求"></a>1.1异步请求</h2><p>向分发器提交申请，异步请求维护两个队列ready和running</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(AsyncCall call)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.如果正在执行的请求小于64</span></span><br><span class="line">    <span class="comment">//2.相同host的请求不能超过5个。</span></span><br><span class="line">    <span class="keyword">if</span> (runningAsyncCalls.size() &lt; maxRequests &amp;&amp; runningCallsForHost(call) &lt; maxRequestsPerHost) &#123;</span><br><span class="line">       <span class="comment">//可以立即执行的放在running队列</span></span><br><span class="line">      runningAsyncCalls.add(call);<span class="comment">//这里就添加到异步call中</span></span><br><span class="line">        <span class="comment">//并交给线程池去处理</span></span><br><span class="line">      executorService().execute(call);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//不能直接执行的放在ready队列中</span></span><br><span class="line">      readyAsyncCalls.add(call);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ready队列中的call什么时候执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncCall</span> <span class="keyword">extends</span> <span class="title">NamedRunnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Callback responseCallback;</span><br><span class="line"></span><br><span class="line">  AsyncCall(Callback responseCallback) &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">&quot;OkHttp %s&quot;</span>, redactedUrl());</span><br><span class="line">    <span class="keyword">this</span>.responseCallback = responseCallback;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">host</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> originalRequest.url().host();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Request <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> originalRequest;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">RealCall <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RealCall.<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> signalledCallback = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//执行请求（拦截器）发起网络请求</span></span><br><span class="line">      Response response = getResponseWithInterceptorChain();</span><br><span class="line">      <span class="keyword">if</span> (retryAndFollowUpInterceptor.isCanceled()) &#123;</span><br><span class="line">        signalledCallback = <span class="keyword">true</span>;</span><br><span class="line">        responseCallback.onFailure(RealCall.<span class="keyword">this</span>, <span class="keyword">new</span> IOException(<span class="string">&quot;Canceled&quot;</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        signalledCallback = <span class="keyword">true</span>;</span><br><span class="line">        responseCallback.onResponse(RealCall.<span class="keyword">this</span>, response);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (signalledCallback) &#123;</span><br><span class="line">        <span class="comment">// Do not signal the callback twice!</span></span><br><span class="line">        Platform.get().log(INFO, <span class="string">&quot;Callback failure for &quot;</span> + toLoggableString(), e);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        eventListener.callFailed(RealCall.<span class="keyword">this</span>, e);</span><br><span class="line">        responseCallback.onFailure(RealCall.<span class="keyword">this</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//这段代码永远都会执行，</span></span><br><span class="line">      client.dispatcher().finished(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client.dispatcher().finished(this);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Used by &#123;<span class="doctag">@code</span> AsyncCall#run&#125; to signal completion. */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">finished</span><span class="params">(AsyncCall call)</span> </span>&#123;</span><br><span class="line">    finished(runningAsyncCalls, call, <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Used by &#123;<span class="doctag">@code</span> Call#execute&#125; to signal completion. */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">finished</span><span class="params">(RealCall call)</span> </span>&#123;</span><br><span class="line">    finished(runningSyncCalls, call, <span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">finished</span><span class="params">(Deque&lt;T&gt; calls, T call, <span class="keyword">boolean</span> promoteCalls)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> runningCallsCount;</span><br><span class="line">    Runnable idleCallback;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!calls.remove(call)) <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">&quot;Call wasn&#x27;t in-flight!&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (promoteCalls) promoteCalls();</span><br><span class="line">      runningCallsCount = runningCallsCount();</span><br><span class="line">      idleCallback = <span class="keyword">this</span>.idleCallback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (runningCallsCount == <span class="number">0</span> &amp;&amp; idleCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">      idleCallback.run();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 从ready队列中获取任务放入到running中去执行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">promoteCalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (runningAsyncCalls.size() &gt;= maxRequests) <span class="keyword">return</span>; <span class="comment">// Already running max capacity.</span></span><br><span class="line">    <span class="keyword">if</span> (readyAsyncCalls.isEmpty()) <span class="keyword">return</span>; <span class="comment">// No ready calls to promote.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里遍历主要是判断同一个Host请求只能同时有5个</span></span><br><span class="line">    <span class="keyword">for</span> (Iterator&lt;AsyncCall&gt; i = readyAsyncCalls.iterator(); i.hasNext(); ) &#123;</span><br><span class="line">      AsyncCall call = i.next();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (runningCallsForHost(call) &lt; maxRequestsPerHost) &#123;</span><br><span class="line">        i.remove();</span><br><span class="line">        runningAsyncCalls.add(call);</span><br><span class="line">        executorService().execute(call);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (runningAsyncCalls.size() &gt;= maxRequests) <span class="keyword">return</span>; <span class="comment">// Reached max capacity.</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里创建线程池跑任务使用的是SynchronousQueue，而没有使用BlockingQueue或者LinkQueue，SynchronousQueue的优点，无等待，最大并发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> ExecutorService <span class="title">executorService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (executorService == <span class="keyword">null</span>) &#123;</span><br><span class="line">      executorService = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE, <span class="number">60</span>, TimeUnit.SECONDS,</span><br><span class="line">          <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;(), Util.threadFactory(<span class="string">&quot;OkHttp Dispatcher&quot;</span>, <span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> executorService;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="1-2同步请求"><a href="#1-2同步请求" class="headerlink" title="1.2同步请求"></a>1.2同步请求</h2><p>分发器只记录请求用于判断IdleRunnable是否需要执行</p><p>维护一个同步队列，是一个阻塞的请求，必须等前一个请求完成才执行下一个求情</p><h1 id="2-拦截器"><a href="#2-拦截器" class="headerlink" title="2.拦截器"></a>2.拦截器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建了5个拦截器，将他们加入到interceptors的list中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Response <span class="title">getResponseWithInterceptorChain</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Build a full stack of interceptors.</span></span><br><span class="line">    List&lt;Interceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    interceptors.addAll(client.interceptors());<span class="comment">//自定义拦截器加入到集合中</span></span><br><span class="line">    interceptors.add(retryAndFollowUpInterceptor);</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> BridgeInterceptor(client.cookieJar()));</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> CacheInterceptor(client.internalCache()));</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> ConnectInterceptor(client));</span><br><span class="line">    <span class="keyword">if</span> (!forWebSocket) &#123;</span><br><span class="line">      interceptors.addAll(client.networkInterceptors());</span><br><span class="line">    &#125;</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> CallServerInterceptor(forWebSocket));</span><br><span class="line"></span><br><span class="line">    Interceptor.Chain chain = <span class="keyword">new</span> RealInterceptorChain(interceptors, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>,</span><br><span class="line">        originalRequest, <span class="keyword">this</span>, eventListener, client.connectTimeoutMillis(),</span><br><span class="line">        client.readTimeoutMillis(), client.writeTimeoutMillis());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> chain.proceed(originalRequest);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">proceed</span><span class="params">(Request request, StreamAllocation streamAllocation, HttpCodec httpCodec,</span></span></span><br><span class="line"><span class="function"><span class="params">      RealConnection connection)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= interceptors.size()) <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line"></span><br><span class="line">    calls++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we already have a stream, confirm that the incoming request will use it.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.httpCodec != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.connection.supportsUrl(request.url())) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;network interceptor &quot;</span> + interceptors.get(index - <span class="number">1</span>)</span><br><span class="line">          + <span class="string">&quot; must retain the same host and port&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we already have a stream, confirm that this is the only call to chain.proceed().</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.httpCodec != <span class="keyword">null</span> &amp;&amp; calls &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;network interceptor &quot;</span> + interceptors.get(index - <span class="number">1</span>)</span><br><span class="line">          + <span class="string">&quot; must call proceed() exactly once&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Call the next interceptor in the chain.</span></span><br><span class="line">    RealInterceptorChain next = <span class="keyword">new</span> RealInterceptorChain(interceptors, streamAllocation, httpCodec,</span><br><span class="line">        connection, index + <span class="number">1</span>, request, call, eventListener, connectTimeout, readTimeout,</span><br><span class="line">        writeTimeout);</span><br><span class="line">    Interceptor interceptor = interceptors.get(index);</span><br><span class="line">    Response response = interceptor.intercept(next);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Confirm that the next interceptor made its required call to chain.proceed().</span></span><br><span class="line">    <span class="keyword">if</span> (httpCodec != <span class="keyword">null</span> &amp;&amp; index + <span class="number">1</span> &lt; interceptors.size() &amp;&amp; next.calls != <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;network interceptor &quot;</span> + interceptor</span><br><span class="line">          + <span class="string">&quot; must call proceed() exactly once&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Confirm that the intercepted response isn&#x27;t null.</span></span><br><span class="line">    <span class="keyword">if</span> (response == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;interceptor &quot;</span> + interceptor + <span class="string">&quot; returned null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (response.body() == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">          <span class="string">&quot;interceptor &quot;</span> + interceptor + <span class="string">&quot; returned a response with no body&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>责任链模式—单一职责原则</p><p>无需关心处理的细节，只需将请求发送到责任链即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-分发器&quot;&gt;&lt;a href=&quot;#1-分发器&quot; class=&quot;headerlink&quot; title=&quot;1.分发器&quot;&gt;&lt;/a&gt;1.分发器&lt;/h1&gt;&lt;p&gt;分发器的作用是分发任务，决定任务是立即执行还是等待一会再执行&lt;/p&gt;
&lt;h2 id=&quot;1-1异步请求&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="TCP-IP" scheme="http://example.com/categories/TCP-IP/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Fragment总结</title>
    <link href="http://example.com/2020/12/28/Fragment%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2020/12/28/Fragment%E6%80%BB%E7%BB%93/</id>
    <published>2020-12-28T10:48:05.000Z</published>
    <updated>2020-12-29T11:06:35.295Z</updated>
    
    <content type="html"><![CDATA[<p>Fragment：<a href="https://shixin.blog.csdn.net/article/details/78132990?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">https://shixin.blog.csdn.net/article/details/78132990?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Fragment：&lt;a href=&quot;https://shixin.blog.csdn.net/article/details/78132990?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFr</summary>
      
    
    
    
    <category term="UI" scheme="http://example.com/categories/UI/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>底部导航栏-RadioGroup</title>
    <link href="http://example.com/2020/12/25/RadioGroup-%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
    <id>http://example.com/2020/12/25/RadioGroup-%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F/</id>
    <published>2020-12-25T08:12:54.000Z</published>
    <updated>2020-12-29T11:06:40.970Z</updated>
    
    <content type="html"><![CDATA[<p>创建底部导航栏</p><h1 id="1-RadioGroup实现"><a href="#1-RadioGroup实现" class="headerlink" title="1.RadioGroup实现"></a>1.RadioGroup实现</h1><h2 id="1-1创建RadioGroup的布局"><a href="#1-1创建RadioGroup的布局" class="headerlink" title="1.1创建RadioGroup的布局"></a>1.1创建RadioGroup的布局</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RadioGroup</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/rg_main&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#11000000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_vertical&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将公共的属性提取到stytle--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/hp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;首页&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:drawableTop</span>=<span class="string">&quot;@drawable/rb_homepage_frame_drawable_selector&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">&quot;@style/bottom_tag_style&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/njt&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;农机通&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:drawableTop</span>=<span class="string">&quot;@drawable/rb_nongjitong_frame_drawable_selector&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">&quot;@style/bottom_tag_style&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/store&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;商城&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:drawableTop</span>=<span class="string">&quot;@drawable/rb_shangcheng_frame_drawable_selector&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">&quot;@style/bottom_tag_style&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/mine&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;个人中心&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:drawableTop</span>=<span class="string">&quot;@drawable/rb_mine_frame_drawable_selector&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">&quot;@style/bottom_tag_style&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-2创建公共属性的style文件"><a href="#1-2创建公共属性的style文件" class="headerlink" title="1.2创建公共属性的style文件"></a>1.2创建公共属性的style文件</h2><p>bottom_tag_style是将RadioButton中相同的属性放到一个style中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;bottom_tag_style&quot;</span>&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:layout_weight&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">item</span>&gt;</span>//这个属性主要是让RadioButton在底部均匀分布</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:layout_width&quot;</span>&gt;</span>wrap_content<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:layout_height&quot;</span>&gt;</span>wrap_content<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:button&quot;</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:drawablePadding&quot;</span>&gt;</span>3dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:gravity&quot;</span>&gt;</span>center<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:textSize&quot;</span>&gt;</span>10sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:textColor&quot;</span>&gt;</span>@drawable/bottom_textcolor_drawable_selector<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-3-绑定Fragment"><a href="#1-3-绑定Fragment" class="headerlink" title="1.3 绑定Fragment"></a>1.3 绑定Fragment</h2><h3 id="1-3-1创建BaseFragment"><a href="#1-3-1创建BaseFragment" class="headerlink" title="1.3.1创建BaseFragment"></a>1.3.1创建BaseFragment</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xh.softarchitecture.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> androidx.fragment.app.Fragment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基类，公共类</span></span><br><span class="line"><span class="comment"> * HomePageFragment、StoreFragment、NojitongFragment、MineCenterFragment都要继承自这个类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        mContext = getActivity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(<span class="meta">@NonNull</span> LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 强制子类重写，实现子类特有的UI</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> View <span class="title">initView</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        initData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当孩子需要初始化数据，或者联网请求绑定数据，显示数据的，等待可以重写该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-2创建子布局文件"><a href="#1-3-2创建子布局文件" class="headerlink" title="1.3.2创建子布局文件"></a>1.3.2创建子布局文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/listview&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-3-创建布局文件对应的类"><a href="#1-3-3-创建布局文件对应的类" class="headerlink" title="1.3.3 创建布局文件对应的类"></a>1.3.3 创建布局文件对应的类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xh.softarchitecture.fragment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.Gravity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.AdapterView;</span><br><span class="line"><span class="keyword">import</span> android.widget.ListView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xh.softarchitecture.R;</span><br><span class="line"><span class="keyword">import</span> com.xh.softarchitecture.activity.OkHttpActivity;</span><br><span class="line"><span class="keyword">import</span> com.xh.softarchitecture.adapter.HomePageAdapter;</span><br><span class="line"><span class="keyword">import</span> com.xh.softarchitecture.base.BaseFragment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主页页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomePageFragment</span> <span class="keyword">extends</span> <span class="title">BaseFragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = HomePageFragment.class.getSimpleName();</span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ListView mListView;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于显示listview中的每个item的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String[] datas;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HomePageAdapter mHomePageAdapter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据业务需求，对主界面的进行设计</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> View <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        View view = View.inflate(mContext, R.layout.fragment_homepage_frame,<span class="keyword">null</span>);</span><br><span class="line">        mListView = view.findViewById(R.id.listview);</span><br><span class="line">        mListView.setOnItemClickListener(<span class="keyword">new</span> AdapterView.OnItemClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">                String data = datas[position];</span><br><span class="line">                Toast.makeText(mContext,<span class="string">&quot;data== &quot;</span> + data,Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">if</span> (data.toLowerCase().equals(<span class="string">&quot;okhttp&quot;</span>)) &#123;</span><br><span class="line">                    Intent intent = <span class="keyword">new</span> Intent(mContext, OkHttpActivity.class);</span><br><span class="line">                    startActivity(intent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最初始的页面只有一个TextView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    protected View initView() &#123;</span></span><br><span class="line"><span class="comment">//        textView = new TextView(mContext);</span></span><br><span class="line"><span class="comment">//        textView.setTextSize(20);</span></span><br><span class="line"><span class="comment">//        textView.setGravity(Gravity.CENTER);</span></span><br><span class="line"><span class="comment">//        textView.setTextColor(Color.RED);</span></span><br><span class="line"><span class="comment">//        return textView;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.initData();</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;initData: 主页面fragment数据被初始化了......&quot;</span>);</span><br><span class="line">        <span class="comment">//textView.setText(&quot;牛还是牛首页&quot;);</span></span><br><span class="line">        <span class="comment">//准备数据</span></span><br><span class="line">        datas = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;OKHttp&quot;</span>, <span class="string">&quot;xUtils3&quot;</span>,<span class="string">&quot;Retrofit2&quot;</span>,<span class="string">&quot;Fresco&quot;</span>,<span class="string">&quot;Glide&quot;</span>,<span class="string">&quot;greenDao&quot;</span>,<span class="string">&quot;RxJava&quot;</span>,<span class="string">&quot;volley&quot;</span>,<span class="string">&quot;Gson&quot;</span>,<span class="string">&quot;FastJson&quot;</span>,<span class="string">&quot;picasso&quot;</span>,<span class="string">&quot;evenBus&quot;</span>,<span class="string">&quot;jcvideoplayer&quot;</span>,<span class="string">&quot;pulltorefresh&quot;</span>,<span class="string">&quot;Expandablelistview&quot;</span>,<span class="string">&quot;UniversalVideoView&quot;</span>,<span class="string">&quot;.....&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//设置适配器</span></span><br><span class="line">        mHomePageAdapter = <span class="keyword">new</span> HomePageAdapter(mContext,datas);</span><br><span class="line">        mListView.setAdapter(mHomePageAdapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-3-4绑定布局"><a href="#1-3-4绑定布局" class="headerlink" title="1.3.4绑定布局"></a>1.3.4绑定布局</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mBaseFragment = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    mBaseFragment.add(<span class="keyword">new</span> HomePageFragment());<span class="comment">//主页面</span></span><br><span class="line">    mBaseFragment.add(<span class="keyword">new</span> StoreFragment());<span class="comment">//商城</span></span><br><span class="line">    mBaseFragment.add(<span class="keyword">new</span> NongjitongFragment());<span class="comment">//农技通</span></span><br><span class="line">    mBaseFragment.add(<span class="keyword">new</span> MineCenterFragment());<span class="comment">//个人中心</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">switchFragment</span><span class="params">(Fragment from,BaseFragment to)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (from != to) &#123;</span><br><span class="line">        content = to;<span class="comment">//将当前页面保存为前面显示的页面</span></span><br><span class="line">        FragmentManager fragmentManager = getSupportFragmentManager();</span><br><span class="line">        FragmentTransaction transaction = fragmentManager.beginTransaction();</span><br><span class="line">        <span class="comment">//进行切换</span></span><br><span class="line">        <span class="comment">//1.先判断to界面是否已经添加</span></span><br><span class="line">        <span class="keyword">if</span> (!to.isAdded()) &#123;</span><br><span class="line">            <span class="comment">//1.1 to没有被添加</span></span><br><span class="line">            <span class="comment">//from隐藏</span></span><br><span class="line">            <span class="keyword">if</span> (from != <span class="keyword">null</span>) &#123;</span><br><span class="line">                transaction.hide(from);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//添加to</span></span><br><span class="line">            <span class="keyword">if</span> (to != <span class="keyword">null</span>) &#123;</span><br><span class="line">                transaction.add(R.id.fl_content,to).commit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//1.2 to已经被添加</span></span><br><span class="line">            <span class="comment">//隐藏from</span></span><br><span class="line">            <span class="keyword">if</span> (from != <span class="keyword">null</span>) &#123;</span><br><span class="line">                transaction.hide(from);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//显示to</span></span><br><span class="line">            <span class="keyword">if</span> (to != <span class="keyword">null</span>) &#123;</span><br><span class="line">                transaction.show(to).commit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;创建底部导航栏&lt;/p&gt;
&lt;h1 id=&quot;1-RadioGroup实现&quot;&gt;&lt;a href=&quot;#1-RadioGroup实现&quot; class=&quot;headerlink&quot; title=&quot;1.RadioGroup实现&quot;&gt;&lt;/a&gt;1.RadioGroup实现&lt;/h1&gt;&lt;h2 id=&quot;1-</summary>
      
    
    
    
    <category term="UI" scheme="http://example.com/categories/UI/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>UI-TextView</title>
    <link href="http://example.com/2020/12/25/UI-TextView/"/>
    <id>http://example.com/2020/12/25/UI-TextView/</id>
    <published>2020-12-25T06:19:53.000Z</published>
    <updated>2020-12-25T07:40:44.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TextView常用属性"><a href="#TextView常用属性" class="headerlink" title="TextView常用属性"></a>TextView常用属性</h1><h2 id="1-1TextView内容滚动"><a href="#1-1TextView内容滚动" class="headerlink" title="1.1TextView内容滚动"></a>1.1TextView内容滚动</h2><p>xml文件中设置：android:scrollbars=”vertical”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_result&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:scrollbars</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;显示请求数据&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>代码中设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tv_result.setMovementMethod(ScrollingMovementMethod.getInstance());</span><br></pre></td></tr></table></figure><h2 id="1-2TextView中内容复制"><a href="#1-2TextView中内容复制" class="headerlink" title="1.2TextView中内容复制"></a>1.2TextView中内容复制</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TextView常用属性&quot;&gt;&lt;a href=&quot;#TextView常用属性&quot; class=&quot;headerlink&quot; title=&quot;TextView常用属性&quot;&gt;&lt;/a&gt;TextView常用属性&lt;/h1&gt;&lt;h2 id=&quot;1-1TextView内容滚动&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>okHttp-编程常见错误</title>
    <link href="http://example.com/2020/12/25/okHttp-%E7%BC%96%E7%A8%8B%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    <id>http://example.com/2020/12/25/okHttp-%E7%BC%96%E7%A8%8B%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</id>
    <published>2020-12-25T05:58:09.000Z</published>
    <updated>2020-12-25T08:20:34.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-主线程中请求数据"><a href="#1-主线程中请求数据" class="headerlink" title="1.主线程中请求数据"></a>1.主线程中请求数据</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.os.NetworkOnMainThreadException</span><br></pre></td></tr></table></figure><p>需要创建子线程，在子线程中做数据请求工作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getDataFromGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String result = get(<span class="string">&quot;https://makedifferencesong.github.io/&quot;</span>);</span><br><span class="line">                    <span class="comment">//String result = get(&quot;https://www.baidu.com/&quot;);</span></span><br><span class="line">                    <span class="comment">//获取到网络请求的数据之后，需要将数据交个主线程去更新UI，因此，需要通过Handle做数据的传输</span></span><br><span class="line">                    Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">                    msg.what =  GET_REQUEST;</span><br><span class="line">                    msg.obj = result;</span><br><span class="line">                    handler.sendMessage(msg);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-设置网络请求权限"><a href="#2-设置网络请求权限" class="headerlink" title="2.设置网络请求权限"></a>2.设置网络请求权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.net.SocketException: socket failed: EPERM (Operation not permitted)</span><br></pre></td></tr></table></figure><p>解决方法：AndroidManifest 中添加用户权限</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>有时添加权限任然不够，则直接卸载软件，重新安装。</p><h3 id="3-更新UI需要在主线程中更新"><a href="#3-更新UI需要在主线程中更新" class="headerlink" title="3.更新UI需要在主线程中更新"></a>3.更新UI需要在主线程中更新</h3><p>在获取数据的子线程中，通过Handle的方式将数据发送到主线程中进行UI更新。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-主线程中请求数据&quot;&gt;&lt;a href=&quot;#1-主线程中请求数据&quot; class=&quot;headerlink&quot; title=&quot;1.主线程中请求数据&quot;&gt;&lt;/a&gt;1.主线程中请求数据&lt;/h1&gt;&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;table&gt;&lt;tr&gt;</summary>
      
    
    
    
    <category term="TCP-IP" scheme="http://example.com/categories/TCP-IP/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>TCP-IP-OkHttp</title>
    <link href="http://example.com/2020/12/24/TCP-IP-OkHttp/"/>
    <id>http://example.com/2020/12/24/TCP-IP-OkHttp/</id>
    <published>2020-12-24T06:37:39.000Z</published>
    <updated>2020-12-25T00:40:09.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-OKHttp简介"><a href="#1-OKHttp简介" class="headerlink" title="1.OKHttp简介"></a>1.OKHttp简介</h1><p>高效的HTTP客户端，支持连接同一地址的链接共享用一个socket</p><p>核心：路由、连接协议、拦截器、代理、安全认证、连接池以及网络适配</p><p>拦截器：指添加、移除或者转换请求或者回应的头部信息。</p><h2 id="1-1-OKHTTP主要功能"><a href="#1-1-OKHTTP主要功能" class="headerlink" title="1.1 OKHTTP主要功能"></a>1.1 OKHTTP主要功能</h2><p>1.联网请求文本数据</p><p>2.大文件下载</p><p>3.大文件上传</p><p>4.请求图片</p><h1 id="2-原生OkHttp的Get和Post请求"><a href="#2-原生OkHttp的Get和Post请求" class="headerlink" title="2.原生OkHttp的Get和Post请求"></a>2.原生OkHttp的Get和Post请求</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-OKHttp简介&quot;&gt;&lt;a href=&quot;#1-OKHttp简介&quot; class=&quot;headerlink&quot; title=&quot;1.OKHttp简介&quot;&gt;&lt;/a&gt;1.OKHttp简介&lt;/h1&gt;&lt;p&gt;高效的HTTP客户端，支持连接同一地址的链接共享用一个socket&lt;/p&gt;
</summary>
      
    
    
    
    <category term="TCP/IP" scheme="http://example.com/categories/TCP-IP/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android网络编程</title>
    <link href="http://example.com/2020/12/23/android%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2020/12/23/android%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2020-12-23T01:05:56.000Z</published>
    <updated>2020-12-29T11:06:29.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章-android基本网络技术和编程实践"><a href="#第二章-android基本网络技术和编程实践" class="headerlink" title="第二章 android基本网络技术和编程实践"></a>第二章 android基本网络技术和编程实践</h1><h2 id="2-1计算机网络及其协议"><a href="#2-1计算机网络及其协议" class="headerlink" title="2.1计算机网络及其协议"></a>2.1计算机网络及其协议</h2><h3 id="2-1-1-计算机网络概述"><a href="#2-1-1-计算机网络概述" class="headerlink" title="2.1.1 计算机网络概述"></a>2.1.1 计算机网络概述</h3><p>1）计算机网络</p><p>①多个独立功能的计算机系统通过通讯设备和线路连接起来</p><p>②功能完善的网络软件实现网络共享系统</p><p>2）计算机网络功能</p><p>①硬件资源共享</p><p>②软件资源共享</p><p>③用户信息交互</p><p>④提高计算机的可靠性和可用性</p><p>④分布式处理</p><p>2.1.2 网络协议概述</p><p>1）发送方的协议与接受方的协议必须一致</p><p>2）网络协议是所有设备之间通信规则的集合</p><p>3）网络ISO7层模型：应用层、表示层、会话层、传输层、网络层、链路层、物理层</p><p>①应用层</p><ul><li>为操作系统或者网络程序提供访问网络服务的接口。</li></ul><p>②表示层</p><ul><li><p>数据或者信息的语法表示变化</p></li><li><p>数据压缩和加密</p></li></ul><p>③会话层</p><ul><li><p>组织和同步不同主机上各种进程间的通信</p></li><li><p>在两个会话层实体之间进行对话连接的建立和拆除</p></li><li><p>数据流中插入同步点的机制</p></li></ul><p>④传输层</p><ul><li>负责数据传输的最高层次</li><li>完成同处于资源子网中的两个主机间的连接和数据传输</li><li>端到端的数据传输</li></ul><p>⑤网络层</p><ul><li>选择合适的路由</li><li>分组正确无误地按照地址找到目的站</li></ul><p>⑥链路层</p><ul><li>在两个相邻的节点间的线路线上无差错地传输以帧为单位的数据</li><li>每一帧数据包括一定的数据和必要的控制信息</li><li>重发机制</li></ul><p>⑦物理层</p><ul><li><p>使原始的数据比特流能在物理介质上传输。</p><h3 id="2-1-3-IP、TCP和UDP协议"><a href="#2-1-3-IP、TCP和UDP协议" class="headerlink" title="2.1.3 IP、TCP和UDP协议"></a>2.1.3 IP、TCP和UDP协议</h3><table><thead><tr><th>TCP/IP模型</th><th>TCP/IP协议集</th><th>描述</th></tr></thead><tbody><tr><td>应用层</td><td>FTP、SMTP、DNS、HTTP</td><td>①通过网络与其他程序通信</td></tr><tr><td>传输层</td><td>TCP、UDP</td><td>响应应用层的请求，并向网络层发出服务请求；之间透明的数据传输；端到端连接、流量控制、错误恢复；</td></tr><tr><td>网络层</td><td>IP、ARP、RARP、ICMP</td><td>网络路由、差错控制、IP编址</td></tr><tr><td>网络接口层</td><td>各种通信网络接口</td><td>发送和接收IP数据报</td></tr></tbody></table><p>1）IP协议</p><p>①面向数据的协议</p><p>②根据源主机和目的主机的地址传输数据</p><p>2）TCP协议</p><p>①面向连接的、可靠的、基于字节流的传输层通信协议</p><p>②功能：数据报分段、数据包标序、ACK应答机制、超时重传、数据校验</p><p>③协议描述：</p><p>每个字节编号–顺序</p><p>起始序号必须在建立连接时设置</p></li></ul><p>2）UDP协议</p><p>①不提供可靠机制、流控制、错误恢复等功能</p><p>②传输数据之前不需要建立连接</p><h2 id="2-2在android中使用TCP、UPD协议"><a href="#2-2在android中使用TCP、UPD协议" class="headerlink" title="2.2在android中使用TCP、UPD协议"></a>2.2在android中使用TCP、UPD协议</h2><p>2.2.1socket基础</p><p>1）封装了网络纠错、包大小、包重传</p><p>2）是应用层与TCP/IP协议簇通信的中间软件抽象层，是一组接口</p><p>3）描述IP地址和端口，是一个通信链的句柄</p><p>4）应用层通过套接字向网络发出请求或者应答网络请求</p><p>5）套接字的基本操作</p><ul><li>连接远程机器</li><li>发送数据</li><li>接收数据</li><li>关闭连接</li><li>绑定端口</li><li>监听到达数据</li><li>在绑定的端口号上接受来自远程机器的连接</li></ul><h3 id="2-2-2使用TCP通信"><a href="#2-2-2使用TCP通信" class="headerlink" title="2.2.2使用TCP通信"></a>2.2.2使用TCP通信</h3><p>1）服务端工作步骤</p><p>①创建服务端socket对象，并绑定到指定的端口</p><p>②监听连接请求</p><p>③获取输入输出流，开始网络数据的发送和接收</p><p>2）客户端的工作步骤</p><p>①创建客户端socket，并连接到服务器</p><p>②获取输入输出流，开始网络数据的发送和接收</p><p>③关闭通信套接字</p><h3 id="2-3-2-FTP客户端"><a href="#2-3-2-FTP客户端" class="headerlink" title="2.3.2 FTP客户端"></a>2.3.2 FTP客户端</h3><p>1）概念：FTP：用于在网络上进行文件传输的一套标准协议，属于应用层协议</p><p>2）描述</p><p>①8位的客户端-服务器协议</p><p>②能够传输任何类型的文件</p><p>③一般运行在20/21端口</p><ul><li>端口20：传输数据流</li><li>端口21：传输控制流</li></ul><p>③开放匿名服务</p><p>3）FTP支持两种模式</p><p>①主动模式</p><p>②被动模式</p><h1 id="第三章-android基本Web技术和编程实践"><a href="#第三章-android基本Web技术和编程实践" class="headerlink" title="第三章 android基本Web技术和编程实践"></a>第三章 android基本Web技术和编程实践</h1><h2 id="3-1-HTTP协议"><a href="#3-1-HTTP协议" class="headerlink" title="3.1 HTTP协议"></a>3.1 HTTP协议</h2><p>1）所有的WWW文件都必须尊守这个标准</p><h3 id="3-1-1-HTTP简介"><a href="#3-1-1-HTTP简介" class="headerlink" title="3.1.1 HTTP简介"></a>3.1.1 HTTP简介</h3><p>1）分布式超媒体信息系统的应用层协议</p><p>2）主要特点</p><p>①支持C/S模式</p><p>②客服端向服务器请求服务时，只需要传送请求方法和路径；方法：get、post、head。</p><p>③允许传输任意类型的数据对象</p><p>④每次连接只处理一个请求</p><p>⑤无状态</p><p>3）http格式</p><p>①<a href="http://host[&quot;:&quot;port]">http://host[&quot;:&quot;port]</a> [abs_path]</p><ul><li>host：合法的主机域名或者IP地址</li><li>port：指定一个端口，空，则默认为80</li><li>abs_path：指定请求资源的URI</li></ul><p>②HTTP报文是面向文本的</p><p>③分为请求报文和响应报文</p><p><strong>HTTP报头</strong></p><p>请求消息与响应消息都是由：开始行、消息报头、空行、消息正文组成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第二章-android基本网络技术和编程实践&quot;&gt;&lt;a href=&quot;#第二章-android基本网络技术和编程实践&quot; class=&quot;headerlink&quot; title=&quot;第二章 android基本网络技术和编程实践&quot;&gt;&lt;/a&gt;第二章 android基本网络技术和编程</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>网络编程-NIO</title>
    <link href="http://example.com/2020/12/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-NIO/"/>
    <id>http://example.com/2020/12/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-NIO/</id>
    <published>2020-12-22T03:00:35.000Z</published>
    <updated>2020-12-23T06:07:07.361Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-NIO/image-20201222110228581.png" alt="image-20201222110228581"></p><p><img src="/images/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-NIO/image-20201222110236501.png" alt="image-20201222110236501"></p><p><img src="/images/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-NIO/image-20201222110321409.png" alt="image-20201222110321409"></p><h1 id="1-NIO-Buffer理解"><a href="#1-NIO-Buffer理解" class="headerlink" title="1.NIO Buffer理解"></a>1.NIO Buffer理解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xh.slj.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.Buffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一、缓冲区：</span></span><br><span class="line"><span class="comment"> *      在JavaNIO中负责数据存取。缓冲区就是数组，用于存储不同数据类型的数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    根据数据类型的不同，提供了相应类型的缓冲区：</span></span><br><span class="line"><span class="comment"> *    ByteBuffer</span></span><br><span class="line"><span class="comment"> *    CharBuffer</span></span><br><span class="line"><span class="comment"> *    ShortBuffer</span></span><br><span class="line"><span class="comment"> *    IntBuffer</span></span><br><span class="line"><span class="comment"> *    LongBuffer</span></span><br><span class="line"><span class="comment"> *    FloatBuffer</span></span><br><span class="line"><span class="comment"> *    DoubleBuffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    上述缓冲区的管理方式几乎一致，通过allocate()获取缓冲分区</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 二、缓冲区存取数据的两个核心方法：</span></span><br><span class="line"><span class="comment"> *   put():存入数据到缓冲区中</span></span><br><span class="line"><span class="comment"> *   get():获取缓冲区中的数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 三、缓冲区中的四个核心属性</span></span><br><span class="line"><span class="comment"> *  private int mark = -1;//位置，表示记录当前position的位置，可以通过reset()恢复到Mark的位置</span></span><br><span class="line"><span class="comment"> *  private int position = 0;//位置，表示缓冲分区中正在操作数据的位置</span></span><br><span class="line"><span class="comment"> *  private int limit;//界限，表示缓冲区中可以操作数据的大小。（limit后数据不能进行读写）</span></span><br><span class="line"><span class="comment"> *  private int capacity; //容量，表示缓冲区最大存储数据容量。一旦声明不能改变</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  0 &lt;= mark &lt;= position &lt;= limit &lt;= capacity</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 四、直接缓冲区与非直接缓冲分区</span></span><br><span class="line"><span class="comment"> *  直接缓冲区：通过allocateDirect()方法分配直接缓冲区，将缓冲分区直接写入到物理内存中,可以提高效率</span></span><br><span class="line"><span class="comment"> *  非直接缓冲分区：通过allocate方法分配缓冲分区，将缓冲区建立在JVM的内存中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBuffer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        directBuffer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">directBuffer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//分配直接缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocateDirect(<span class="number">1024</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;directBuffer :&quot;</span> + buffer.isDirect());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">        <span class="comment">//1.分配一个指定大小的缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;limit :&quot;</span> + buffer.limit());</span><br><span class="line">        System.out.println(<span class="string">&quot;capacity :&quot;</span> + buffer.capacity());</span><br><span class="line">        System.out.println(<span class="string">&quot;position :&quot;</span> + buffer.position());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用put() 存入数据到缓冲分区中</span></span><br><span class="line">        buffer.put(str.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------put()---------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;limit :&quot;</span> + buffer.limit());</span><br><span class="line">        System.out.println(<span class="string">&quot;capacity :&quot;</span> + buffer.capacity());</span><br><span class="line">        System.out.println(<span class="string">&quot;position :&quot;</span> + buffer.position());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.切换为读取数据的模式</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------flip()---------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;limit :&quot;</span> + buffer.limit());</span><br><span class="line">        System.out.println(<span class="string">&quot;capacity :&quot;</span> + buffer.capacity());</span><br><span class="line">        System.out.println(<span class="string">&quot;position :&quot;</span> + buffer.position());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.读取缓冲区数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] dst = <span class="keyword">new</span> <span class="keyword">byte</span>[buffer.limit()];</span><br><span class="line">        buffer.get(dst);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------get()---------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;limit :&quot;</span> + buffer.limit());</span><br><span class="line">        System.out.println(<span class="string">&quot;capacity :&quot;</span> + buffer.capacity());</span><br><span class="line">        System.out.println(<span class="string">&quot;position :&quot;</span> + buffer.position());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.rewind():可重复读数据</span></span><br><span class="line">        buffer.rewind();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------rewind()---------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;limit :&quot;</span> + buffer.limit());</span><br><span class="line">        System.out.println(<span class="string">&quot;capacity :&quot;</span> + buffer.capacity());</span><br><span class="line">        System.out.println(<span class="string">&quot;position :&quot;</span> + buffer.position());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.clear():清空缓冲分区，但是缓冲区中的数据依然存在，但是处于“被遗忘状态”</span></span><br><span class="line">        buffer.clear();</span><br><span class="line">        System.out.println(<span class="string">&quot;-------clear()---------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;limit :&quot;</span> + buffer.limit());</span><br><span class="line">        System.out.println(<span class="string">&quot;capacity :&quot;</span> + buffer.capacity());</span><br><span class="line">        System.out.println(<span class="string">&quot;position :&quot;</span> + buffer.position());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-NIO-channel理解"><a href="#2-NIO-channel理解" class="headerlink" title="2.NIO channel理解"></a>2.NIO channel理解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xh.slj.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.MappedByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardOpenOption;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一、通道（Channel）：用于源结点与目标节点的连接。在Java NIO中负责缓冲区中数据的传输，Channel本身不存储数据，因此需要配合缓冲区进行传输</span></span><br><span class="line"><span class="comment"> * 二、通道的主要实现</span></span><br><span class="line"><span class="comment"> *  java.nio.channels.Channel接口：</span></span><br><span class="line"><span class="comment"> *         |--FileChannel</span></span><br><span class="line"><span class="comment"> *         |--SocketChannel</span></span><br><span class="line"><span class="comment"> *         |--ServerSocketChannel</span></span><br><span class="line"><span class="comment"> *         |--DatagramChannel</span></span><br><span class="line"><span class="comment"> * 三、获取通道</span></span><br><span class="line"><span class="comment"> * 1.Java针对支持通道的类型提供了getChannel()方法</span></span><br><span class="line"><span class="comment"> *      本地IO：</span></span><br><span class="line"><span class="comment"> *      FileInputStream/FileOutputStream</span></span><br><span class="line"><span class="comment"> *      RandomAccessFile</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      网络IO</span></span><br><span class="line"><span class="comment"> *      Socket</span></span><br><span class="line"><span class="comment"> *      ServerSocket</span></span><br><span class="line"><span class="comment"> *      DatagramSocket</span></span><br><span class="line"><span class="comment"> * 2.在JDK1.7中NIO2针对各个通道提供了静态方法open()</span></span><br><span class="line"><span class="comment"> * 3.在JDK1.7中NIO2的files工具类的newByteChannel()</span></span><br><span class="line"><span class="comment"> * 四、通道之间的数据传输</span></span><br><span class="line"><span class="comment"> *      transferTo</span></span><br><span class="line"><span class="comment"> *      transferFrom</span></span><br><span class="line"><span class="comment"> * 五、分散（Scatter）与聚合（Gather）</span></span><br><span class="line"><span class="comment"> *  分散读取：将通道中的数据分散到多个缓冲区</span></span><br><span class="line"><span class="comment"> *  聚集写入：将多个缓冲分区的数据聚集到通道中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 六、字符集：CharSet</span></span><br><span class="line"><span class="comment"> *  编码：字符串 -&gt; 字节数组</span></span><br><span class="line"><span class="comment"> *  解码：字符数组 -&gt; 字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestChannel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        testNonBuffer();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            testDirectBuffer();</span><br><span class="line">            <span class="comment">//testChannel();</span></span><br><span class="line">            SgTest();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分散聚集</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SgTest</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;E:\\android\\gitBackup\\TCP-IP\\BIO\\log方案.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="comment">//1.获取通道</span></span><br><span class="line">        FileChannel channel = raf.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.分配指定大小的缓冲区</span></span><br><span class="line">        ByteBuffer buffer1 = ByteBuffer.allocate(<span class="number">100</span>);</span><br><span class="line">        ByteBuffer buffer2 = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.分散读取</span></span><br><span class="line">        ByteBuffer[] bufs = &#123;buffer1,buffer2&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            channel.read(bufs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ByteBuffer buffer : bufs) &#123;</span><br><span class="line">            buffer.flip();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;limit bufs[0]:&quot;</span> + <span class="keyword">new</span> String(bufs[<span class="number">0</span>].array(),<span class="number">0</span>,bufs[<span class="number">0</span>].limit()));</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;limit bufs[0]:&quot;</span> + <span class="keyword">new</span> String(bufs[<span class="number">1</span>].array(),<span class="number">0</span>,bufs[<span class="number">1</span>].limit()));</span><br><span class="line"></span><br><span class="line">        RandomAccessFile rafWrite = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;E:\\android\\gitBackup\\TCP-IP\\BIO\\2.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="comment">//4.聚集写入</span></span><br><span class="line">        FileChannel channel2 = rafWrite.getChannel();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            channel2.write(bufs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.通道之间数据传输</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testChannel</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileChannel inChannel =  FileChannel.open(Paths.get(<span class="string">&quot;E:\\android\\gitBackup\\TCP-IP\\BIO\\1.png&quot;</span>), StandardOpenOption.READ);</span><br><span class="line">        FileChannel outChannel =  FileChannel.open(Paths.get(<span class="string">&quot;E:\\android\\gitBackup\\TCP-IP\\BIO\\4.png&quot;</span>), StandardOpenOption.WRITE,StandardOpenOption.READ,StandardOpenOption.CREATE_NEW);</span><br><span class="line"></span><br><span class="line">        inChannel.transferTo(<span class="number">0</span>,inChannel.size(),outChannel);</span><br><span class="line"></span><br><span class="line">        inChannel.close();</span><br><span class="line">        outChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.利用通道完成文件的赋值(直接缓冲区)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testDirectBuffer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileChannel inChannel =  FileChannel.open(Paths.get(<span class="string">&quot;E:\\android\\gitBackup\\TCP-IP\\BIO\\1.png&quot;</span>), StandardOpenOption.READ);</span><br><span class="line">        FileChannel outChannel =  FileChannel.open(Paths.get(<span class="string">&quot;E:\\android\\gitBackup\\TCP-IP\\BIO\\3.png&quot;</span>), StandardOpenOption.WRITE,StandardOpenOption.READ,StandardOpenOption.CREATE);</span><br><span class="line"></span><br><span class="line">        MappedByteBuffer inMappedBuf = inChannel.map(FileChannel.MapMode.READ_ONLY,<span class="number">0</span>,inChannel.size());</span><br><span class="line">        MappedByteBuffer outMappedBuf = outChannel.map(FileChannel.MapMode.READ_WRITE,<span class="number">0</span>,inChannel.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接对缓冲区进行数据的读写操作</span></span><br><span class="line">        <span class="keyword">byte</span>[] dst = <span class="keyword">new</span> <span class="keyword">byte</span>[inMappedBuf.limit()];</span><br><span class="line">        inMappedBuf.get(dst);</span><br><span class="line">        outMappedBuf.put(dst);</span><br><span class="line"></span><br><span class="line">        inChannel.close();</span><br><span class="line">        outChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.利用通道完成文件的赋值(非直接缓冲区)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testNonBuffer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//①获取通道</span></span><br><span class="line">        FileChannel inChannel = <span class="keyword">null</span>;</span><br><span class="line">        FileChannel outChannel = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\android\\gitBackup\\TCP-IP\\BIO\\1.png&quot;</span>);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;E:\\android\\gitBackup\\TCP-IP\\BIO\\2.png&quot;</span>);</span><br><span class="line">            inChannel = fis.getChannel();</span><br><span class="line">            outChannel = fos.getChannel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//②分配指定大小的缓冲区</span></span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//③将通道中的数据存入缓冲区中</span></span><br><span class="line">            <span class="keyword">while</span> (inChannel.read(buffer) != -<span class="number">1</span>) &#123;</span><br><span class="line">                buffer.flip();<span class="comment">//切换成读数据的模式</span></span><br><span class="line">                outChannel.write(buffer);</span><br><span class="line">                buffer.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (outChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    outChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (inChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-阻塞与非阻塞"><a href="#3-阻塞与非阻塞" class="headerlink" title="3.阻塞与非阻塞"></a>3.阻塞与非阻塞</h1><h2 id="3-1-阻塞"><a href="#3-1-阻塞" class="headerlink" title="3.1 阻塞"></a>3.1 阻塞</h2><p><img src="/images/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-NIO/image-20201222192800422.png" alt="image-20201222192800422"></p><p>多线程方式解决阻塞问题</p><p><img src="/images/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-NIO/image-20201222192944025.png" alt="image-20201222192944025"></p><h2 id="3-2-非阻塞"><a href="#3-2-非阻塞" class="headerlink" title="3.2 非阻塞"></a>3.2 非阻塞</h2><p>通道注册到Selector上，当服务器准备就绪，才将通道的数据发送到服务端进行处理</p><p><img src="/images/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-NIO/image-20201222193145955.png" alt="image-20201222193145955"></p><h1 id="4-NIO网络通信"><a href="#4-NIO网络通信" class="headerlink" title="4.NIO网络通信"></a>4.NIO网络通信</h1><h2 id="4-1-NIO阻塞通信"><a href="#4-1-NIO阻塞通信" class="headerlink" title="4.1 NIO阻塞通信"></a>4.1 NIO阻塞通信</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xh.slj.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardOpenOption;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一、使用NIO完成网络通信的三大核心</span></span><br><span class="line"><span class="comment"> *  1.通道(Channel)：负责连接</span></span><br><span class="line"><span class="comment"> *      java.nio.channels.channel接口：</span></span><br><span class="line"><span class="comment"> *          |--SelectableChannel</span></span><br><span class="line"><span class="comment"> *              |--SocketChannel</span></span><br><span class="line"><span class="comment"> *              |--ServerSocketChannel</span></span><br><span class="line"><span class="comment"> *              |--DatagramChannel</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *              |--Pipe.SinkChannel</span></span><br><span class="line"><span class="comment"> *              |--Pipe.SourceChannel</span></span><br><span class="line"><span class="comment"> *  2.缓冲区(Buffer)：负责数据的存取</span></span><br><span class="line"><span class="comment"> *  3.选择器(Selector)：是SelectableChannel的多路复用器。用于监控SelectableChannel的IO状况</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBlock</span> </span>&#123;</span><br><span class="line">    <span class="comment">//客户端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取通道</span></span><br><span class="line">        SocketChannel socketChannel =  SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9898</span>));</span><br><span class="line"></span><br><span class="line">        FileChannel inChannel = FileChannel.open(Paths.get(<span class="string">&quot;E:\\android\\gitBackup\\TCP-IP\\BIO\\1.png&quot;</span>), StandardOpenOption.READ);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.分配指定大小的缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.读取本地文件，并发送到服务端</span></span><br><span class="line">        <span class="keyword">while</span>(inChannel.read(buffer) != -<span class="number">1</span>) &#123;</span><br><span class="line">            buffer.flip();<span class="comment">//切换为读模式</span></span><br><span class="line">            socketChannel.write(buffer);</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//5.关闭通道</span></span><br><span class="line">        inChannel.close();</span><br><span class="line">        socketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//服务端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取通道</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        FileChannel outChannel = FileChannel.open(Paths.get(<span class="string">&quot;E:\\android\\gitBackup\\TCP-IP\\BIO\\5.png&quot;</span>),StandardOpenOption.WRITE,StandardOpenOption.CREATE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.绑定连接</span></span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9898</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取客户端连接的通道</span></span><br><span class="line">        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.分配指定大小的缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.接收客户端的数据，并保存到本地</span></span><br><span class="line">        <span class="keyword">while</span>(socketChannel.read(buffer) != -<span class="number">1</span>) &#123;</span><br><span class="line">            buffer.flip();</span><br><span class="line">            outChannel.write(buffer);</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.关闭通道</span></span><br><span class="line">        socketChannel.close();</span><br><span class="line">        outChannel.close();</span><br><span class="line">        serverSocketChannel.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-2-NIO阻塞通信"><a href="#4-2-NIO阻塞通信" class="headerlink" title="4.2 NIO阻塞通信"></a>4.2 NIO阻塞通信</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xh.slj.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardOpenOption;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一、使用NIO完成网络通信的三大核心</span></span><br><span class="line"><span class="comment"> *  1.通道(Channel)：负责连接</span></span><br><span class="line"><span class="comment"> *      java.nio.channels.channel接口：</span></span><br><span class="line"><span class="comment"> *          |--SelectableChannel</span></span><br><span class="line"><span class="comment"> *              |--SocketChannel</span></span><br><span class="line"><span class="comment"> *              |--ServerSocketChannel</span></span><br><span class="line"><span class="comment"> *              |--DatagramChannel</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *              |--Pipe.SinkChannel</span></span><br><span class="line"><span class="comment"> *              |--Pipe.SourceChannel</span></span><br><span class="line"><span class="comment"> *  2.缓冲区(Buffer)：负责数据的存取</span></span><br><span class="line"><span class="comment"> *  3.选择器(Selector)：是SelectableChannel的多路复用器。用于监控SelectableChannel的IO状况</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBlock</span> </span>&#123;</span><br><span class="line">    <span class="comment">//客户端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取通道</span></span><br><span class="line">        SocketChannel socketChannel =  SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9898</span>));</span><br><span class="line"></span><br><span class="line">        FileChannel inChannel = FileChannel.open(Paths.get(<span class="string">&quot;E:\\android\\gitBackup\\TCP-IP\\BIO\\1.png&quot;</span>), StandardOpenOption.READ);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.分配指定大小的缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.读取本地文件，并发送到服务端</span></span><br><span class="line">        <span class="keyword">while</span>(inChannel.read(buffer) != -<span class="number">1</span>) &#123;</span><br><span class="line">            buffer.flip();<span class="comment">//切换为读模式</span></span><br><span class="line">            socketChannel.write(buffer);</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        socketChannel.shutdownOutput();</span><br><span class="line">        <span class="comment">//4.接收服务端的反馈</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = socketChannel.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            buffer.flip();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(buffer.array(),<span class="number">0</span>,len));</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.关闭通道</span></span><br><span class="line">        inChannel.close();</span><br><span class="line">        socketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//服务端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取通道</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        FileChannel outChannel = FileChannel.open(Paths.get(<span class="string">&quot;E:\\android\\gitBackup\\TCP-IP\\BIO\\5.png&quot;</span>),StandardOpenOption.WRITE,StandardOpenOption.CREATE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.绑定连接</span></span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9898</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取客户端连接的通道</span></span><br><span class="line">        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.分配指定大小的缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.接收客户端的数据，并保存到本地</span></span><br><span class="line">        <span class="keyword">while</span>(socketChannel.read(buffer) != -<span class="number">1</span>) &#123;</span><br><span class="line">            buffer.flip();</span><br><span class="line">            outChannel.write(buffer);</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        buffer.put(<span class="string">&quot;服务端已经接收到客户端的数据了....&quot;</span>.getBytes());</span><br><span class="line">        buffer.flip();</span><br><span class="line">        socketChannel.write(buffer);</span><br><span class="line">        <span class="comment">//6.关闭通道</span></span><br><span class="line">        socketChannel.close();</span><br><span class="line">        outChannel.close();</span><br><span class="line">        serverSocketChannel.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-3-NIO非阻塞通信"><a href="#4-3-NIO非阻塞通信" class="headerlink" title="4.3 NIO非阻塞通信"></a>4.3 NIO非阻塞通信</h2><h3 id="4-3-1-发送单消息"><a href="#4-3-1-发送单消息" class="headerlink" title="4.3.1 发送单消息"></a>4.3.1 发送单消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xh.slj.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNonBlocking</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取通道</span></span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9898</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.切换为非阻塞模式</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.分配指定大小的缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.发送数据给服务端</span></span><br><span class="line">        buffer.put(<span class="keyword">new</span> Date().toString().getBytes());</span><br><span class="line">        buffer.flip();</span><br><span class="line">        socketChannel.write(buffer);</span><br><span class="line">        buffer.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.关闭通道</span></span><br><span class="line">        socketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取通道</span></span><br><span class="line">        ServerSocketChannel ssocketChannel = ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.切换为非阻塞模式</span></span><br><span class="line">        ssocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.绑定连接</span></span><br><span class="line">        ssocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9898</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.获取选择器</span></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.将通道注册到选择器上,并且指定“监听事件”</span></span><br><span class="line">        ssocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.轮询式的获取选择器上已经“已经准备就绪”事件</span></span><br><span class="line">        <span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//7.获取当前选择器中所有祖册的“选择键（已就绪的监听事件）”</span></span><br><span class="line">           Iterator&lt;SelectionKey&gt; it = selector.selectedKeys().iterator();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//8.获取准备就绪的事件</span></span><br><span class="line">            SelectionKey sk = it.next();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//9.判断具体是什么事件准备就绪</span></span><br><span class="line">            <span class="keyword">if</span> (sk.isAcceptable()) &#123;</span><br><span class="line">                <span class="comment">//10.若为“接收就绪”，获取客户端连接通道</span></span><br><span class="line">                SocketChannel socketChannel = ssocketChannel.accept();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//11.将通道切换为非阻塞模式</span></span><br><span class="line">                socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//12.将该通道注册到该选择器上</span></span><br><span class="line">                socketChannel.register(selector,SelectionKey.OP_READ);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sk.isReadable()) &#123;</span><br><span class="line">                <span class="comment">//13.获取当前选择器上的“读就绪”状态的通道</span></span><br><span class="line">                SocketChannel socketChannel = (SocketChannel) sk.channel();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//14.分配指定大小的缓冲区</span></span><br><span class="line">                ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//15.读取数据到缓冲区</span></span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>((len = socketChannel.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> String(buffer.array(),<span class="number">0</span>,len));</span><br><span class="line">                    buffer.clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//16.取消选择键SelectKey</span></span><br><span class="line">            it.remove();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-3-2-循环发送消息"><a href="#4-3-2-循环发送消息" class="headerlink" title="4.3.2 循环发送消息"></a>4.3.2 循环发送消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xh.slj.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNonBlocking</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取通道</span></span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9898</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.切换为非阻塞模式</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.分配指定大小的缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.发送数据给服务端----从控制端输入字符串</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            String str = scanner.next();</span><br><span class="line">            buffer.put((<span class="keyword">new</span> Date().toString() + <span class="string">&quot;\n&quot;</span> + str).getBytes());</span><br><span class="line">            buffer.flip();</span><br><span class="line">            socketChannel.write(buffer);</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.关闭通道</span></span><br><span class="line">        socketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取通道</span></span><br><span class="line">        ServerSocketChannel ssocketChannel = ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.切换为非阻塞模式</span></span><br><span class="line">        ssocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.绑定连接</span></span><br><span class="line">        ssocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9898</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.获取选择器</span></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.将通道注册到选择器上,并且指定“监听事件”</span></span><br><span class="line">        ssocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.轮询式的获取选择器上已经“已经准备就绪”事件</span></span><br><span class="line">        <span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//7.获取当前选择器中所有祖册的“选择键（已就绪的监听事件）”</span></span><br><span class="line">           Iterator&lt;SelectionKey&gt; it = selector.selectedKeys().iterator();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//8.获取准备就绪的事件</span></span><br><span class="line">            SelectionKey sk = it.next();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//9.判断具体是什么事件准备就绪</span></span><br><span class="line">            <span class="keyword">if</span> (sk.isAcceptable()) &#123;</span><br><span class="line">                <span class="comment">//10.若为“接收就绪”，获取客户端连接通道</span></span><br><span class="line">                SocketChannel socketChannel = ssocketChannel.accept();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//11.将通道切换为非阻塞模式</span></span><br><span class="line">                socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//12.将该通道注册到该选择器上</span></span><br><span class="line">                socketChannel.register(selector,SelectionKey.OP_READ);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sk.isReadable()) &#123;</span><br><span class="line">                <span class="comment">//13.获取当前选择器上的“读就绪”状态的通道</span></span><br><span class="line">                SocketChannel socketChannel = (SocketChannel) sk.channel();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//14.分配指定大小的缓冲区</span></span><br><span class="line">                ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//15.读取数据到缓冲区</span></span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>((len = socketChannel.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> String(buffer.array(),<span class="number">0</span>,len));</span><br><span class="line">                    buffer.clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//16.取消选择键SelectKey</span></span><br><span class="line">            it.remove();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-NIO/image-20201222110228581.png&quot; alt=&quot;image-20201222110228581&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/</summary>
      
    
    
    
    <category term="网络编程" scheme="http://example.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java基础" scheme="http://example.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Http-Linux网络I/O模型</title>
    <link href="http://example.com/2020/12/17/Http-Linux%E7%BD%91%E7%BB%9CI-O%E6%A8%A1%E5%9E%8B/"/>
    <id>http://example.com/2020/12/17/Http-Linux%E7%BD%91%E7%BB%9CI-O%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-12-17T06:10:09.000Z</published>
    <updated>2020-12-17T06:10:09.310Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Http-完整请求过程</title>
    <link href="http://example.com/2020/12/17/Http-%E5%AE%8C%E6%95%B4%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/"/>
    <id>http://example.com/2020/12/17/Http-%E5%AE%8C%E6%95%B4%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/</id>
    <published>2020-12-17T03:05:09.000Z</published>
    <updated>2020-12-17T09:08:21.383Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>TCP/IP-三次握手与四次挥手</title>
    <link href="http://example.com/2020/12/17/TCP-IP-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>http://example.com/2020/12/17/TCP-IP-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</id>
    <published>2020-12-17T01:37:38.000Z</published>
    <updated>2020-12-30T00:33:36.870Z</updated>
    
    
    
    
    <category term="TCP-IP" scheme="http://example.com/categories/TCP-IP/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>AMS-Activity-LauncherMode</title>
    <link href="http://example.com/2020/12/16/AMS-Activity-LauncherMode/"/>
    <id>http://example.com/2020/12/16/AMS-Activity-LauncherMode/</id>
    <published>2020-12-16T05:18:07.000Z</published>
    <updated>2020-12-16T10:51:41.932Z</updated>
    
    <content type="html"><![CDATA[<p>Demo：<a href="https://github.com/Gracker/AndroidLunchModeTest">https://github.com/Gracker/AndroidLunchModeTest</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Demo：&lt;a href=&quot;https://github.com/Gracker/AndroidLunchModeTest&quot;&gt;https://github.com/Gracker/AndroidLunchModeTest&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>androidP-VNDK</title>
    <link href="http://example.com/2020/12/15/androidP-VNDK/"/>
    <id>http://example.com/2020/12/15/androidP-VNDK/</id>
    <published>2020-12-15T07:44:42.000Z</published>
    <updated>2020-12-21T00:50:49.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="liblog中新增一个buffer-id"><a href="#liblog中新增一个buffer-id" class="headerlink" title="liblog中新增一个buffer id"></a>liblog中新增一个buffer id</h1><p>新增的patch如下：</p><figure class="highlight patch"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/liblog/include/android/log.h b/liblog/include/android/log.h</span><br><span class="line">old mode 100644</span><br><span class="line">new mode 100755</span><br><span class="line">index 28c87e4..0f325c0</span><br><span class="line"><span class="comment">--- a/liblog/include/android/log.h</span></span><br><span class="line"><span class="comment">+++ b/liblog/include/android/log.h</span></span><br><span class="line">@@ -183,7 +183,8 @@ typedef enum log_id &#123;</span><br><span class="line">   LOG_ID_CRASH = 4,</span><br><span class="line">   LOG_ID_STATS = 5,</span><br><span class="line">   LOG_ID_SECURITY = 6,</span><br><span class="line"><span class="deletion">-  LOG_ID_KERNEL = 7, /* place last, third-parties can not use it */</span></span><br><span class="line"><span class="addition">+  LOG_ID_VIP = 7,</span></span><br><span class="line"><span class="addition">+  LOG_ID_KERNEL = 8, /* place last, third-parties can not use it */</span></span><br><span class="line"> </span><br><span class="line">   LOG_ID_MAX</span><br><span class="line"> &#125; log_id_t;</span><br><span class="line">diff --git a/liblog/include/log/log.h b/liblog/include/log/log.h</span><br><span class="line">old mode 100644</span><br><span class="line">new mode 100755</span><br><span class="line">index 3813e6e..c6ee7a8</span><br><span class="line"><span class="comment">--- a/liblog/include/log/log.h</span></span><br><span class="line"><span class="comment">+++ b/liblog/include/log/log.h</span></span><br><span class="line"><span class="meta">@@ -34,6 +34,7 @@</span></span><br><span class="line"> #include &lt;log/log_read.h&gt;</span><br><span class="line"> #include &lt;log/log_safetynet.h&gt;</span><br><span class="line"> #include &lt;log/log_system.h&gt;</span><br><span class="line"><span class="addition">+#include &lt;log/log_vip.h&gt;</span></span><br><span class="line"> #include &lt;log/log_time.h&gt;</span><br><span class="line"> #include &lt;log/uio.h&gt; /* helper to define iovec for portability */</span><br><span class="line"> </span><br><span class="line">diff --git a/liblog/include/log/log_id.h b/liblog/include/log/log_id.h</span><br><span class="line">old mode 100644</span><br><span class="line">new mode 100755</span><br><span class="line">index c44f5a2..4647d71</span><br><span class="line"><span class="comment">--- a/liblog/include/log/log_id.h</span></span><br><span class="line"><span class="comment">+++ b/liblog/include/log/log_id.h</span></span><br><span class="line">@@ -33,7 +33,10 @@ typedef enum log_id &#123;</span><br><span class="line">   LOG_ID_CRASH = 4,</span><br><span class="line">   LOG_ID_STATS = 5,</span><br><span class="line">   LOG_ID_SECURITY = 6,</span><br><span class="line"><span class="deletion">-  LOG_ID_KERNEL = 7, /* place last, third-parties can not use it */</span></span><br><span class="line"><span class="addition">+  LOG_ID_VIP = 7,</span></span><br><span class="line"><span class="addition">+  LOG_ID_KERNEL = 8, /* place last, third-parties can not use it */</span></span><br><span class="line"><span class="addition">+  </span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"> </span><br><span class="line">   LOG_ID_MAX</span><br><span class="line"> &#125; log_id_t;</span><br><span class="line">diff --git a/liblog/include/log/log_vip.h b/liblog/include/log/log_vip.h</span><br><span class="line">new file mode 100755</span><br><span class="line">index 0000000..9123a49</span><br><span class="line"><span class="comment">--- /dev/null</span></span><br><span class="line"><span class="comment">+++ b/liblog/include/log/log_vip.h</span></span><br><span class="line"><span class="meta">@@ -0,0 +1,61 @@</span></span><br><span class="line"><span class="addition">+/*</span></span><br><span class="line"><span class="addition">+ * Copyright (C) 2005-2017 The Android Open Source Project</span></span><br><span class="line"><span class="addition">+ *</span></span><br><span class="line"><span class="addition">+ * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="addition">+ * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="addition">+ * You may obtain a copy of the License at</span></span><br><span class="line"><span class="addition">+ *</span></span><br><span class="line"><span class="addition">+ *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="addition">+ *</span></span><br><span class="line"><span class="addition">+ * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="addition">+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="addition">+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="addition">+ * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="addition">+ * limitations under the License.</span></span><br><span class="line"><span class="addition">+ */</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef _LIBS_LOG_LOG_VIP_H</span></span><br><span class="line"><span class="addition">+#define _LIBS_LOG_LOG_VIP_H</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#include &lt;android/log.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;log/log_id.h&gt;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+/*</span></span><br><span class="line"><span class="addition">+ * Normally we strip the effects of ALOGV (VERBOSE messages),</span></span><br><span class="line"><span class="addition">+ * LOG_FATAL and LOG_FATAL_IF (FATAL assert messages) from the</span></span><br><span class="line"><span class="addition">+ * release builds be defining NDEBUG.  You can modify this (for</span></span><br><span class="line"><span class="addition">+ * example with &quot;#define LOG_NDEBUG 0&quot; at the top of your source</span></span><br><span class="line"><span class="addition">+ * file) to change that behavior.</span></span><br><span class="line"><span class="addition">+ */</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef LOG_NDEBUG</span></span><br><span class="line"><span class="addition">+#ifdef NDEBUG</span></span><br><span class="line"><span class="addition">+#define LOG_NDEBUG 1</span></span><br><span class="line"><span class="addition">+#else</span></span><br><span class="line"><span class="addition">+#define LOG_NDEBUG 0</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef __predict_false</span></span><br><span class="line"><span class="addition">+#define __predict_false(exp) __builtin_expect((exp) != 0, 0)</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+/*</span></span><br><span class="line"><span class="addition">+ * Simplified macro to send an error dtc VIP message using current LOG_TAG.</span></span><br><span class="line"><span class="addition">+ */</span></span><br><span class="line"><span class="addition">+#ifndef VLOGI</span></span><br><span class="line"><span class="addition">+#define VLOGI(...)                                                          \</span></span><br><span class="line"><span class="addition">+  ((void)__android_log_buf_print(LOG_ID_VIP, ANDROID_LOG_ERROR, LOG_TAG, \</span></span><br><span class="line"><span class="addition">+                                 __VA_ARGS__))</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef VLOGI_IF</span></span><br><span class="line"><span class="addition">+#define VLOGI_IF(cond, ...)                                               \</span></span><br><span class="line"><span class="addition">+  ((__predict_false(cond))                                                \</span></span><br><span class="line"><span class="addition">+       ? ((void)__android_log_buf_print(LOG_ID_VIP, ANDROID_LOG_ERROR, \</span></span><br><span class="line"><span class="addition">+                                        LOG_TAG, __VA_ARGS__))            \</span></span><br><span class="line"><span class="addition">+       : (void)0)</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#endif /* _LIBS_LOG_LOG_VIP_H */</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">diff --git a/liblog/include_vndk/log/log.h b/liblog/include_vndk/log/log.h</span><br><span class="line">old mode 100644</span><br><span class="line">new mode 100755</span><br><span class="line">index a79beec..07a50aa</span><br><span class="line"><span class="comment">--- a/liblog/include_vndk/log/log.h</span></span><br><span class="line"><span class="comment">+++ b/liblog/include_vndk/log/log.h</span></span><br><span class="line"><span class="meta">@@ -10,6 +10,7 @@</span></span><br><span class="line"> #include &lt;log/log_read.h&gt;</span><br><span class="line"> #include &lt;log/log_safetynet.h&gt;</span><br><span class="line"> #include &lt;log/log_system.h&gt;</span><br><span class="line"><span class="addition">+#include &lt;log/log_vip.h&gt;</span></span><br><span class="line"> #include &lt;log/log_time.h&gt;</span><br><span class="line"> </span><br><span class="line"> /*</span><br><span class="line">diff --git a/liblog/include_vndk/log/log_vip.h b/liblog/include_vndk/log/log_vip.h</span><br><span class="line">new file mode 100755</span><br><span class="line">index 0000000..9123a49</span><br><span class="line"><span class="comment">--- /dev/null</span></span><br><span class="line"><span class="comment">+++ b/liblog/include_vndk/log/log_vip.h</span></span><br><span class="line"><span class="meta">@@ -0,0 +1,61 @@</span></span><br><span class="line"><span class="addition">+/*</span></span><br><span class="line"><span class="addition">+ * Copyright (C) 2005-2017 The Android Open Source Project</span></span><br><span class="line"><span class="addition">+ *</span></span><br><span class="line"><span class="addition">+ * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="addition">+ * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="addition">+ * You may obtain a copy of the License at</span></span><br><span class="line"><span class="addition">+ *</span></span><br><span class="line"><span class="addition">+ *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="addition">+ *</span></span><br><span class="line"><span class="addition">+ * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="addition">+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="addition">+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="addition">+ * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="addition">+ * limitations under the License.</span></span><br><span class="line"><span class="addition">+ */</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef _LIBS_LOG_LOG_VIP_H</span></span><br><span class="line"><span class="addition">+#define _LIBS_LOG_LOG_VIP_H</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#include &lt;android/log.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;log/log_id.h&gt;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+/*</span></span><br><span class="line"><span class="addition">+ * Normally we strip the effects of ALOGV (VERBOSE messages),</span></span><br><span class="line"><span class="addition">+ * LOG_FATAL and LOG_FATAL_IF (FATAL assert messages) from the</span></span><br><span class="line"><span class="addition">+ * release builds be defining NDEBUG.  You can modify this (for</span></span><br><span class="line"><span class="addition">+ * example with &quot;#define LOG_NDEBUG 0&quot; at the top of your source</span></span><br><span class="line"><span class="addition">+ * file) to change that behavior.</span></span><br><span class="line"><span class="addition">+ */</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef LOG_NDEBUG</span></span><br><span class="line"><span class="addition">+#ifdef NDEBUG</span></span><br><span class="line"><span class="addition">+#define LOG_NDEBUG 1</span></span><br><span class="line"><span class="addition">+#else</span></span><br><span class="line"><span class="addition">+#define LOG_NDEBUG 0</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef __predict_false</span></span><br><span class="line"><span class="addition">+#define __predict_false(exp) __builtin_expect((exp) != 0, 0)</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+/*</span></span><br><span class="line"><span class="addition">+ * Simplified macro to send an error dtc VIP message using current LOG_TAG.</span></span><br><span class="line"><span class="addition">+ */</span></span><br><span class="line"><span class="addition">+#ifndef VLOGI</span></span><br><span class="line"><span class="addition">+#define VLOGI(...)                                                          \</span></span><br><span class="line"><span class="addition">+  ((void)__android_log_buf_print(LOG_ID_VIP, ANDROID_LOG_ERROR, LOG_TAG, \</span></span><br><span class="line"><span class="addition">+                                 __VA_ARGS__))</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef VLOGI_IF</span></span><br><span class="line"><span class="addition">+#define VLOGI_IF(cond, ...)                                               \</span></span><br><span class="line"><span class="addition">+  ((__predict_false(cond))                                                \</span></span><br><span class="line"><span class="addition">+       ? ((void)__android_log_buf_print(LOG_ID_VIP, ANDROID_LOG_ERROR, \</span></span><br><span class="line"><span class="addition">+                                        LOG_TAG, __VA_ARGS__))            \</span></span><br><span class="line"><span class="addition">+       : (void)0)</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#endif /* _LIBS_LOG_LOG_VIP_H */</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">diff --git a/liblog/logger_name.c b/liblog/logger_name.c</span><br><span class="line">old mode 100644</span><br><span class="line">new mode 100755</span><br><span class="line">index 479bbfe..e20edb0</span><br><span class="line"><span class="comment">--- a/liblog/logger_name.c</span></span><br><span class="line"><span class="comment">+++ b/liblog/logger_name.c</span></span><br><span class="line">@@ -31,6 +31,7 @@ static const char* LOG_NAME[LOG_ID_MAX] = &#123;</span><br><span class="line">   [LOG_ID_STATS] = &quot;stats&quot;,</span><br><span class="line">   [LOG_ID_SECURITY] = &quot;security&quot;,</span><br><span class="line">   [LOG_ID_KERNEL] = &quot;kernel&quot;,</span><br><span class="line"><span class="addition">+  [LOG_ID_VIP] = &quot;vip&quot;,</span></span><br><span class="line">   /* clang-format on */</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h1 id="1-编译报错"><a href="#1-编译报错" class="headerlink" title="1.编译报错"></a>1.编译报错</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">gacrnd@gacrnd:~/<span class="title">songlingjie</span>/<span class="title">AndroidP</span>/<span class="title">AOSP</span>$ <span class="title">make</span> <span class="title">systemimage</span></span></span><br><span class="line"><span class="function">============================================</span></span><br><span class="line"><span class="function"><span class="title">PLATFORM_VERSION_CODENAME</span>=<span class="title">REL</span></span></span><br><span class="line"><span class="function"><span class="title">PLATFORM_VERSION</span>=9</span></span><br><span class="line"><span class="function"><span class="title">TARGET_PRODUCT</span>=<span class="title">aosp_car_x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_BUILD_VARIANT</span>=<span class="title">userdebug</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_BUILD_TYPE</span>=<span class="title">release</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_ARCH_VARIANT</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_2ND_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_2ND_ARCH_VARIANT</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_2ND_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_OS</span>=<span class="title">linux</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_OS_EXTRA</span>=<span class="title">Linux</span>-5.4.0-53-<span class="title">generic</span>-<span class="title">x86_64</span>-<span class="title">Ubuntu</span>-18.04.4-<span class="title">LTS</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_OS</span>=<span class="title">windows</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_2ND_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_BUILD_TYPE</span>=<span class="title">release</span></span></span><br><span class="line"><span class="function"><span class="title">BUILD_ID</span>=<span class="title">PQ2A</span>.190205.003</span></span><br><span class="line"><span class="function"><span class="title">OUT_DIR</span>=<span class="title">out</span></span></span><br><span class="line"><span class="function">============================================</span></span><br><span class="line"><span class="function"><span class="title">ninja</span>: <span class="title">no</span> <span class="title">work</span> <span class="title">to</span> <span class="title">do</span>.</span></span><br><span class="line"><span class="function"><span class="title">ninja</span>: <span class="title">no</span> <span class="title">work</span> <span class="title">to</span> <span class="title">do</span>.</span></span><br><span class="line"><span class="function"><span class="title">No</span> <span class="title">need</span> <span class="title">to</span> <span class="title">regenerate</span> <span class="title">ninja</span> <span class="title">file</span></span></span><br><span class="line"><span class="function"><span class="title">No</span> <span class="title">need</span> <span class="title">to</span> <span class="title">regenerate</span> <span class="title">ninja</span> <span class="title">file</span></span></span><br><span class="line"><span class="function">[  0% 35/7293] //<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog:liblog</span> <span class="title">header</span>-<span class="title">abi</span>-<span class="title">diff</span> <span class="title">liblog.so.abidiff</span></span></span><br><span class="line"><span class="function"><span class="title">FAILED</span>: <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">intermediates</span>/<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog</span>/<span class="title">liblog</span>/<span class="title">android_x86_64_core_shared</span>/<span class="title">liblog.so.abidiff</span> </span></span><br><span class="line"><span class="function">(<span class="title">prebuilts</span>/<span class="title">clang</span>-<span class="title">tools</span>/<span class="title">linux</span>-<span class="title">x86</span>/<span class="title">bin</span>/<span class="title">header</span>-<span class="title">abi</span>-<span class="title">diff</span> -<span class="title">allow</span>-<span class="title">unreferenced</span>-<span class="title">changes</span> -<span class="title">allow</span>-<span class="title">unreferenced</span>-<span class="title">elf</span>-<span class="title">symbol</span>-<span class="title">changes</span> -<span class="title">lib</span> <span class="title">liblog</span> -<span class="title">arch</span> <span class="title">x86_64</span> -<span class="title">o</span> <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">intermediates</span>/<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog</span>/<span class="title">liblog</span>/<span class="title">android_x86_64_core_shared</span>/<span class="title">liblog.so.abidiff</span> -<span class="title">new</span> <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">intermediates</span>/<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog</span>/<span class="title">liblog</span>/<span class="title">android_x86_64_core_shared</span>/<span class="title">liblog.so.lsdump</span> -<span class="title">old</span> <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">intermediates</span>/<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog</span>/<span class="title">liblog</span>/<span class="title">android_x86_64_core_shared</span>/<span class="title">liblog.so_ref.lsdump</span>)|| (<span class="title">echo</span> &#x27; ---- <span class="title">Please</span> <span class="title">update</span> <span class="title">abi</span> <span class="title">references</span> <span class="title">by</span> <span class="title">running</span> <span class="title">platform</span>/<span class="title">development</span>/<span class="title">vndk</span>/<span class="title">tools</span>/<span class="title">header</span>-<span class="title">checker</span>/<span class="title">utils</span>/<span class="title">create_reference_dumps.py</span> -<span class="title">l</span> <span class="title">liblog</span> ----&#x27; &amp;&amp; <span class="title">exit</span> 1)</span></span><br><span class="line"><span class="function">******************************************************</span></span><br><span class="line"><span class="function"><span class="title">error</span>: <span class="title">VNDK</span> <span class="title">library</span>: <span class="title">liblog</span>&#x27;<span class="title">s</span> <span class="title">ABI</span> <span class="title">has</span> <span class="title">INCOMPATIBLE</span> <span class="title">CHANGES</span> <span class="title">Please</span> <span class="title">check</span> <span class="title">compatiblity</span> <span class="title">report</span> <span class="title">at</span> : <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">intermediates</span>/<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog</span>/<span class="title">liblog</span>/<span class="title">android_x86_64_core_shared</span>/<span class="title">liblog.so.abidiff</span></span></span><br><span class="line"><span class="function">******************************************************</span></span><br><span class="line"><span class="function"> ---- <span class="title">Please</span> <span class="title">update</span> <span class="title">abi</span> <span class="title">references</span> <span class="title">by</span> <span class="title">running</span> <span class="title">platform</span>/<span class="title">development</span>/<span class="title">vndk</span>/<span class="title">tools</span>/<span class="title">header</span>-<span class="title">checker</span>/<span class="title">utils</span>/<span class="title">create_reference_dumps.py</span> -<span class="title">l</span> <span class="title">liblog</span> ----</span></span><br><span class="line"><span class="function">[  0% 44/7293] //<span class="title">frameworks</span>/<span class="title">compile</span>/<span class="title">libbcc</span>/<span class="title">lib:libbcc</span> <span class="title">link</span> <span class="title">libbcc.so</span></span></span><br><span class="line"><span class="function"><span class="title">ninja</span>: <span class="title">build</span> <span class="title">stopped</span>: <span class="title">subcommand</span> <span class="title">failed</span>.</span></span><br><span class="line"><span class="function">15:06:41 <span class="title">ninja</span> <span class="title">failed</span> <span class="title">with</span>: <span class="title">exit</span> <span class="title">status</span> 1</span></span><br></pre></td></tr></table></figure><p>在liblog中新增一个buffer id,编译时报错</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">error: <span class="title">VNDK</span> <span class="title">library</span>: <span class="title">liblog</span>&#x27;<span class="title">s</span> <span class="title">ABI</span> <span class="title">has</span> <span class="title">INCOMPATIBLE</span> <span class="title">CHANGES</span> <span class="title">Please</span> <span class="title">check</span> <span class="title">compatiblity</span> <span class="title">report</span> <span class="title">at</span> : <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">intermediates</span>/<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog</span>/<span class="title">liblog</span>/<span class="title">android_x86_64_core_shared</span>/<span class="title">liblog.so.abidiff</span></span></span><br></pre></td></tr></table></figure><h1 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2.问题原因</h1><p>不是新增源码的问题，而是VNDK的问题</p><p>VNDK(Vendor Native Development Kit)是一组专门用于vendor实现其HAL的lib库，因为自Android 8.0以来，Google引入了Treble架构，希望对vendor和system分区进行解耦处理，期待实现：framwork进程不加载vendor共享库，vendor进程仅加载vendor共享库（和部分framework共享库），而framework进程和vendor进程之间通过HIDL和hwbinder来通信。总结为如下几点：</p><ul><li>platform和Vendor的构建是相互隔离的；</li><li>platform lib对应 system.img；</li><li>vendor lib对应 vendor.img；</li><li>大多数情况下，Vendor lib跟系统核心不能相互使用；Vendor lib不允许dlopen私有的系统库；</li><li>合作伙伴不允许为自己的产品在VNDK新增lib，只能贡献到AOSP；</li></ul><p><img src="/images/androidP-VNDK/20200429110934727.png" alt="img"><br>关于VNDK的具体介绍可以参见如下博客：<br><a href="https://source.android.google.cn/devices/architecture/vndk/abi-stability?hl=zh-tw">ABI 稳定性</a><br><a href="https://www.cnblogs.com/blogs-of-lxl/p/11232754.html">Android : 供应商原生开发套件 (VNDK)</a><br><a href="https://source.android.google.cn/devices/architecture/vndk">供应商原生开发套件 (VNDK)</a></p><h2 id="2-1报错代码位置"><a href="#2-1报错代码位置" class="headerlink" title="2.1报错代码位置"></a>2.1报错代码位置</h2><p>在代码中搜索，发现 development/vndk/tools/header-checker/header-abi-diff/src 中的 header_abi_diff.cpp 报出的错误。错误提示如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">.........</span><br><span class="line"><span class="keyword">bool</span> should_emit_warning_message = ShouldEmitWarningMessage(status);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (should_emit_warning_message) &#123;</span><br><span class="line">    llvm::errs() &lt;&lt; <span class="string">&quot;******************************************************\n&quot;</span></span><br><span class="line">                 &lt;&lt; error_or_warning_str</span><br><span class="line">                 &lt;&lt; <span class="string">&quot;VNDK library: &quot;</span></span><br><span class="line">                 &lt;&lt; lib_name</span><br><span class="line">                 &lt;&lt; <span class="string">&quot;&#x27;s ABI has &quot;</span></span><br><span class="line">                 &lt;&lt; status_str</span><br><span class="line">                 &lt;&lt; unreferenced_change_str</span><br><span class="line">                 &lt;&lt; <span class="string">&quot; Please check compatiblity report at : &quot;</span></span><br><span class="line">                 &lt;&lt; compatibility_report &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 &lt;&lt; <span class="string">&quot;******************************************************\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!advice_only &amp;&amp; should_emit_warning_message) &#123;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> abi_util::CompatibilityStatusIR::Compatible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3.解决方案"></a>3.解决方案</h1><h2 id="3-1-方案一"><a href="#3-1-方案一" class="headerlink" title="3.1 方案一"></a>3.1 方案一</h2><p>直接修改代码，让里面的 main 直接返回 abi_util::CompatibilityStatusIR::Compatible; </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">      ........</span><br><span class="line">      <span class="keyword">bool</span> should_emit_warning_message = ShouldEmitWarningMessage(status);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (should_emit_warning_message) &#123;</span><br><span class="line">        <span class="comment">/*llvm::errs() &lt;&lt; &quot;******************************************************\n&quot;</span></span><br><span class="line"><span class="comment">                     &lt;&lt; error_or_warning_str</span></span><br><span class="line"><span class="comment">                     &lt;&lt; &quot;VNDK library: &quot;</span></span><br><span class="line"><span class="comment">                     &lt;&lt; lib_name</span></span><br><span class="line"><span class="comment">                     &lt;&lt; &quot;&#x27;s ABI has &quot;</span></span><br><span class="line"><span class="comment">                     &lt;&lt; status_str</span></span><br><span class="line"><span class="comment">                     &lt;&lt; unreferenced_change_str</span></span><br><span class="line"><span class="comment">                     &lt;&lt; &quot; Please check compatiblity report at : &quot;</span></span><br><span class="line"><span class="comment">                     &lt;&lt; compatibility_report &lt;&lt; &quot;\n&quot;</span></span><br><span class="line"><span class="comment">                     &lt;&lt; &quot;******************************************************\n&quot;;*/</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      if (!advice_only &amp;&amp; should_emit_warning_message) &#123;</span></span><br><span class="line"><span class="comment">        return status;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> abi_util::CompatibilityStatusIR::Compatible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-2-方案二"><a href="#3-2-方案二" class="headerlink" title="3.2 方案二"></a>3.2 方案二</h2><p> —- Please update abi references by running platform/development/vndk/tools/header-checker/utils/create_reference_dumps.py -l liblog —-‘ &amp;&amp; exit 1)</p><p>因此，在源码根目录执行platform/development/vndk/tools/header-checker/utils/create_reference_dumps.py -l liblog -</p><h1 id="4-编译"><a href="#4-编译" class="headerlink" title="4.编译"></a>4.编译</h1><h2 id="4-1编译header-checker"><a href="#4-1编译header-checker" class="headerlink" title="4.1编译header-checker"></a>4.1编译header-checker</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">gacrnd@gacrnd:~/<span class="title">songlingjie</span>/<span class="title">AndroidP</span>/<span class="title">AOSP</span>$ <span class="title">mmm</span> <span class="title">development</span>/<span class="title">vndk</span>/<span class="title">tools</span>/<span class="title">header</span>-<span class="title">checker</span>/ -<span class="title">j32</span></span></span><br><span class="line"><span class="function">============================================</span></span><br><span class="line"><span class="function"><span class="title">PLATFORM_VERSION_CODENAME</span>=<span class="title">REL</span></span></span><br><span class="line"><span class="function"><span class="title">PLATFORM_VERSION</span>=9</span></span><br><span class="line"><span class="function"><span class="title">TARGET_PRODUCT</span>=<span class="title">aosp_car_x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_BUILD_VARIANT</span>=<span class="title">userdebug</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_BUILD_TYPE</span>=<span class="title">release</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_ARCH_VARIANT</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_2ND_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_2ND_ARCH_VARIANT</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_2ND_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_OS</span>=<span class="title">linux</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_OS_EXTRA</span>=<span class="title">Linux</span>-5.4.0-53-<span class="title">generic</span>-<span class="title">x86_64</span>-<span class="title">Ubuntu</span>-18.04.4-<span class="title">LTS</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_OS</span>=<span class="title">windows</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_2ND_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_BUILD_TYPE</span>=<span class="title">release</span></span></span><br><span class="line"><span class="function"><span class="title">BUILD_ID</span>=<span class="title">PQ2A</span>.190205.003</span></span><br><span class="line"><span class="function"><span class="title">OUT_DIR</span>=<span class="title">out</span></span></span><br><span class="line"><span class="function">============================================</span></span><br><span class="line"><span class="function"><span class="title">ninja</span>: <span class="title">no</span> <span class="title">work</span> <span class="title">to</span> <span class="title">do</span>.</span></span><br><span class="line"><span class="function">[1/1] <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">bootstrap</span>/<span class="title">bin</span>/<span class="title">soong_build</span> <span class="title">out</span>/<span class="title">soong</span>/<span class="title">build.ninja</span></span></span><br><span class="line"><span class="function"><span class="title">out</span>/<span class="title">build</span>-6<span class="title">a3b3b02de52311720105cf509e4ece0</span>-<span class="title">cleanspec.ninja</span> <span class="title">is</span> <span class="title">missing</span>, <span class="title">regenerating</span>...</span></span><br><span class="line"><span class="function"><span class="title">out</span>/<span class="title">build</span>-6<span class="title">a3b3b02de52311720105cf509e4ece0.ninja</span> <span class="title">is</span> <span class="title">missing</span>, <span class="title">regenerating</span>...</span></span><br><span class="line"><span class="function">[ 80% 4/5] <span class="title">glob</span> <span class="title">frameworks</span>/<span class="title">base</span>/<span class="title">core</span>/<span class="title">jni</span></span></span><br><span class="line"><span class="function">[100% 764/764] <span class="title">Install</span>: <span class="title">out</span>/<span class="title">host</span>/<span class="title">linux</span>-<span class="title">x86</span>/<span class="title">bin</span>/<span class="title">header</span>-<span class="title">abi</span>-<span class="title">dumper</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">#### <span class="title">build</span> <span class="title">completed</span> <span class="title">successfully</span> (12:34 (<span class="title">mm:ss</span>)) ####</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><h2 id="4-2替换二进制库"><a href="#4-2替换二进制库" class="headerlink" title="4.2替换二进制库"></a>4.2替换二进制库</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">gacrnd@gacrnd:~/<span class="title">songlingjie</span>/<span class="title">AndroidP</span>/<span class="title">AOSP</span>$ <span class="title">cp</span> <span class="title">out</span>/<span class="title">host</span>/<span class="title">linux</span>-<span class="title">x86</span>/<span class="title">bin</span>/<span class="title">header</span>-<span class="title">abi</span>-<span class="title">d</span></span></span><br><span class="line"><span class="function"><span class="title">header</span>-<span class="title">abi</span>-<span class="title">diff</span>    <span class="title">header</span>-<span class="title">abi</span>-<span class="title">dumper</span>  </span></span><br><span class="line"><span class="function"><span class="title">gacrnd</span>@<span class="title">gacrnd</span>:~/<span class="title">songlingjie</span>/<span class="title">AndroidP</span>/<span class="title">AOSP</span>$ <span class="title">cp</span> <span class="title">out</span>/<span class="title">host</span>/<span class="title">linux</span>-<span class="title">x86</span>/<span class="title">bin</span>/<span class="title">header</span>-<span class="title">abi</span>-<span class="title">dumper</span> <span class="title">prebuilts</span>/<span class="title">clang</span>-<span class="title">tools</span>/<span class="title">linux</span>-<span class="title">x86</span>/<span class="title">bin</span>/<span class="title">header</span>-<span class="title">abi</span>-<span class="title">dumper</span> </span></span><br></pre></td></tr></table></figure><h2 id="4-3重新编译liblog"><a href="#4-3重新编译liblog" class="headerlink" title="4.3重新编译liblog"></a>4.3重新编译liblog</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">gacrnd@gacrnd:~/<span class="title">songlingjie</span>/<span class="title">AndroidP</span>/<span class="title">AOSP</span>$ <span class="title">make</span> -<span class="title">j32</span> <span class="title">liblog</span></span></span><br><span class="line"><span class="function">============================================</span></span><br><span class="line"><span class="function"><span class="title">PLATFORM_VERSION_CODENAME</span>=<span class="title">REL</span></span></span><br><span class="line"><span class="function"><span class="title">PLATFORM_VERSION</span>=9</span></span><br><span class="line"><span class="function"><span class="title">TARGET_PRODUCT</span>=<span class="title">aosp_car_x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_BUILD_VARIANT</span>=<span class="title">userdebug</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_BUILD_TYPE</span>=<span class="title">release</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_ARCH_VARIANT</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_2ND_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_2ND_ARCH_VARIANT</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_2ND_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_OS</span>=<span class="title">linux</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_OS_EXTRA</span>=<span class="title">Linux</span>-5.4.0-53-<span class="title">generic</span>-<span class="title">x86_64</span>-<span class="title">Ubuntu</span>-18.04.4-<span class="title">LTS</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_OS</span>=<span class="title">windows</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_2ND_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_BUILD_TYPE</span>=<span class="title">release</span></span></span><br><span class="line"><span class="function"><span class="title">BUILD_ID</span>=<span class="title">PQ2A</span>.190205.003</span></span><br><span class="line"><span class="function"><span class="title">OUT_DIR</span>=<span class="title">out</span></span></span><br><span class="line"><span class="function">============================================</span></span><br><span class="line"><span class="function"><span class="title">ninja</span>: <span class="title">no</span> <span class="title">work</span> <span class="title">to</span> <span class="title">do</span>.</span></span><br><span class="line"><span class="function">[1/1] <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">bootstrap</span>/<span class="title">bin</span>/<span class="title">soong_build</span> <span class="title">out</span>/<span class="title">soong</span>/<span class="title">build.ninja</span></span></span><br><span class="line"><span class="function"><span class="title">No</span> <span class="title">need</span> <span class="title">to</span> <span class="title">regenerate</span> <span class="title">ninja</span> <span class="title">file</span></span></span><br><span class="line"><span class="function"><span class="title">No</span> <span class="title">need</span> <span class="title">to</span> <span class="title">regenerate</span> <span class="title">ninja</span> <span class="title">file</span></span></span><br><span class="line"><span class="function">[100% 1506/1506] <span class="title">Install</span>: <span class="title">out</span>/<span class="title">target</span>/<span class="title">product</span>/<span class="title">generic_x86_64</span>/<span class="title">system</span>/<span class="title">lib</span>/<span class="title">liblog.so</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">#### <span class="title">build</span> <span class="title">completed</span> <span class="title">successfully</span> (02:18 (<span class="title">mm:ss</span>)) ####</span></span><br></pre></td></tr></table></figure><h2 id="4-4编译systemimage"><a href="#4-4编译systemimage" class="headerlink" title="4.4编译systemimage"></a>4.4编译systemimage</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">gacrnd@gacrnd:~/<span class="title">songlingjie</span>/<span class="title">AndroidP</span>/<span class="title">AOSP</span>$ <span class="title">make</span> <span class="title">systemimage</span></span></span><br><span class="line"><span class="function">........</span></span><br><span class="line"><span class="function">........</span></span><br><span class="line"><span class="function"><span class="title">REALLY</span> <span class="title">setting</span> <span class="title">name</span>!</span></span><br><span class="line"><span class="function"><span class="title">Warning</span>: <span class="title">The</span> <span class="title">kernel</span> <span class="title">is</span> <span class="title">still</span> <span class="title">using</span> <span class="title">the</span> <span class="title">old</span> <span class="title">partition</span> <span class="title">table</span>.</span></span><br><span class="line"><span class="function"><span class="title">The</span> <span class="title">new</span> <span class="title">table</span> <span class="title">will</span> <span class="title">be</span> <span class="title">used</span> <span class="title">at</span> <span class="title">the</span> <span class="title">next</span> <span class="title">reboot</span>.</span></span><br><span class="line"><span class="function"><span class="title">The</span> <span class="title">operation</span> <span class="title">has</span> <span class="title">completed</span> <span class="title">successfully</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">#### <span class="title">build</span> <span class="title">completed</span> <span class="title">successfully</span> (43:55 (<span class="title">mm:ss</span>)) ####</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><h1 id="查看socket数据"><a href="#查看socket数据" class="headerlink" title="查看socket数据"></a>查看socket数据</h1><p>strace -f -p 进程号（socket所在的进程） -o path(log保存的文件路径)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;liblog中新增一个buffer-id&quot;&gt;&lt;a href=&quot;#liblog中新增一个buffer-id&quot; class=&quot;headerlink&quot; title=&quot;liblog中新增一个buffer id&quot;&gt;&lt;/a&gt;liblog中新增一个buffer id&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="log" scheme="http://example.com/categories/log/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>androidP-VNDK</title>
    <link href="http://example.com/2020/12/15/androidP-VNDK-error/"/>
    <id>http://example.com/2020/12/15/androidP-VNDK-error/</id>
    <published>2020-12-15T07:44:42.000Z</published>
    <updated>2020-12-15T13:20:26.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="liblog中新增一个buffer-id"><a href="#liblog中新增一个buffer-id" class="headerlink" title="liblog中新增一个buffer id"></a>liblog中新增一个buffer id</h1><p>新增的patch如下：</p><figure class="highlight patch"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/liblog/include/android/log.h b/liblog/include/android/log.h</span><br><span class="line">old mode 100644</span><br><span class="line">new mode 100755</span><br><span class="line">index 28c87e4..0f325c0</span><br><span class="line"><span class="comment">--- a/liblog/include/android/log.h</span></span><br><span class="line"><span class="comment">+++ b/liblog/include/android/log.h</span></span><br><span class="line">@@ -183,7 +183,8 @@ typedef enum log_id &#123;</span><br><span class="line">   LOG_ID_CRASH = 4,</span><br><span class="line">   LOG_ID_STATS = 5,</span><br><span class="line">   LOG_ID_SECURITY = 6,</span><br><span class="line"><span class="deletion">-  LOG_ID_KERNEL = 7, /* place last, third-parties can not use it */</span></span><br><span class="line"><span class="addition">+  LOG_ID_VIP = 7,</span></span><br><span class="line"><span class="addition">+  LOG_ID_KERNEL = 8, /* place last, third-parties can not use it */</span></span><br><span class="line"> </span><br><span class="line">   LOG_ID_MAX</span><br><span class="line"> &#125; log_id_t;</span><br><span class="line">diff --git a/liblog/include/log/log.h b/liblog/include/log/log.h</span><br><span class="line">old mode 100644</span><br><span class="line">new mode 100755</span><br><span class="line">index 3813e6e..c6ee7a8</span><br><span class="line"><span class="comment">--- a/liblog/include/log/log.h</span></span><br><span class="line"><span class="comment">+++ b/liblog/include/log/log.h</span></span><br><span class="line"><span class="meta">@@ -34,6 +34,7 @@</span></span><br><span class="line"> #include &lt;log/log_read.h&gt;</span><br><span class="line"> #include &lt;log/log_safetynet.h&gt;</span><br><span class="line"> #include &lt;log/log_system.h&gt;</span><br><span class="line"><span class="addition">+#include &lt;log/log_vip.h&gt;</span></span><br><span class="line"> #include &lt;log/log_time.h&gt;</span><br><span class="line"> #include &lt;log/uio.h&gt; /* helper to define iovec for portability */</span><br><span class="line"> </span><br><span class="line">diff --git a/liblog/include/log/log_id.h b/liblog/include/log/log_id.h</span><br><span class="line">old mode 100644</span><br><span class="line">new mode 100755</span><br><span class="line">index c44f5a2..4647d71</span><br><span class="line"><span class="comment">--- a/liblog/include/log/log_id.h</span></span><br><span class="line"><span class="comment">+++ b/liblog/include/log/log_id.h</span></span><br><span class="line">@@ -33,7 +33,10 @@ typedef enum log_id &#123;</span><br><span class="line">   LOG_ID_CRASH = 4,</span><br><span class="line">   LOG_ID_STATS = 5,</span><br><span class="line">   LOG_ID_SECURITY = 6,</span><br><span class="line"><span class="deletion">-  LOG_ID_KERNEL = 7, /* place last, third-parties can not use it */</span></span><br><span class="line"><span class="addition">+  LOG_ID_VIP = 7,</span></span><br><span class="line"><span class="addition">+  LOG_ID_KERNEL = 8, /* place last, third-parties can not use it */</span></span><br><span class="line"><span class="addition">+  </span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"> </span><br><span class="line">   LOG_ID_MAX</span><br><span class="line"> &#125; log_id_t;</span><br><span class="line">diff --git a/liblog/include/log/log_vip.h b/liblog/include/log/log_vip.h</span><br><span class="line">new file mode 100755</span><br><span class="line">index 0000000..9123a49</span><br><span class="line"><span class="comment">--- /dev/null</span></span><br><span class="line"><span class="comment">+++ b/liblog/include/log/log_vip.h</span></span><br><span class="line"><span class="meta">@@ -0,0 +1,61 @@</span></span><br><span class="line"><span class="addition">+/*</span></span><br><span class="line"><span class="addition">+ * Copyright (C) 2005-2017 The Android Open Source Project</span></span><br><span class="line"><span class="addition">+ *</span></span><br><span class="line"><span class="addition">+ * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="addition">+ * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="addition">+ * You may obtain a copy of the License at</span></span><br><span class="line"><span class="addition">+ *</span></span><br><span class="line"><span class="addition">+ *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="addition">+ *</span></span><br><span class="line"><span class="addition">+ * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="addition">+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="addition">+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="addition">+ * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="addition">+ * limitations under the License.</span></span><br><span class="line"><span class="addition">+ */</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef _LIBS_LOG_LOG_VIP_H</span></span><br><span class="line"><span class="addition">+#define _LIBS_LOG_LOG_VIP_H</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#include &lt;android/log.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;log/log_id.h&gt;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+/*</span></span><br><span class="line"><span class="addition">+ * Normally we strip the effects of ALOGV (VERBOSE messages),</span></span><br><span class="line"><span class="addition">+ * LOG_FATAL and LOG_FATAL_IF (FATAL assert messages) from the</span></span><br><span class="line"><span class="addition">+ * release builds be defining NDEBUG.  You can modify this (for</span></span><br><span class="line"><span class="addition">+ * example with &quot;#define LOG_NDEBUG 0&quot; at the top of your source</span></span><br><span class="line"><span class="addition">+ * file) to change that behavior.</span></span><br><span class="line"><span class="addition">+ */</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef LOG_NDEBUG</span></span><br><span class="line"><span class="addition">+#ifdef NDEBUG</span></span><br><span class="line"><span class="addition">+#define LOG_NDEBUG 1</span></span><br><span class="line"><span class="addition">+#else</span></span><br><span class="line"><span class="addition">+#define LOG_NDEBUG 0</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef __predict_false</span></span><br><span class="line"><span class="addition">+#define __predict_false(exp) __builtin_expect((exp) != 0, 0)</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+/*</span></span><br><span class="line"><span class="addition">+ * Simplified macro to send an error dtc VIP message using current LOG_TAG.</span></span><br><span class="line"><span class="addition">+ */</span></span><br><span class="line"><span class="addition">+#ifndef VLOGI</span></span><br><span class="line"><span class="addition">+#define VLOGI(...)                                                          \</span></span><br><span class="line"><span class="addition">+  ((void)__android_log_buf_print(LOG_ID_VIP, ANDROID_LOG_ERROR, LOG_TAG, \</span></span><br><span class="line"><span class="addition">+                                 __VA_ARGS__))</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef VLOGI_IF</span></span><br><span class="line"><span class="addition">+#define VLOGI_IF(cond, ...)                                               \</span></span><br><span class="line"><span class="addition">+  ((__predict_false(cond))                                                \</span></span><br><span class="line"><span class="addition">+       ? ((void)__android_log_buf_print(LOG_ID_VIP, ANDROID_LOG_ERROR, \</span></span><br><span class="line"><span class="addition">+                                        LOG_TAG, __VA_ARGS__))            \</span></span><br><span class="line"><span class="addition">+       : (void)0)</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#endif /* _LIBS_LOG_LOG_VIP_H */</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">diff --git a/liblog/include_vndk/log/log.h b/liblog/include_vndk/log/log.h</span><br><span class="line">old mode 100644</span><br><span class="line">new mode 100755</span><br><span class="line">index a79beec..07a50aa</span><br><span class="line"><span class="comment">--- a/liblog/include_vndk/log/log.h</span></span><br><span class="line"><span class="comment">+++ b/liblog/include_vndk/log/log.h</span></span><br><span class="line"><span class="meta">@@ -10,6 +10,7 @@</span></span><br><span class="line"> #include &lt;log/log_read.h&gt;</span><br><span class="line"> #include &lt;log/log_safetynet.h&gt;</span><br><span class="line"> #include &lt;log/log_system.h&gt;</span><br><span class="line"><span class="addition">+#include &lt;log/log_vip.h&gt;</span></span><br><span class="line"> #include &lt;log/log_time.h&gt;</span><br><span class="line"> </span><br><span class="line"> /*</span><br><span class="line">diff --git a/liblog/include_vndk/log/log_vip.h b/liblog/include_vndk/log/log_vip.h</span><br><span class="line">new file mode 100755</span><br><span class="line">index 0000000..9123a49</span><br><span class="line"><span class="comment">--- /dev/null</span></span><br><span class="line"><span class="comment">+++ b/liblog/include_vndk/log/log_vip.h</span></span><br><span class="line"><span class="meta">@@ -0,0 +1,61 @@</span></span><br><span class="line"><span class="addition">+/*</span></span><br><span class="line"><span class="addition">+ * Copyright (C) 2005-2017 The Android Open Source Project</span></span><br><span class="line"><span class="addition">+ *</span></span><br><span class="line"><span class="addition">+ * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="addition">+ * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="addition">+ * You may obtain a copy of the License at</span></span><br><span class="line"><span class="addition">+ *</span></span><br><span class="line"><span class="addition">+ *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="addition">+ *</span></span><br><span class="line"><span class="addition">+ * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="addition">+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="addition">+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="addition">+ * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="addition">+ * limitations under the License.</span></span><br><span class="line"><span class="addition">+ */</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef _LIBS_LOG_LOG_VIP_H</span></span><br><span class="line"><span class="addition">+#define _LIBS_LOG_LOG_VIP_H</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#include &lt;android/log.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;log/log_id.h&gt;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+/*</span></span><br><span class="line"><span class="addition">+ * Normally we strip the effects of ALOGV (VERBOSE messages),</span></span><br><span class="line"><span class="addition">+ * LOG_FATAL and LOG_FATAL_IF (FATAL assert messages) from the</span></span><br><span class="line"><span class="addition">+ * release builds be defining NDEBUG.  You can modify this (for</span></span><br><span class="line"><span class="addition">+ * example with &quot;#define LOG_NDEBUG 0&quot; at the top of your source</span></span><br><span class="line"><span class="addition">+ * file) to change that behavior.</span></span><br><span class="line"><span class="addition">+ */</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef LOG_NDEBUG</span></span><br><span class="line"><span class="addition">+#ifdef NDEBUG</span></span><br><span class="line"><span class="addition">+#define LOG_NDEBUG 1</span></span><br><span class="line"><span class="addition">+#else</span></span><br><span class="line"><span class="addition">+#define LOG_NDEBUG 0</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef __predict_false</span></span><br><span class="line"><span class="addition">+#define __predict_false(exp) __builtin_expect((exp) != 0, 0)</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+/*</span></span><br><span class="line"><span class="addition">+ * Simplified macro to send an error dtc VIP message using current LOG_TAG.</span></span><br><span class="line"><span class="addition">+ */</span></span><br><span class="line"><span class="addition">+#ifndef VLOGI</span></span><br><span class="line"><span class="addition">+#define VLOGI(...)                                                          \</span></span><br><span class="line"><span class="addition">+  ((void)__android_log_buf_print(LOG_ID_VIP, ANDROID_LOG_ERROR, LOG_TAG, \</span></span><br><span class="line"><span class="addition">+                                 __VA_ARGS__))</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef VLOGI_IF</span></span><br><span class="line"><span class="addition">+#define VLOGI_IF(cond, ...)                                               \</span></span><br><span class="line"><span class="addition">+  ((__predict_false(cond))                                                \</span></span><br><span class="line"><span class="addition">+       ? ((void)__android_log_buf_print(LOG_ID_VIP, ANDROID_LOG_ERROR, \</span></span><br><span class="line"><span class="addition">+                                        LOG_TAG, __VA_ARGS__))            \</span></span><br><span class="line"><span class="addition">+       : (void)0)</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#endif /* _LIBS_LOG_LOG_VIP_H */</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">diff --git a/liblog/logger_name.c b/liblog/logger_name.c</span><br><span class="line">old mode 100644</span><br><span class="line">new mode 100755</span><br><span class="line">index 479bbfe..e20edb0</span><br><span class="line"><span class="comment">--- a/liblog/logger_name.c</span></span><br><span class="line"><span class="comment">+++ b/liblog/logger_name.c</span></span><br><span class="line">@@ -31,6 +31,7 @@ static const char* LOG_NAME[LOG_ID_MAX] = &#123;</span><br><span class="line">   [LOG_ID_STATS] = &quot;stats&quot;,</span><br><span class="line">   [LOG_ID_SECURITY] = &quot;security&quot;,</span><br><span class="line">   [LOG_ID_KERNEL] = &quot;kernel&quot;,</span><br><span class="line"><span class="addition">+  [LOG_ID_VIP] = &quot;vip&quot;,</span></span><br><span class="line">   /* clang-format on */</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h1 id="1-编译报错"><a href="#1-编译报错" class="headerlink" title="1.编译报错"></a>1.编译报错</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">gacrnd@gacrnd:~/<span class="title">songlingjie</span>/<span class="title">AndroidP</span>/<span class="title">AOSP</span>$ <span class="title">make</span> <span class="title">systemimage</span></span></span><br><span class="line"><span class="function">============================================</span></span><br><span class="line"><span class="function"><span class="title">PLATFORM_VERSION_CODENAME</span>=<span class="title">REL</span></span></span><br><span class="line"><span class="function"><span class="title">PLATFORM_VERSION</span>=9</span></span><br><span class="line"><span class="function"><span class="title">TARGET_PRODUCT</span>=<span class="title">aosp_car_x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_BUILD_VARIANT</span>=<span class="title">userdebug</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_BUILD_TYPE</span>=<span class="title">release</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_ARCH_VARIANT</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_2ND_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_2ND_ARCH_VARIANT</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_2ND_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_OS</span>=<span class="title">linux</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_OS_EXTRA</span>=<span class="title">Linux</span>-5.4.0-53-<span class="title">generic</span>-<span class="title">x86_64</span>-<span class="title">Ubuntu</span>-18.04.4-<span class="title">LTS</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_OS</span>=<span class="title">windows</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_2ND_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_BUILD_TYPE</span>=<span class="title">release</span></span></span><br><span class="line"><span class="function"><span class="title">BUILD_ID</span>=<span class="title">PQ2A</span>.190205.003</span></span><br><span class="line"><span class="function"><span class="title">OUT_DIR</span>=<span class="title">out</span></span></span><br><span class="line"><span class="function">============================================</span></span><br><span class="line"><span class="function"><span class="title">ninja</span>: <span class="title">no</span> <span class="title">work</span> <span class="title">to</span> <span class="title">do</span>.</span></span><br><span class="line"><span class="function"><span class="title">ninja</span>: <span class="title">no</span> <span class="title">work</span> <span class="title">to</span> <span class="title">do</span>.</span></span><br><span class="line"><span class="function"><span class="title">No</span> <span class="title">need</span> <span class="title">to</span> <span class="title">regenerate</span> <span class="title">ninja</span> <span class="title">file</span></span></span><br><span class="line"><span class="function"><span class="title">No</span> <span class="title">need</span> <span class="title">to</span> <span class="title">regenerate</span> <span class="title">ninja</span> <span class="title">file</span></span></span><br><span class="line"><span class="function">[  0% 35/7293] //<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog:liblog</span> <span class="title">header</span>-<span class="title">abi</span>-<span class="title">diff</span> <span class="title">liblog.so.abidiff</span></span></span><br><span class="line"><span class="function"><span class="title">FAILED</span>: <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">intermediates</span>/<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog</span>/<span class="title">liblog</span>/<span class="title">android_x86_64_core_shared</span>/<span class="title">liblog.so.abidiff</span> </span></span><br><span class="line"><span class="function">(<span class="title">prebuilts</span>/<span class="title">clang</span>-<span class="title">tools</span>/<span class="title">linux</span>-<span class="title">x86</span>/<span class="title">bin</span>/<span class="title">header</span>-<span class="title">abi</span>-<span class="title">diff</span> -<span class="title">allow</span>-<span class="title">unreferenced</span>-<span class="title">changes</span> -<span class="title">allow</span>-<span class="title">unreferenced</span>-<span class="title">elf</span>-<span class="title">symbol</span>-<span class="title">changes</span> -<span class="title">lib</span> <span class="title">liblog</span> -<span class="title">arch</span> <span class="title">x86_64</span> -<span class="title">o</span> <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">intermediates</span>/<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog</span>/<span class="title">liblog</span>/<span class="title">android_x86_64_core_shared</span>/<span class="title">liblog.so.abidiff</span> -<span class="title">new</span> <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">intermediates</span>/<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog</span>/<span class="title">liblog</span>/<span class="title">android_x86_64_core_shared</span>/<span class="title">liblog.so.lsdump</span> -<span class="title">old</span> <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">intermediates</span>/<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog</span>/<span class="title">liblog</span>/<span class="title">android_x86_64_core_shared</span>/<span class="title">liblog.so_ref.lsdump</span>)|| (<span class="title">echo</span> &#x27; ---- <span class="title">Please</span> <span class="title">update</span> <span class="title">abi</span> <span class="title">references</span> <span class="title">by</span> <span class="title">running</span> <span class="title">platform</span>/<span class="title">development</span>/<span class="title">vndk</span>/<span class="title">tools</span>/<span class="title">header</span>-<span class="title">checker</span>/<span class="title">utils</span>/<span class="title">create_reference_dumps.py</span> -<span class="title">l</span> <span class="title">liblog</span> ----&#x27; &amp;&amp; <span class="title">exit</span> 1)</span></span><br><span class="line"><span class="function">******************************************************</span></span><br><span class="line"><span class="function"><span class="title">error</span>: <span class="title">VNDK</span> <span class="title">library</span>: <span class="title">liblog</span>&#x27;<span class="title">s</span> <span class="title">ABI</span> <span class="title">has</span> <span class="title">INCOMPATIBLE</span> <span class="title">CHANGES</span> <span class="title">Please</span> <span class="title">check</span> <span class="title">compatiblity</span> <span class="title">report</span> <span class="title">at</span> : <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">intermediates</span>/<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog</span>/<span class="title">liblog</span>/<span class="title">android_x86_64_core_shared</span>/<span class="title">liblog.so.abidiff</span></span></span><br><span class="line"><span class="function">******************************************************</span></span><br><span class="line"><span class="function"> ---- <span class="title">Please</span> <span class="title">update</span> <span class="title">abi</span> <span class="title">references</span> <span class="title">by</span> <span class="title">running</span> <span class="title">platform</span>/<span class="title">development</span>/<span class="title">vndk</span>/<span class="title">tools</span>/<span class="title">header</span>-<span class="title">checker</span>/<span class="title">utils</span>/<span class="title">create_reference_dumps.py</span> -<span class="title">l</span> <span class="title">liblog</span> ----</span></span><br><span class="line"><span class="function">[  0% 44/7293] //<span class="title">frameworks</span>/<span class="title">compile</span>/<span class="title">libbcc</span>/<span class="title">lib:libbcc</span> <span class="title">link</span> <span class="title">libbcc.so</span></span></span><br><span class="line"><span class="function"><span class="title">ninja</span>: <span class="title">build</span> <span class="title">stopped</span>: <span class="title">subcommand</span> <span class="title">failed</span>.</span></span><br><span class="line"><span class="function">15:06:41 <span class="title">ninja</span> <span class="title">failed</span> <span class="title">with</span>: <span class="title">exit</span> <span class="title">status</span> 1</span></span><br></pre></td></tr></table></figure><p>在liblog中新增一个buffer id,编译时报错</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">error: <span class="title">VNDK</span> <span class="title">library</span>: <span class="title">liblog</span>&#x27;<span class="title">s</span> <span class="title">ABI</span> <span class="title">has</span> <span class="title">INCOMPATIBLE</span> <span class="title">CHANGES</span> <span class="title">Please</span> <span class="title">check</span> <span class="title">compatiblity</span> <span class="title">report</span> <span class="title">at</span> : <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">intermediates</span>/<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog</span>/<span class="title">liblog</span>/<span class="title">android_x86_64_core_shared</span>/<span class="title">liblog.so.abidiff</span></span></span><br></pre></td></tr></table></figure><h1 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2.问题原因</h1><p>不是新增源码的问题，而是VNDK的问题</p><p>VNDK(Vendor Native Development Kit)是一组专门用于vendor实现其HAL的lib库，因为自Android 8.0以来，Google引入了Treble架构，希望对vendor和system分区进行解耦处理，期待实现：framwork进程不加载vendor共享库，vendor进程仅加载vendor共享库（和部分framework共享库），而framework进程和vendor进程之间通过HIDL和hwbinder来通信。总结为如下几点：</p><ul><li>platform和Vendor的构建是相互隔离的；</li><li>platform lib对应 system.img；</li><li>vendor lib对应 vendor.img；</li><li>大多数情况下，Vendor lib跟系统核心不能相互使用；Vendor lib不允许dlopen私有的系统库；</li><li>合作伙伴不允许为自己的产品在VNDK新增lib，只能贡献到AOSP；</li></ul><p><img src="/images/androidP-VNDK/20200429110934727.png" alt="img"><br>关于VNDK的具体介绍可以参见如下博客：<br><a href="https://source.android.google.cn/devices/architecture/vndk/abi-stability?hl=zh-tw">ABI 稳定性</a><br><a href="https://www.cnblogs.com/blogs-of-lxl/p/11232754.html">Android : 供应商原生开发套件 (VNDK)</a><br><a href="https://source.android.google.cn/devices/architecture/vndk">供应商原生开发套件 (VNDK)</a></p><h2 id="2-1报错代码位置"><a href="#2-1报错代码位置" class="headerlink" title="2.1报错代码位置"></a>2.1报错代码位置</h2><p>在代码中搜索，发现 development/vndk/tools/header-checker/header-abi-diff/src 中的 header_abi_diff.cpp 报出的错误。错误提示如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">.........</span><br><span class="line"><span class="keyword">bool</span> should_emit_warning_message = ShouldEmitWarningMessage(status);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (should_emit_warning_message) &#123;</span><br><span class="line">    llvm::errs() &lt;&lt; <span class="string">&quot;******************************************************\n&quot;</span></span><br><span class="line">                 &lt;&lt; error_or_warning_str</span><br><span class="line">                 &lt;&lt; <span class="string">&quot;VNDK library: &quot;</span></span><br><span class="line">                 &lt;&lt; lib_name</span><br><span class="line">                 &lt;&lt; <span class="string">&quot;&#x27;s ABI has &quot;</span></span><br><span class="line">                 &lt;&lt; status_str</span><br><span class="line">                 &lt;&lt; unreferenced_change_str</span><br><span class="line">                 &lt;&lt; <span class="string">&quot; Please check compatiblity report at : &quot;</span></span><br><span class="line">                 &lt;&lt; compatibility_report &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 &lt;&lt; <span class="string">&quot;******************************************************\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!advice_only &amp;&amp; should_emit_warning_message) &#123;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> abi_util::CompatibilityStatusIR::Compatible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3.解决方案"></a>3.解决方案</h1><p>直接修改代码，让里面的 main 直接返回 abi_util::CompatibilityStatusIR::Compatible; </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">      ........</span><br><span class="line">      <span class="keyword">bool</span> should_emit_warning_message = ShouldEmitWarningMessage(status);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (should_emit_warning_message) &#123;</span><br><span class="line">        <span class="comment">/*llvm::errs() &lt;&lt; &quot;******************************************************\n&quot;</span></span><br><span class="line"><span class="comment">                     &lt;&lt; error_or_warning_str</span></span><br><span class="line"><span class="comment">                     &lt;&lt; &quot;VNDK library: &quot;</span></span><br><span class="line"><span class="comment">                     &lt;&lt; lib_name</span></span><br><span class="line"><span class="comment">                     &lt;&lt; &quot;&#x27;s ABI has &quot;</span></span><br><span class="line"><span class="comment">                     &lt;&lt; status_str</span></span><br><span class="line"><span class="comment">                     &lt;&lt; unreferenced_change_str</span></span><br><span class="line"><span class="comment">                     &lt;&lt; &quot; Please check compatiblity report at : &quot;</span></span><br><span class="line"><span class="comment">                     &lt;&lt; compatibility_report &lt;&lt; &quot;\n&quot;</span></span><br><span class="line"><span class="comment">                     &lt;&lt; &quot;******************************************************\n&quot;;*/</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      if (!advice_only &amp;&amp; should_emit_warning_message) &#123;</span></span><br><span class="line"><span class="comment">        return status;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> abi_util::CompatibilityStatusIR::Compatible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4-编译"><a href="#4-编译" class="headerlink" title="4.编译"></a>4.编译</h1><h2 id="4-1编译header-checker"><a href="#4-1编译header-checker" class="headerlink" title="4.1编译header-checker"></a>4.1编译header-checker</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">gacrnd@gacrnd:~/<span class="title">songlingjie</span>/<span class="title">AndroidP</span>/<span class="title">AOSP</span>$ <span class="title">mmm</span> <span class="title">development</span>/<span class="title">vndk</span>/<span class="title">tools</span>/<span class="title">header</span>-<span class="title">checker</span>/ -<span class="title">j32</span></span></span><br><span class="line"><span class="function">============================================</span></span><br><span class="line"><span class="function"><span class="title">PLATFORM_VERSION_CODENAME</span>=<span class="title">REL</span></span></span><br><span class="line"><span class="function"><span class="title">PLATFORM_VERSION</span>=9</span></span><br><span class="line"><span class="function"><span class="title">TARGET_PRODUCT</span>=<span class="title">aosp_car_x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_BUILD_VARIANT</span>=<span class="title">userdebug</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_BUILD_TYPE</span>=<span class="title">release</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_ARCH_VARIANT</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_2ND_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_2ND_ARCH_VARIANT</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_2ND_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_OS</span>=<span class="title">linux</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_OS_EXTRA</span>=<span class="title">Linux</span>-5.4.0-53-<span class="title">generic</span>-<span class="title">x86_64</span>-<span class="title">Ubuntu</span>-18.04.4-<span class="title">LTS</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_OS</span>=<span class="title">windows</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_2ND_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_BUILD_TYPE</span>=<span class="title">release</span></span></span><br><span class="line"><span class="function"><span class="title">BUILD_ID</span>=<span class="title">PQ2A</span>.190205.003</span></span><br><span class="line"><span class="function"><span class="title">OUT_DIR</span>=<span class="title">out</span></span></span><br><span class="line"><span class="function">============================================</span></span><br><span class="line"><span class="function"><span class="title">ninja</span>: <span class="title">no</span> <span class="title">work</span> <span class="title">to</span> <span class="title">do</span>.</span></span><br><span class="line"><span class="function">[1/1] <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">bootstrap</span>/<span class="title">bin</span>/<span class="title">soong_build</span> <span class="title">out</span>/<span class="title">soong</span>/<span class="title">build.ninja</span></span></span><br><span class="line"><span class="function"><span class="title">out</span>/<span class="title">build</span>-6<span class="title">a3b3b02de52311720105cf509e4ece0</span>-<span class="title">cleanspec.ninja</span> <span class="title">is</span> <span class="title">missing</span>, <span class="title">regenerating</span>...</span></span><br><span class="line"><span class="function"><span class="title">out</span>/<span class="title">build</span>-6<span class="title">a3b3b02de52311720105cf509e4ece0.ninja</span> <span class="title">is</span> <span class="title">missing</span>, <span class="title">regenerating</span>...</span></span><br><span class="line"><span class="function">[ 80% 4/5] <span class="title">glob</span> <span class="title">frameworks</span>/<span class="title">base</span>/<span class="title">core</span>/<span class="title">jni</span></span></span><br><span class="line"><span class="function">[100% 764/764] <span class="title">Install</span>: <span class="title">out</span>/<span class="title">host</span>/<span class="title">linux</span>-<span class="title">x86</span>/<span class="title">bin</span>/<span class="title">header</span>-<span class="title">abi</span>-<span class="title">dumper</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">#### <span class="title">build</span> <span class="title">completed</span> <span class="title">successfully</span> (12:34 (<span class="title">mm:ss</span>)) ####</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><h2 id="4-2替换二进制库"><a href="#4-2替换二进制库" class="headerlink" title="4.2替换二进制库"></a>4.2替换二进制库</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">gacrnd@gacrnd:~/<span class="title">songlingjie</span>/<span class="title">AndroidP</span>/<span class="title">AOSP</span>$ <span class="title">cp</span> <span class="title">out</span>/<span class="title">host</span>/<span class="title">linux</span>-<span class="title">x86</span>/<span class="title">bin</span>/<span class="title">header</span>-<span class="title">abi</span>-<span class="title">d</span></span></span><br><span class="line"><span class="function"><span class="title">header</span>-<span class="title">abi</span>-<span class="title">diff</span>    <span class="title">header</span>-<span class="title">abi</span>-<span class="title">dumper</span>  </span></span><br><span class="line"><span class="function"><span class="title">gacrnd</span>@<span class="title">gacrnd</span>:~/<span class="title">songlingjie</span>/<span class="title">AndroidP</span>/<span class="title">AOSP</span>$ <span class="title">cp</span> <span class="title">out</span>/<span class="title">host</span>/<span class="title">linux</span>-<span class="title">x86</span>/<span class="title">bin</span>/<span class="title">header</span>-<span class="title">abi</span>-<span class="title">dumper</span> <span class="title">prebuilts</span>/<span class="title">clang</span>-<span class="title">tools</span>/<span class="title">linux</span>-<span class="title">x86</span>/<span class="title">bin</span>/<span class="title">header</span>-<span class="title">abi</span>-<span class="title">dumper</span> </span></span><br></pre></td></tr></table></figure><h2 id="4-3重新编译liblog"><a href="#4-3重新编译liblog" class="headerlink" title="4.3重新编译liblog"></a>4.3重新编译liblog</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">gacrnd@gacrnd:~/<span class="title">songlingjie</span>/<span class="title">AndroidP</span>/<span class="title">AOSP</span>$ <span class="title">make</span> -<span class="title">j32</span> <span class="title">liblog</span></span></span><br><span class="line"><span class="function">============================================</span></span><br><span class="line"><span class="function"><span class="title">PLATFORM_VERSION_CODENAME</span>=<span class="title">REL</span></span></span><br><span class="line"><span class="function"><span class="title">PLATFORM_VERSION</span>=9</span></span><br><span class="line"><span class="function"><span class="title">TARGET_PRODUCT</span>=<span class="title">aosp_car_x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_BUILD_VARIANT</span>=<span class="title">userdebug</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_BUILD_TYPE</span>=<span class="title">release</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_ARCH_VARIANT</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_2ND_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_2ND_ARCH_VARIANT</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_2ND_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_OS</span>=<span class="title">linux</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_OS_EXTRA</span>=<span class="title">Linux</span>-5.4.0-53-<span class="title">generic</span>-<span class="title">x86_64</span>-<span class="title">Ubuntu</span>-18.04.4-<span class="title">LTS</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_OS</span>=<span class="title">windows</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_2ND_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_BUILD_TYPE</span>=<span class="title">release</span></span></span><br><span class="line"><span class="function"><span class="title">BUILD_ID</span>=<span class="title">PQ2A</span>.190205.003</span></span><br><span class="line"><span class="function"><span class="title">OUT_DIR</span>=<span class="title">out</span></span></span><br><span class="line"><span class="function">============================================</span></span><br><span class="line"><span class="function"><span class="title">ninja</span>: <span class="title">no</span> <span class="title">work</span> <span class="title">to</span> <span class="title">do</span>.</span></span><br><span class="line"><span class="function">[1/1] <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">bootstrap</span>/<span class="title">bin</span>/<span class="title">soong_build</span> <span class="title">out</span>/<span class="title">soong</span>/<span class="title">build.ninja</span></span></span><br><span class="line"><span class="function"><span class="title">No</span> <span class="title">need</span> <span class="title">to</span> <span class="title">regenerate</span> <span class="title">ninja</span> <span class="title">file</span></span></span><br><span class="line"><span class="function"><span class="title">No</span> <span class="title">need</span> <span class="title">to</span> <span class="title">regenerate</span> <span class="title">ninja</span> <span class="title">file</span></span></span><br><span class="line"><span class="function">[100% 1506/1506] <span class="title">Install</span>: <span class="title">out</span>/<span class="title">target</span>/<span class="title">product</span>/<span class="title">generic_x86_64</span>/<span class="title">system</span>/<span class="title">lib</span>/<span class="title">liblog.so</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">#### <span class="title">build</span> <span class="title">completed</span> <span class="title">successfully</span> (02:18 (<span class="title">mm:ss</span>)) ####</span></span><br></pre></td></tr></table></figure><h2 id="4-4编译systemimage"><a href="#4-4编译systemimage" class="headerlink" title="4.4编译systemimage"></a>4.4编译systemimage</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">gacrnd@gacrnd:~/<span class="title">songlingjie</span>/<span class="title">AndroidP</span>/<span class="title">AOSP</span>$ <span class="title">make</span> <span class="title">systemimage</span></span></span><br><span class="line"><span class="function">........</span></span><br><span class="line"><span class="function">........</span></span><br><span class="line"><span class="function"><span class="title">REALLY</span> <span class="title">setting</span> <span class="title">name</span>!</span></span><br><span class="line"><span class="function"><span class="title">Warning</span>: <span class="title">The</span> <span class="title">kernel</span> <span class="title">is</span> <span class="title">still</span> <span class="title">using</span> <span class="title">the</span> <span class="title">old</span> <span class="title">partition</span> <span class="title">table</span>.</span></span><br><span class="line"><span class="function"><span class="title">The</span> <span class="title">new</span> <span class="title">table</span> <span class="title">will</span> <span class="title">be</span> <span class="title">used</span> <span class="title">at</span> <span class="title">the</span> <span class="title">next</span> <span class="title">reboot</span>.</span></span><br><span class="line"><span class="function"><span class="title">The</span> <span class="title">operation</span> <span class="title">has</span> <span class="title">completed</span> <span class="title">successfully</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">#### <span class="title">build</span> <span class="title">completed</span> <span class="title">successfully</span> (43:55 (<span class="title">mm:ss</span>)) ####</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><h1 id="查看socket数据"><a href="#查看socket数据" class="headerlink" title="查看socket数据"></a>查看socket数据</h1><p>strace -f -p 进程号（socket所在的进程） -o path(log保存的文件路径)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;liblog中新增一个buffer-id&quot;&gt;&lt;a href=&quot;#liblog中新增一个buffer-id&quot; class=&quot;headerlink&quot; title=&quot;liblog中新增一个buffer id&quot;&gt;&lt;/a&gt;liblog中新增一个buffer id&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="log" scheme="http://example.com/categories/log/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>shell命令-Sed</title>
    <link href="http://example.com/2020/12/15/shell%E5%91%BD%E4%BB%A4-Sed/"/>
    <id>http://example.com/2020/12/15/shell%E5%91%BD%E4%BB%A4-Sed/</id>
    <published>2020-12-15T07:26:43.000Z</published>
    <updated>2020-12-15T07:26:43.513Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>AMS-Intent</title>
    <link href="http://example.com/2020/12/15/AMS-Intent/"/>
    <id>http://example.com/2020/12/15/AMS-Intent/</id>
    <published>2020-12-15T01:42:11.000Z</published>
    <updated>2020-12-16T05:24:36.157Z</updated>
    
    <content type="html"><![CDATA[<p>参考博客</p><p><a href="https://blog.csdn.net/iispring/article/details/48417779">https://blog.csdn.net/iispring/article/details/48417779</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考博客&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/iispring/article/details/48417779&quot;&gt;https://blog.csdn.net/iispring/article/details/48417779&lt;/a&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AMS-ProcessRecord</title>
    <link href="http://example.com/2020/12/14/AMS-ProcessRecord/"/>
    <id>http://example.com/2020/12/14/AMS-ProcessRecord/</id>
    <published>2020-12-14T10:38:24.000Z</published>
    <updated>2020-12-14T12:00:55.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-ProcessRecord数据结构"><a href="#1-ProcessRecord数据结构" class="headerlink" title="1.ProcessRecord数据结构"></a>1.ProcessRecord数据结构</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Full information about a particular process that</span></span><br><span class="line"><span class="comment"> * is currently running.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessRecord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = TAG_WITH_CLASS_NAME ? <span class="string">&quot;ProcessRecord&quot;</span> : TAG_AM;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ActivityManagerService mService; <span class="comment">// where we came from</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BatteryStatsImpl mBatteryStats; <span class="comment">// where to collect runtime statistics</span></span><br><span class="line">    <span class="keyword">final</span> ApplicationInfo info; <span class="comment">// all about the first app in the process</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isolated;     <span class="comment">// true if this is a special isolated process</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> uid;              <span class="comment">// uid of process; may be different from &#x27;info&#x27; if isolated</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> userId;           <span class="comment">// user of process.</span></span><br><span class="line">    <span class="keyword">final</span> String processName;   <span class="comment">// name of the process</span></span><br><span class="line">    <span class="comment">// List of packages running in the process</span></span><br><span class="line">    <span class="keyword">final</span> ArrayMap&lt;String, ProcessStats.ProcessStateHolder&gt; pkgList = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">final</span> ProcessList.ProcStateMemTracker procStateMemTracker</span><br><span class="line">            = <span class="keyword">new</span> ProcessList.ProcStateMemTracker();</span><br><span class="line">    UidRecord uidRecord;        <span class="comment">// overall state of process&#x27;s uid.</span></span><br><span class="line">    ArraySet&lt;String&gt; pkgDeps;   <span class="comment">// additional packages we have a dependency on</span></span><br><span class="line">    IApplicationThread thread;  <span class="comment">// the actual proc...  may be null only if</span></span><br><span class="line">                                <span class="comment">// &#x27;persistent&#x27; is true (in which case we</span></span><br><span class="line">                                <span class="comment">// are in the process of launching the app)</span></span><br><span class="line">    ProcessState baseProcessTracker;</span><br><span class="line">    BatteryStatsImpl.Uid.Proc curProcBatteryStats;</span><br><span class="line">    <span class="keyword">int</span> pid;                    <span class="comment">// The process of this application; 0 if none</span></span><br><span class="line">    String procStatFile;        <span class="comment">// path to /proc/&lt;pid&gt;/stat</span></span><br><span class="line">    <span class="keyword">int</span>[] gids;                 <span class="comment">// The gids this process was launched with</span></span><br><span class="line">    String requiredAbi;         <span class="comment">// The ABI this process was launched with</span></span><br><span class="line">    String instructionSet;      <span class="comment">// The instruction set this process was launched with</span></span><br><span class="line">    <span class="keyword">boolean</span> starting;           <span class="comment">// True if the process is being started</span></span><br><span class="line">    <span class="keyword">long</span> lastActivityTime;      <span class="comment">// For managing the LRU list</span></span><br><span class="line">    <span class="keyword">long</span> lastPssTime;           <span class="comment">// Last time we retrieved PSS data</span></span><br><span class="line">    <span class="keyword">long</span> nextPssTime;           <span class="comment">// Next time we want to request PSS data</span></span><br><span class="line">    <span class="keyword">long</span> lastStateTime;         <span class="comment">// Last time setProcState changed</span></span><br><span class="line">    <span class="keyword">long</span> initialIdlePss;        <span class="comment">// Initial memory pss of process for idle maintenance.</span></span><br><span class="line">    <span class="keyword">long</span> lastPss;               <span class="comment">// Last computed memory pss.</span></span><br><span class="line">    <span class="keyword">long</span> lastSwapPss;           <span class="comment">// Last computed SwapPss.</span></span><br><span class="line">    <span class="keyword">long</span> lastCachedPss;         <span class="comment">// Last computed pss when in cached state.</span></span><br><span class="line">    <span class="keyword">long</span> lastCachedSwapPss;     <span class="comment">// Last computed SwapPss when in cached state.</span></span><br><span class="line">    <span class="keyword">int</span> maxAdj;                 <span class="comment">// Maximum OOM adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> curRawAdj;              <span class="comment">// Current OOM unlimited adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> setRawAdj;              <span class="comment">// Last set OOM unlimited adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> curAdj;                 <span class="comment">// Current OOM adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> setAdj;                 <span class="comment">// Last set OOM adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> verifiedAdj;            <span class="comment">// The last adjustment that was verified as actually being set</span></span><br><span class="line">    <span class="keyword">int</span> curSchedGroup;          <span class="comment">// Currently desired scheduling class</span></span><br><span class="line">    <span class="keyword">int</span> setSchedGroup;          <span class="comment">// Last set to background scheduling class</span></span><br><span class="line">    <span class="keyword">int</span> vrThreadTid;            <span class="comment">// Thread currently set for VR scheduling</span></span><br><span class="line">    <span class="keyword">int</span> trimMemoryLevel;        <span class="comment">// Last selected memory trimming level</span></span><br><span class="line">    <span class="keyword">int</span> curProcState = PROCESS_STATE_NONEXISTENT; <span class="comment">// Currently computed process state</span></span><br><span class="line">    <span class="keyword">int</span> repProcState = PROCESS_STATE_NONEXISTENT; <span class="comment">// Last reported process state</span></span><br><span class="line">    <span class="keyword">int</span> setProcState = PROCESS_STATE_NONEXISTENT; <span class="comment">// Last set process state in process tracker</span></span><br><span class="line">    <span class="keyword">int</span> pssProcState = PROCESS_STATE_NONEXISTENT; <span class="comment">// Currently requesting pss for</span></span><br><span class="line">    <span class="keyword">int</span> pssStatType;            <span class="comment">// The type of stat collection that we are currently requesting</span></span><br><span class="line">    <span class="keyword">int</span> savedPriority;          <span class="comment">// Previous priority value if we&#x27;re switching to non-SCHED_OTHER</span></span><br><span class="line">    <span class="keyword">int</span> renderThreadTid;        <span class="comment">// TID for RenderThread</span></span><br><span class="line">    <span class="keyword">boolean</span> serviceb;           <span class="comment">// Process currently is on the service B list</span></span><br><span class="line">    <span class="keyword">boolean</span> serviceHighRam;     <span class="comment">// We are forcing to service B list due to its RAM use</span></span><br><span class="line">    <span class="keyword">boolean</span> notCachedSinceIdle; <span class="comment">// Has this process not been in a cached state since last idle?</span></span><br><span class="line">    <span class="keyword">boolean</span> hasClientActivities;  <span class="comment">// Are there any client services with activities?</span></span><br><span class="line">    <span class="keyword">boolean</span> hasStartedServices; <span class="comment">// Are there any started services running in this process?</span></span><br><span class="line">    <span class="keyword">boolean</span> foregroundServices; <span class="comment">// Running any services that are foreground?</span></span><br><span class="line">    <span class="keyword">boolean</span> foregroundActivities; <span class="comment">// Running any activities that are foreground?</span></span><br><span class="line">    <span class="keyword">boolean</span> repForegroundActivities; <span class="comment">// Last reported foreground activities.</span></span><br><span class="line">    <span class="keyword">boolean</span> systemNoUi;         <span class="comment">// This is a system process, but not currently showing UI.</span></span><br><span class="line">    <span class="keyword">boolean</span> hasShownUi;         <span class="comment">// Has UI been shown in this process since it was started?</span></span><br><span class="line">    <span class="keyword">boolean</span> hasTopUi;           <span class="comment">// Is this process currently showing a non-activity UI that the user</span></span><br><span class="line">                                <span class="comment">// is interacting with? E.g. The status bar when it is expanded, but</span></span><br><span class="line">                                <span class="comment">// not when it is minimized. When true the</span></span><br><span class="line">                                <span class="comment">// process will be set to use the ProcessList#SCHED_GROUP_TOP_APP</span></span><br><span class="line">                                <span class="comment">// scheduling group to boost performance.</span></span><br><span class="line">    <span class="keyword">boolean</span> hasOverlayUi;       <span class="comment">// Is the process currently showing a non-activity UI that</span></span><br><span class="line">                                <span class="comment">// overlays on-top of activity UIs on screen. E.g. display a window</span></span><br><span class="line">                                <span class="comment">// of type</span></span><br><span class="line">                                <span class="comment">// android.view.WindowManager.LayoutParams#TYPE_APPLICATION_OVERLAY</span></span><br><span class="line">                                <span class="comment">// When true the process will oom adj score will be set to</span></span><br><span class="line">                                <span class="comment">// ProcessList#PERCEPTIBLE_APP_ADJ at minimum to reduce the chance</span></span><br><span class="line">                                <span class="comment">// of the process getting killed.</span></span><br><span class="line">    <span class="keyword">boolean</span> runningRemoteAnimation; <span class="comment">// Is the process currently running a RemoteAnimation? When true</span></span><br><span class="line">                                <span class="comment">// the process will be set to use the</span></span><br><span class="line">                                <span class="comment">// ProcessList#SCHED_GROUP_TOP_APP scheduling group to boost</span></span><br><span class="line">                                <span class="comment">// performance, as well as oom adj score will be set to</span></span><br><span class="line">                                <span class="comment">// ProcessList#VISIBLE_APP_ADJ at minimum to reduce the chance</span></span><br><span class="line">                                <span class="comment">// of the process getting killed.</span></span><br><span class="line">    <span class="keyword">boolean</span> pendingUiClean;     <span class="comment">// Want to clean up resources from showing UI?</span></span><br><span class="line">    <span class="keyword">boolean</span> hasAboveClient;     <span class="comment">// Bound using BIND_ABOVE_CLIENT, so want to be lower</span></span><br><span class="line">    <span class="keyword">boolean</span> treatLikeActivity;  <span class="comment">// Bound using BIND_TREAT_LIKE_ACTIVITY</span></span><br><span class="line">    <span class="keyword">boolean</span> bad;                <span class="comment">// True if disabled in the bad process list</span></span><br><span class="line">    <span class="keyword">boolean</span> killedByAm;         <span class="comment">// True when proc has been killed by activity manager, not for RAM</span></span><br><span class="line">    <span class="keyword">boolean</span> killed;             <span class="comment">// True once we know the process has been killed</span></span><br><span class="line">    <span class="keyword">boolean</span> procStateChanged;   <span class="comment">// Keep track of whether we changed &#x27;setAdj&#x27;.</span></span><br><span class="line">    <span class="keyword">boolean</span> reportedInteraction;<span class="comment">// Whether we have told usage stats about it being an interaction</span></span><br><span class="line">    <span class="keyword">boolean</span> unlocked;           <span class="comment">// True when proc was started in user unlocked state</span></span><br><span class="line">    <span class="keyword">long</span> interactionEventTime;  <span class="comment">// The time we sent the last interaction event</span></span><br><span class="line">    <span class="keyword">long</span> fgInteractionTime;     <span class="comment">// When we became foreground for interaction purposes</span></span><br><span class="line">    String waitingToKill;       <span class="comment">// Process is waiting to be killed when in the bg, and reason</span></span><br><span class="line">    Object forcingToImportant;  <span class="comment">// Token that is forcing this process to be important</span></span><br><span class="line">    <span class="keyword">int</span> adjSeq;                 <span class="comment">// Sequence id for identifying oom_adj assignment cycles</span></span><br><span class="line">    <span class="keyword">int</span> completedAdjSeq;        <span class="comment">// Sequence id for identifying oom_adj assignment cycles</span></span><br><span class="line">    <span class="keyword">boolean</span> containsCycle;      <span class="comment">// Whether this app has encountered a cycle in the most recent update</span></span><br><span class="line">    <span class="keyword">int</span> lruSeq;                 <span class="comment">// Sequence id for identifying LRU update cycles</span></span><br><span class="line">    CompatibilityInfo compat;   <span class="comment">// last used compatibility mode</span></span><br><span class="line">    IBinder.DeathRecipient deathRecipient; <span class="comment">// Who is watching for the death.</span></span><br><span class="line">    ActiveInstrumentation instr;<span class="comment">// Set to currently active instrumentation running in process</span></span><br><span class="line">    <span class="keyword">boolean</span> usingWrapper;       <span class="comment">// Set to true when process was launched with a wrapper attached</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;BroadcastRecord&gt; curReceivers = <span class="keyword">new</span> ArraySet&lt;BroadcastRecord&gt;();<span class="comment">// receivers currently running in the app</span></span><br><span class="line">    <span class="keyword">long</span> whenUnimportant;       <span class="comment">// When (uptime) the process last became unimportant</span></span><br><span class="line">    <span class="keyword">long</span> lastCpuTime;           <span class="comment">// How long proc has run CPU at last check</span></span><br><span class="line">    <span class="keyword">long</span> curCpuTime;            <span class="comment">// How long proc has run CPU most recently</span></span><br><span class="line">    <span class="keyword">long</span> lastRequestedGc;       <span class="comment">// When we last asked the app to do a gc</span></span><br><span class="line">    <span class="keyword">long</span> lastLowMemory;         <span class="comment">// When we last told the app that memory is low</span></span><br><span class="line">    <span class="keyword">long</span> lastProviderTime;      <span class="comment">// The last time someone else was using a provider in this process.</span></span><br><span class="line">    <span class="keyword">long</span> lastTopTime;           <span class="comment">// The last time the process was in the TOP state or greater.</span></span><br><span class="line">    <span class="keyword">boolean</span> reportLowMemory;    <span class="comment">// Set to true when waiting to report low mem</span></span><br><span class="line">    <span class="keyword">boolean</span> empty;              <span class="comment">// Is this an empty background process?</span></span><br><span class="line">    <span class="keyword">boolean</span> cached;             <span class="comment">// Is this a cached process?</span></span><br><span class="line">    String adjType;             <span class="comment">// Debugging: primary thing impacting oom_adj.</span></span><br><span class="line">    <span class="keyword">int</span> adjTypeCode;            <span class="comment">// Debugging: adj code to report to app.</span></span><br><span class="line">    Object adjSource;           <span class="comment">// Debugging: option dependent object.</span></span><br><span class="line">    <span class="keyword">int</span> adjSourceProcState;     <span class="comment">// Debugging: proc state of adjSource&#x27;s process.</span></span><br><span class="line">    Object adjTarget;           <span class="comment">// Debugging: target component impacting oom_adj.</span></span><br><span class="line">    Runnable crashHandler;      <span class="comment">// Optional local handler to be invoked in the process crash.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// all activities running in the process</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;ActivityRecord&gt; activities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// any tasks this process had run root activities in</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;TaskRecord&gt; recentTasks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// all ServiceRecord running in this process</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;ServiceRecord&gt; services = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    <span class="comment">// services that are currently executing code (need to remain foreground).</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;ServiceRecord&gt; executingServices = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    <span class="comment">// All ConnectionRecord this process holds</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;ConnectionRecord&gt; connections = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    <span class="comment">// all IIntentReceivers that are registered from this process.</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;ReceiverList&gt; receivers = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    <span class="comment">// class (String) -&gt; ContentProviderRecord</span></span><br><span class="line">    <span class="keyword">final</span> ArrayMap&lt;String, ContentProviderRecord&gt; pubProviders = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// All ContentProviderRecord process is using</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;ContentProviderConnection&gt; conProviders = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    String isolatedEntryPoint;  <span class="comment">// Class to run on start if this is a special isolated process.</span></span><br><span class="line">    String[] isolatedEntryPointArgs; <span class="comment">// Arguments to pass to isolatedEntryPoint&#x27;s main().</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> execServicesFg;     <span class="comment">// do we need to be executing services in the foreground?</span></span><br><span class="line">    <span class="keyword">boolean</span> persistent;         <span class="comment">// always keep this application running?</span></span><br><span class="line">    <span class="keyword">boolean</span> crashing;           <span class="comment">// are we in the process of crashing?</span></span><br><span class="line">    Dialog crashDialog;         <span class="comment">// dialog being displayed due to crash.</span></span><br><span class="line">    <span class="keyword">boolean</span> forceCrashReport;   <span class="comment">// suppress normal auto-dismiss of crash dialog &amp; report UI?</span></span><br><span class="line">    <span class="keyword">boolean</span> notResponding;      <span class="comment">// does the app have a not responding dialog?</span></span><br><span class="line">    Dialog anrDialog;           <span class="comment">// dialog being displayed due to app not resp.</span></span><br><span class="line">    <span class="keyword">boolean</span> removed;            <span class="comment">// has app package been removed from device?</span></span><br><span class="line">    <span class="keyword">boolean</span> debugging;          <span class="comment">// was app launched for debugging?</span></span><br><span class="line">    <span class="keyword">boolean</span> waitedForDebugger;  <span class="comment">// has process show wait for debugger dialog?</span></span><br><span class="line">    Dialog waitDialog;          <span class="comment">// current wait for debugger dialog</span></span><br><span class="line"></span><br><span class="line">    String shortStringName;     <span class="comment">// caching of toShortString() result.</span></span><br><span class="line">    String stringName;          <span class="comment">// caching of toString() result.</span></span><br><span class="line">    <span class="keyword">boolean</span> pendingStart;       <span class="comment">// Process start is pending.</span></span><br><span class="line">    <span class="keyword">long</span> startSeq;              <span class="comment">// Seq no. indicating the latest process start associated with</span></span><br><span class="line">                                <span class="comment">// this process record.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// These reports are generated &amp; stored when an app gets into an error condition.</span></span><br><span class="line">    <span class="comment">// They will be &quot;null&quot; when all is OK.</span></span><br><span class="line">    ActivityManager.ProcessErrorStateInfo crashingReport;</span><br><span class="line">    ActivityManager.ProcessErrorStateInfo notRespondingReport;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Who will be notified of the error. This is usually an activity in the</span></span><br><span class="line">    <span class="comment">// app that installed the package.</span></span><br><span class="line">    ComponentName errorReportReceiver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process is currently hosting a backup agent for backup or restore</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> inFullBackup;</span><br><span class="line">    <span class="comment">// App is allowed to manage whitelists such as temporary Power Save mode whitelist.</span></span><br><span class="line">    <span class="keyword">boolean</span> whitelistManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Params used in starting this process.</span></span><br><span class="line">    String hostingType;</span><br><span class="line">    String hostingNameStr;</span><br><span class="line">    String seInfo;</span><br><span class="line">    <span class="keyword">long</span> startTime;</span><br><span class="line">    <span class="comment">// This will be same as &#123;@link #uid&#125; usually except for some apps used during factory testing.</span></span><br><span class="line">    <span class="keyword">int</span> startUid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-1第一类数据：描述身份的数据"><a href="#1-1第一类数据：描述身份的数据" class="headerlink" title="1.1第一类数据：描述身份的数据"></a>1.1第一类数据：描述身份的数据</h2><ul><li><strong>ApplicationInfo info</strong>：AndroidManifest.xml中定义的Application信息</li><li><strong>boolean isolated</strong>：是不是isolated进程</li><li><strong>int uid</strong>：进程uid</li><li><strong>int userId</strong>：这个是android做的多用户系统id，就像windows可以登录很多用户一样，android也希望可以实现类似的多用户</li><li><strong>String processName</strong>：进程名字，默认情况下是包名</li><li><strong>UidRecord uidRecord</strong>：记录已经使用的uid</li><li><strong>IApplicationThread thread</strong>：这个很重要，它是ApplicationThread的客户端，AMS就是通过这个对象给apk进程发送异步消息的（管理四大组件的消息），所以只有这个对象不为空的情况下，才代表apk进程可是使用了</li><li><strong>int pid</strong>：进程的pid</li><li><strong>String procStatFile</strong>：proc目录下每一个进程都有一个以pid命名的目录文件，这个目录下记载着进程的详细信息，这个目录及目录下的文件是内核创建的， proc是内核文件系统，proc就是process的缩写，涉及的目的就是导出进程内核信息</li><li><strong>int[] gids</strong>：gid组</li><li><strong>CompatibilityInfo compat</strong> : 兼容性信息</li><li><strong>String requiredAbi</strong> : abi信息</li><li><strong>String instructionSet</strong> : 指令集信息</li></ul><h2 id="1-2第二类数据：描述进程中组件的数据"><a href="#1-2第二类数据：描述进程中组件的数据" class="headerlink" title="1.2第二类数据：描述进程中组件的数据"></a>1.2第二类数据：描述进程中组件的数据</h2><ul><li><strong>ArrayMap pkgList</strong>：进程中运行的包</li><li><strong>ArraySet pkgDeps</strong>：进程运行依赖的包</li><li><strong>ArrayList activities</strong>：进程启动的所有的activity组件记录表</li><li><strong>ArraySet services</strong>：进程启动的所有的service组件记录表</li><li><strong>ArraySet executingServices</strong>：正在运行（executing）是怎么定义的？首先需要明确的是系统是怎么控制组件的？发送消息给apk进程，apk进程处理消息，上报消息完成，这被定义为一个完整的执行过程，因此正在执行（executing）被定义为发送消息到上报完成这段时间</li><li><strong>ArraySet connections</strong>：绑定当前进程中service的客户端记录表</li><li><strong>ArraySet receivers</strong>：广播接收器的记录表</li><li><strong>ArrayMap pubProviders</strong>：pub是publish（发布）的意思，ContentProvider需要安装然后把自己发布到系统（AMS）中后，才能使用，安装指的是apk进程加载ContentProvider子类、初始化、创建数据库等过程，发布是将ContentProvider的binder客户端注册到AMS中</li><li><strong>ArrayList conProviders</strong>：使用ContentProvider的客户端记录表</li><li><strong>final ArraySet curReceivers</strong>：当前进程正在执行的广播<br>在本节中以上组件信息只是做一个简单的描述，以后单独分析组件管理的时候在详细介绍</li></ul><h2 id="1-3第三类数据：描述进程状态的数据"><a href="#1-3第三类数据：描述进程状态的数据" class="headerlink" title="1.3第三类数据：描述进程状态的数据"></a>1.3第三类数据：描述进程状态的数据</h2><ul><li><strong>int maxAdj</strong>：进程的adj上限（adjustment）</li><li><strong>int curRawAdj</strong>：当前正在计算的adj，这个值有可能大于maxAdj</li><li><strong>int setRawAdj</strong>：上次计算的curRawAdj设置到lowmemorykiller系统后的adj</li><li><strong>int curAdj</strong>：当前正在计算的adj，这是curRawAdj被maxAdj削平的值</li><li><strong>int setAdj</strong>：上次计算的curAdj设置到lowmemorykiller系统后的adj</li><li><strong>int verifiedAdj</strong>：setAdj校验后的值</li><li><strong>int curSchedGroup</strong>：正在计算的调度组</li><li><strong>int setSchedGroup</strong>：保存上次计算的调度组</li><li><strong>int curProcState</strong>：正在计算的进程状态</li><li><strong>int repProcState</strong>：发送给apk进程的状态</li><li><strong>int setProcState</strong>：保存上次计算的进程状态</li><li><strong>int pssProcState</strong>：pss进程状态</li><li><strong>ProcessState baseProcessTracker</strong>：进程状态监测器</li><li><strong>int adjSeq</strong>：计算adj的序列数</li><li><strong>int lruSeq</strong>：lru序列数</li><li><strong>IBinder forcingToForeground</strong>:强制将进程的状态设置为前台运行的IBinder，IBinder代表的是组件的ID，这个是整个android系统唯一</li></ul><h2 id="1-4第四类数据：和pss相关的数据"><a href="#1-4第四类数据：和pss相关的数据" class="headerlink" title="1.4第四类数据：和pss相关的数据"></a>1.4第四类数据：和pss相关的数据</h2><p>我们先来普及一下一些名词：</p><blockquote><p>VSS- Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）<br>RSS- Resident Set Size 实际使用物理内存（包含共享库占用的内存）<br>PSS- Proportional Set Size 实际使用的物理内存（比例分配共享库占用的内存）<br>USS- Unique Set Size 进程独自占用的物理内存（不包含共享库占用的内存）<br>一般来说内存占用大小有如下规律：VSS &gt;= RSS &gt;= PSS &gt;= USS</p></blockquote><ul><li><strong>long initialIdlePss</strong>：初始化pss</li><li><strong>long lastPss</strong>：上次pss</li><li><strong>long lastSwapPss</strong>：上次SwapPss数据</li><li><strong>long lastCachedPss</strong>：上次CachedPss数据</li><li><strong>long lastCachedSwapPss</strong>：上次CachedSwapPss数据</li></ul><h2 id="1-5第五类数据：和时间相关的数据"><a href="#1-5第五类数据：和时间相关的数据" class="headerlink" title="1.5第五类数据：和时间相关的数据"></a>1.5第五类数据：和时间相关的数据</h2><ul><li>long lastActivityTime：上次使用时间</li><li>long lastPssTime：上次计算pss的时间</li><li>long nextPssTime：下次计算pss的时间</li><li>long lastStateTime：上次设置进程状态的时间</li><li>long lastWakeTime：持有wakelock的时长</li><li>long lastCpuTime：上次计算占用cpu的时长</li><li>long curCpuTime：当前最新占用cpu的时长</li><li>long lastRequestedGc：上次发送gc命令给apk进程的时间</li><li>long lastLowMemory：上次发送低内存消息给apk进程的时间</li><li>long lastProviderTime：上次进程中ContentProvider被使用的时间</li><li>long interactionEventTime：上次发送交互时间时间</li><li>long fgInteractionTime：变成前台的时间</li></ul><h2 id="1-6第六类数据：crash和anr相关的数据"><a href="#1-6第六类数据：crash和anr相关的数据" class="headerlink" title="1.6第六类数据：crash和anr相关的数据"></a>1.6第六类数据：crash和anr相关的数据</h2><ul><li>IBinder.DeathRecipient deathRecipient：apk进程退出运行的话，会触发这个对象的binderDied()方法，来回收系统资源</li><li>boolean crashing：进程已经crash</li><li>Dialog crashDialog：crash对话框</li><li>boolean forceCrashReport：强制crash对话框显示</li><li>boolean notResponding：是否处于anr状态</li><li>Dialog anrDialog：anr显示对话框</li><li>Runnable crashHandler：crash回调</li><li>ActivityManager.ProcessErrorStateInfo crashingReport:crash报告的进程状态</li><li>ActivityManager.ProcessErrorStateInfo notRespondingReport:anr报告的进程状态</li><li>String waitingToKill:后台进程被kill原因</li><li>ComponentName errorReportReceiver:接收error信息的组件</li></ul><h2 id="1-7第七类数据：和instrumentation相关的数据"><a href="#1-7第七类数据：和instrumentation相关的数据" class="headerlink" title="1.7第七类数据：和instrumentation相关的数据"></a>1.7第七类数据：和instrumentation相关的数据</h2><blockquote><p>instrumentation 也可以说是apk的一个组件，如果我们提供的话，系统会默认使用Instrumentation.java类，按照我们一般的理解，UI 线程控制activity的生命周期，是是直接调用Activity类的方法，时间是这样子的，UI线程调用的是instrumentation的方法，由它在调用Activity涉及生命周期的方法，所有如果我们覆写了instrumentation的这些方法，就可以了解所有的Activity的生命周期了</p></blockquote><ul><li>ComponentName instrumentationClass：AndroidManifest.xml中定义的instrumentation信息</li><li>ApplicationInfo instrumentationInfo：instrumentation应用信息</li><li>String instrumentationProfileFile：instrumentation配置文件</li><li>IInstrumentationWatcher instrumentationWatcher：instrumentation监测器</li><li>IUiAutomationConnection instrumentationUiAutomationConnection：UiAutomation连接器</li><li>ComponentName instrumentationResultClass：返回结果组件</li></ul><h2 id="1-8第八类数据：电源信息和调试信息"><a href="#1-8第八类数据：电源信息和调试信息" class="headerlink" title="1.8第八类数据：电源信息和调试信息"></a>1.8第八类数据：电源信息和调试信息</h2><ul><li>BatteryStatsImpl mBatteryStats:电量信息</li><li>BatteryStatsImpl.Uid.Proc curProcBatteryStats：当前进程电量信息</li><li>boolean debugging:处于调试中</li><li>boolean waitedForDebugger:等待调试</li><li>Dialog waitDialog:等待对话框</li><li>String adjType:adj类型（或者说标示）</li><li>int adjTypeCode:adj类型码（也是一种标示）</li><li>Object adjSource:改变adj的组件记录表</li><li>int adjSourceProcState:影响adj的进程状态</li><li>Object adjTarget：改变adj的组件</li><li>String shortStringName：进程记录表的字符串显示</li><li>String stringName：进程记录表的字符串显示</li></ul><h2 id="1-9第九类数据：最后我们来看一下31个boolean值"><a href="#1-9第九类数据：最后我们来看一下31个boolean值" class="headerlink" title="1.9第九类数据：最后我们来看一下31个boolean值"></a>1.9第九类数据：最后我们来看一下31个boolean值</h2><h3 id="1-9-1进程生命周期相关的"><a href="#1-9-1进程生命周期相关的" class="headerlink" title="1.9.1进程生命周期相关的"></a>1.9.1进程生命周期相关的</h3><ul><li>boolean starting:进程正在启动</li><li>boolean removed:进程系统资源已经清理</li><li>boolean killedByAm:进程被AMS主动kill掉，非RAM kill</li><li>boolean killed:进程被kill掉了</li><li>boolean persistent:常驻内存进程</li></ul><h3 id="1-9-2组件状态影响进程行为的"><a href="#1-9-2组件状态影响进程行为的" class="headerlink" title="1.9.2组件状态影响进程行为的"></a>1.9.2组件状态影响进程行为的</h3><ul><li>boolean empty:空进程，不含有任何组件的进程</li><li>boolean cached:缓存进程</li><li>boolean bad:60s内连续crash两次的进程被定义为bad进程</li><li>boolean hasClientActivities:进程有Activity绑定其他Service</li><li>boolean hasStartedServices:进程中包含启动了的Service</li><li>boolean foregroundServices:进程中包含前台运行的Service</li><li>boolean foregroundActivities:进程中包含前台运行的Activity</li><li>boolean repForegroundActivities:</li><li>boolean systemNoUi:系统进程，没有显示UI</li><li>boolean hasShownUi:重进程启动开始，是否已经显示UI</li><li>boolean pendingUiClean:</li><li>boolean hasAboveClient:进程中有组件使用BIND_ABOVE_CLIENT标志绑定其他Service</li><li>boolean treatLikeActivity:进程中有组件使用BIND_TREAT_LIKE_ACTIVITY标志绑定其他Service</li><li>boolean execServicesFg:前台执行Service</li><li>boolean setIsForeground:设置运行前台UI</li></ul><h3 id="1-9-3其他"><a href="#1-9-3其他" class="headerlink" title="1.9.3其他"></a>1.9.3其他</h3><ul><li>boolean serviceb:进程存在service B list中</li><li>boolean serviceHighRam:由于内存原因，进程强制存在service B list中</li><li>boolean notCachedSinceIdle:进程自从上次空闲，是否属于缓存进程</li><li>boolean procStateChanged:进程状态改变</li><li>boolean reportedInteraction:是否报告交互事件</li><li>boolean unlocked:解锁状态下进程启动</li><li>boolean usingWrapper:zygote是否使用了wrapper启动apk进程</li><li>boolean reportLowMemory:报告低内存</li><li>boolean inFullBackup:进程中存在backup组件在运行</li><li>boolean whitelistManager:和电源管理相关</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-ProcessRecord数据结构&quot;&gt;&lt;a href=&quot;#1-ProcessRecord数据结构&quot; class=&quot;headerlink&quot; title=&quot;1.ProcessRecord数据结构&quot;&gt;&lt;/a&gt;1.ProcessRecord数据结构&lt;/h1&gt;&lt;figu</summary>
      
    
    
    
    <category term="AMS" scheme="http://example.com/categories/AMS/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>AMS-ActivityStack</title>
    <link href="http://example.com/2020/12/14/AMS-ActivityStack/"/>
    <id>http://example.com/2020/12/14/AMS-ActivityStack/</id>
    <published>2020-12-14T07:00:38.000Z</published>
    <updated>2020-12-14T12:16:44.897Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/AMS-ActivityStack/v2-86a554a0bbecdf13fa70feaa373bf164_720w.jpg" alt="img"></p><p><img src="/images/AMS-ActivityStack/19954663-236fc1f056295414.jpg" alt="img"></p><h1 id="ActivityRecord"><a href="#ActivityRecord" class="headerlink" title="ActivityRecord"></a>ActivityRecord</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ActivityManagerService service; <span class="comment">// owner</span></span><br><span class="line"><span class="keyword">final</span> IApplicationToken.Stub appToken; <span class="comment">// window manager token</span></span><br><span class="line">AppWindowContainerController mWindowContainerController;</span><br><span class="line"><span class="keyword">final</span> ActivityInfo info; <span class="comment">// all about me</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> This is duplicated state already contained in info.applicationInfo - remove</span></span><br><span class="line">ApplicationInfo appInfo; <span class="comment">// information about activity&#x27;s app</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> launchedFromPid; <span class="comment">// always the pid who started the activity.</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> launchedFromUid; <span class="comment">// always the uid who started the activity.</span></span><br><span class="line"><span class="keyword">final</span> String launchedFromPackage; <span class="comment">// always the package who started the activity.</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> userId;          <span class="comment">// Which user is this running for?</span></span><br><span class="line"><span class="keyword">final</span> Intent intent;    <span class="comment">// the original intent that generated us</span></span><br><span class="line"><span class="keyword">final</span> ComponentName realActivity;  <span class="comment">// the intent component, or target of an alias.</span></span><br><span class="line"><span class="keyword">final</span> String shortComponentName; <span class="comment">// the short component name of the intent</span></span><br><span class="line"><span class="keyword">final</span> String resolvedType; <span class="comment">// as per original caller;</span></span><br><span class="line"><span class="keyword">final</span> String packageName; <span class="comment">// the package implementing intent&#x27;s component</span></span><br><span class="line"><span class="keyword">final</span> String processName; <span class="comment">// process where this component wants to run</span></span><br><span class="line"><span class="keyword">final</span> String taskAffinity; <span class="comment">// as per ActivityInfo.taskAffinity</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> stateNotNeeded; <span class="comment">// As per ActivityInfo.flags</span></span><br><span class="line"><span class="keyword">boolean</span> fullscreen; <span class="comment">// The activity is opaque and fills the entire space of this task.</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> See if it possible to combine this with the fullscreen field.</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> hasWallpaper; <span class="comment">// Has a wallpaper window as a background.</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> noDisplay;  <span class="comment">// activity is not displayed?</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> componentSpecified;  <span class="comment">// did caller specify an explicit component?</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> rootVoiceInteraction;  <span class="comment">// was this the root activity of a voice interaction?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> CharSequence nonLocalizedLabel;  <span class="comment">// the label information from the package mgr.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> labelRes;           <span class="comment">// the label information from the package mgr.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> icon;               <span class="comment">// resource identifier of activity&#x27;s icon.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> logo;               <span class="comment">// resource identifier of activity&#x27;s logo.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> theme;              <span class="comment">// resource identifier of activity&#x27;s theme.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> realTheme;          <span class="comment">// actual theme resource we will use, never 0.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> windowFlags;        <span class="comment">// custom window flags for preview window.</span></span><br><span class="line"><span class="keyword">private</span> TaskRecord task;        <span class="comment">// the task this is in.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> createTime = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> lastVisibleTime;   <span class="comment">// last time this activity became visible</span></span><br><span class="line"><span class="keyword">long</span> cpuTimeAtResume;   <span class="comment">// the cpu time of host process at the time of resuming activity</span></span><br><span class="line"><span class="keyword">long</span> pauseTime;         <span class="comment">// last time we started pausing the activity</span></span><br><span class="line"><span class="keyword">long</span> launchTickTime;    <span class="comment">// base time for launch tick messages</span></span><br><span class="line"><span class="comment">// Last configuration reported to the activity in the client process.</span></span><br><span class="line"><span class="keyword">private</span> MergedConfiguration mLastReportedConfiguration;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mLastReportedDisplayId;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mLastReportedMultiWindowMode;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mLastReportedPictureInPictureMode;</span><br><span class="line">CompatibilityInfo compat;<span class="comment">// last used compatibility mode</span></span><br><span class="line">ActivityRecord resultTo; <span class="comment">// who started this entry, so will get our reply</span></span><br><span class="line"><span class="keyword">final</span> String resultWho; <span class="comment">// additional identifier for use by resultTo.</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> requestCode;  <span class="comment">// code given by requester (resultTo)</span></span><br><span class="line">ArrayList&lt;ResultInfo&gt; results; <span class="comment">// pending ActivityResult objs we have received</span></span><br><span class="line">HashSet&lt;WeakReference&lt;PendingIntentRecord&gt;&gt; pendingResults; <span class="comment">// all pending intents for this act</span></span><br><span class="line">ArrayList&lt;ReferrerIntent&gt; newIntents; <span class="comment">// any pending new intents for single-top mode</span></span><br><span class="line">ActivityOptions pendingOptions; <span class="comment">// most recently given options</span></span><br><span class="line">ActivityOptions returningOptions; <span class="comment">// options that are coming back via convertToTranslucent</span></span><br><span class="line">AppTimeTracker appTimeTracker; <span class="comment">// set if we are tracking the time in this app/task/activity</span></span><br><span class="line">HashSet&lt;ConnectionRecord&gt; connections; <span class="comment">// All ConnectionRecord we hold</span></span><br><span class="line">UriPermissionOwner uriPermissions; <span class="comment">// current special URI access perms.</span></span><br><span class="line">ProcessRecord app;      <span class="comment">// if non-null, hosting application</span></span><br><span class="line"><span class="keyword">private</span> ActivityState mState;    <span class="comment">// current state we are in</span></span><br><span class="line">Bundle  icicle;         <span class="comment">// last saved activity state</span></span><br><span class="line">PersistableBundle persistentState; <span class="comment">// last persistently saved activity state</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> See if this is still needed.</span></span><br><span class="line"><span class="keyword">boolean</span> frontOfTask;    <span class="comment">// is this the root activity of its task?</span></span><br><span class="line"><span class="keyword">boolean</span> launchFailed;   <span class="comment">// set if a launched failed, to abort on 2nd try</span></span><br><span class="line"><span class="keyword">boolean</span> haveState;      <span class="comment">// have we gotten the last activity state?</span></span><br><span class="line"><span class="keyword">boolean</span> stopped;        <span class="comment">// is activity pause finished?</span></span><br><span class="line"><span class="keyword">boolean</span> delayedResume;  <span class="comment">// not yet resumed because of stopped app switches?</span></span><br><span class="line"><span class="keyword">boolean</span> finishing;      <span class="comment">// activity in pending finish list?</span></span><br><span class="line"><span class="keyword">boolean</span> deferRelaunchUntilPaused;   <span class="comment">// relaunch of activity is being deferred until pause is</span></span><br><span class="line">                                    <span class="comment">// completed</span></span><br><span class="line"><span class="keyword">boolean</span> preserveWindowOnDeferredRelaunch; <span class="comment">// activity windows are preserved on deferred relaunch</span></span><br><span class="line"><span class="keyword">int</span> configChangeFlags;  <span class="comment">// which config values have changed</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> keysPaused;     <span class="comment">// has key dispatching been paused for it?</span></span><br><span class="line"><span class="keyword">int</span> launchMode;         <span class="comment">// the launch mode activity attribute.</span></span><br><span class="line"><span class="keyword">int</span> lockTaskLaunchMode; <span class="comment">// the lockTaskMode manifest attribute, subject to override</span></span><br><span class="line"><span class="keyword">boolean</span> visible;        <span class="comment">// does this activity&#x27;s window need to be shown?</span></span><br><span class="line"><span class="keyword">boolean</span> visibleIgnoringKeyguard; <span class="comment">// is this activity visible, ignoring the fact that Keyguard</span></span><br><span class="line">                                 <span class="comment">// might hide this activity?</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mDeferHidingClient; <span class="comment">// If true we told WM to defer reporting to the client</span></span><br><span class="line">                                    <span class="comment">// process that it is hidden.</span></span><br><span class="line"><span class="keyword">boolean</span> sleeping;       <span class="comment">// have we told the activity to sleep?</span></span><br><span class="line"><span class="keyword">boolean</span> nowVisible;     <span class="comment">// is this activity&#x27;s window visible?</span></span><br><span class="line"><span class="keyword">boolean</span> drawn;          <span class="comment">// is this activity&#x27;s window drawn?</span></span><br><span class="line"><span class="keyword">boolean</span> mClientVisibilityDeferred;<span class="comment">// was the visibility change message to client deferred?</span></span><br><span class="line"><span class="keyword">boolean</span> idle;           <span class="comment">// has the activity gone idle?</span></span><br><span class="line"><span class="keyword">boolean</span> hasBeenLaunched;<span class="comment">// has this activity ever been launched?</span></span><br><span class="line"><span class="keyword">boolean</span> frozenBeforeDestroy;<span class="comment">// has been frozen but not yet destroyed.</span></span><br><span class="line"><span class="keyword">boolean</span> immersive;      <span class="comment">// immersive mode (don&#x27;t interrupt if possible)</span></span><br><span class="line"><span class="keyword">boolean</span> forceNewConfig; <span class="comment">// force re-create with new config next time</span></span><br><span class="line"><span class="keyword">boolean</span> supportsEnterPipOnTaskSwitch;  <span class="comment">// This flag is set by the system to indicate that the</span></span><br><span class="line">    <span class="comment">// activity can enter picture in picture while pausing (only when switching to another task)</span></span><br><span class="line">PictureInPictureParams pictureInPictureArgs = <span class="keyword">new</span> PictureInPictureParams.Builder().build();</span><br><span class="line">    <span class="comment">// The PiP params used when deferring the entering of picture-in-picture.</span></span><br><span class="line"><span class="keyword">int</span> launchCount;        <span class="comment">// count of launches since last state</span></span><br><span class="line"><span class="keyword">long</span> lastLaunchTime;    <span class="comment">// time of last launch of this activity</span></span><br><span class="line">ComponentName requestedVrComponent; <span class="comment">// the requested component for handling VR mode.</span></span><br><span class="line"></span><br><span class="line">String stringName;      <span class="comment">// for caching of toString().</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> inHistory;  <span class="comment">// are we in the history stack?</span></span><br><span class="line"><span class="keyword">final</span> ActivityStackSupervisor mStackSupervisor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STARTING_WINDOW_NOT_SHOWN = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STARTING_WINDOW_SHOWN = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STARTING_WINDOW_REMOVED = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> mStartingWindowState = STARTING_WINDOW_NOT_SHOWN;</span><br><span class="line"><span class="keyword">boolean</span> mTaskOverlay = <span class="keyword">false</span>; <span class="comment">// Task is always on-top of other activities in the task.</span></span><br><span class="line"></span><br><span class="line">TaskDescription taskDescription; <span class="comment">// the recents information for this activity</span></span><br><span class="line"><span class="keyword">boolean</span> mLaunchTaskBehind; <span class="comment">// this activity is actively being launched with</span></span><br></pre></td></tr></table></figure><p>ActivityRecord是AMS调度Activity的基本单位，它需要记录AndroidManifest.xml中所定义Activity的静态特征，同时， 也需要记录Activity在被调度时的状态变化,</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>ActivityInfo</td><td>从<activity>标签中解析出来的信息，包含launchMode，permission，taskAffinity等</activity></td></tr><tr><td>mActivityType</td><td>Activity的类型有三种：APPLICATION_ACTIVITY_TYPE(应用)、HOME_ACTIVITY_TYPE(桌面)、RECENTS_ACTIVITY_TYPE(最近使用)</td></tr><tr><td>ComponentName realActivity</td><td>the intent component, or target of an alias.</td></tr><tr><td>appToken</td><td>当前ActivityRecord的标识</td></tr><tr><td>packageName</td><td>当前所属的包名，这是由<activity>静态定义的</activity></td></tr><tr><td>processName</td><td>当前所属的进程名，大部分情况都是由<activity>静态定义的，但也有例外</activity></td></tr><tr><td>taskAffinity</td><td>相同taskAffinity的Activity会被分配到同一个任务栈中</td></tr><tr><td>intent</td><td>启动当前Activity的Intent</td></tr><tr><td>launchedFromUid</td><td>启动当前Activity的UID，即发起者的UID</td></tr><tr><td>userId;</td><td>Which user is this running for?</td></tr><tr><td>launchedFromPackage</td><td>启动当前Activity的包名，即发起者的包名</td></tr><tr><td>resultTo</td><td>在当前ActivityRecord看来，resultTo表示上一个启动它的ActivityRecord，当需要启动另一个ActivityRecord，会把自己作为resultTo，传递给下一个ActivityRecord</td></tr><tr><td>state</td><td>ActivityRecord所处的状态，初始值是ActivityState.INITIALIZING</td></tr><tr><td>app</td><td>ActivityRecord的宿主进程</td></tr><tr><td>task</td><td>ActivityRecord的宿主任务</td></tr><tr><td>inHistory</td><td>标识当前的ActivityRecord是否已经置入任务栈中</td></tr><tr><td>frontOfTask</td><td>标识当前的ActivityRecord是否处于任务栈的根部，即是否为进入任务栈的第一个ActivityRecord</td></tr><tr><td>newIntents</td><td>Intent数组，用于暂存还没有调度到应用进程Activity的Intent</td></tr></tbody></table><p>由于ActivityRecord是一个最基本的数据结构，所以其行为相对较少，大都是一些用于判定和更新当前ActivityRecord状态的函数：</p><table><thead><tr><th>行为</th><th>描述</th></tr></thead><tbody><tr><td>putInHistory(), takeFromHistory(), isInHistory()</td><td>基于inHistory属性，来判定和更新ActivityRecord是否在任务栈的状态值</td></tr><tr><td>isHomeActivity(), isRecentsActivity(), isApplicationActivity()</td><td>基于mActivityType属性，判定Activity的类型</td></tr><tr><td>setTask()</td><td>设置ActivityRecord的宿主任务</td></tr><tr><td>deliverNewIntentLocked()</td><td>向当前ActivityRecord继续派发Intent。在一些场景下，位于任务栈顶的ActivityRecord会继续接受新的Intent(譬如以singleTop方式启动的同一个Activity)，这时候，会触发调度Activity.onNewIntent()函数</td></tr><tr><td>addNewIntentLocked()</td><td>如果Intent没有派发到应用进程，则通过该函数往newIntents数组中添加一个元素。</td></tr></tbody></table><p>要理解ActivityRecord这个数据结构，可以从其构造函数出发，理解其属性在什么场景下会发生变化。 每次需要启动一个新的Activity时，都会构建一个ActivityRecord对象，这在ActivityStackSupervisor.startActivityLocked()函数中完成，构造一个ActivityRecord要传入的参数是相当多的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">ActivityRecord(ActivityManagerService _service, ProcessRecord _caller,</span><br><span class="line">      <span class="keyword">int</span> _launchedFromUid, String _launchedFromPackage, Intent _intent, String _resolvedType,</span><br><span class="line">      ActivityInfo aInfo, Configuration _configuration,</span><br><span class="line">      ActivityRecord _resultTo, String _resultWho, <span class="keyword">int</span> _reqCode,</span><br><span class="line">      <span class="keyword">boolean</span> _componentSpecified, ActivityStackSupervisor supervisor,</span><br><span class="line">      ActivityContainer container, Bundle options) &#123;</span><br><span class="line">    service = _service; <span class="comment">// AMS对象</span></span><br><span class="line">    appToken = <span class="keyword">new</span> Token(<span class="keyword">this</span>); <span class="comment">//appToken可以进行跨进程传递，标识一个AR对象</span></span><br><span class="line">    info = aInfo; <span class="comment">//从AndroidManifest.xml中解析得到的Activity信息</span></span><br><span class="line">    launchedFromUid = _launchedFromUid; <span class="comment">//譬如从浏览器启动当前AR，那么该属性记录的就是浏览器的UID</span></span><br><span class="line">    launchedFromPackage = _launchedFromPackage;</span><br><span class="line">    userId = UserHandle.getUserId(aInfo.applicationInfo.uid);</span><br><span class="line">    intent = _intent; <span class="comment">//启动当前AR的Intent</span></span><br><span class="line">    shortComponentName = _intent.getComponent().flattenToShortString();</span><br><span class="line">    resolvedType = _resolvedType;</span><br><span class="line">    componentSpecified = _componentSpecified;</span><br><span class="line">    configuration = _configuration;</span><br><span class="line">    resultTo = _resultTo; <span class="comment">//记录上一个AR对象</span></span><br><span class="line">    resultWho = _resultWho; <span class="comment">//reslutTo的字符串标识</span></span><br><span class="line">    requestCode = _reqCode; <span class="comment">//上一个AR对象设定的Request Code</span></span><br><span class="line">    state = ActivityState.INITIALIZING; <span class="comment">//AR的状态，Activity调度时发生改变</span></span><br><span class="line">    frontOfTask = <span class="keyword">false</span>; <span class="comment">//是否处于Task的根部，调整任务栈中AR顺序时，可能发生改变</span></span><br><span class="line">    launchFailed = <span class="keyword">false</span>;</span><br><span class="line">    stopped = <span class="keyword">false</span>; <span class="comment">//pause操作完成状态位</span></span><br><span class="line">    delayedResume = <span class="keyword">false</span>;</span><br><span class="line">    finishing = <span class="keyword">false</span>; <span class="comment">//stoped到finished之间的过渡状态位</span></span><br><span class="line">    configDestroy = <span class="keyword">false</span>;</span><br><span class="line">    keysPaused = <span class="keyword">false</span>; <span class="comment">//如果置为true，则当前AR不再接受用户输入</span></span><br><span class="line">    inHistory = <span class="keyword">false</span>; <span class="comment">//将AR压入任务栈后，该状态位被置为true</span></span><br><span class="line">    visible = <span class="keyword">true</span>;</span><br><span class="line">    waitingVisible = <span class="keyword">false</span>;</span><br><span class="line">    nowVisible = <span class="keyword">false</span>;</span><br><span class="line">    idle = <span class="keyword">false</span>;</span><br><span class="line">    hasBeenLaunched = <span class="keyword">false</span>;</span><br><span class="line">    mStackSupervisor = supervisor;</span><br><span class="line">    mInitialActivityContainer = container;</span><br><span class="line">    <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</span><br><span class="line">        pendingOptions = <span class="keyword">new</span> ActivityOptions(options);</span><br><span class="line">        mLaunchTaskBehind = pendingOptions.getLaunchTaskBehind();</span><br><span class="line">    &#125;</span><br><span class="line">    haveState = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (aInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//根据aInfo给realActivity, taskAffinity, processName等属性赋值</span></span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//没有aInfo的情况下，赋予默认值</span></span><br><span class="line">        realActivity = <span class="keyword">null</span>;</span><br><span class="line">        taskAffinity = <span class="keyword">null</span>;</span><br><span class="line">        stateNotNeeded = <span class="keyword">false</span>;</span><br><span class="line">        appInfo = <span class="keyword">null</span>;</span><br><span class="line">        processName = <span class="keyword">null</span>;</span><br><span class="line">        packageName = <span class="keyword">null</span>;</span><br><span class="line">        fullscreen = <span class="keyword">true</span>;</span><br><span class="line">        noDisplay = <span class="keyword">false</span>;</span><br><span class="line">        mActivityType = APPLICATION_ACTIVITY_TYPE;</span><br><span class="line">        immersive = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="TaskRecord"><a href="#TaskRecord" class="headerlink" title="TaskRecord"></a>TaskRecord</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> taskId;       <span class="comment">// Unique identifier for this task.</span></span><br><span class="line">String affinity;        <span class="comment">// The affinity name for this task, or null; may change identity.</span></span><br><span class="line">String rootAffinity;    <span class="comment">// Initial base affinity, or null; does not change from initial root.</span></span><br><span class="line"><span class="keyword">final</span> IVoiceInteractionSession voiceSession;    <span class="comment">// Voice interaction session driving task</span></span><br><span class="line"><span class="keyword">final</span> IVoiceInteractor voiceInteractor;         <span class="comment">// Associated interactor to provide to app</span></span><br><span class="line">Intent intent;          <span class="comment">// The original intent that started the task. Note that this value can</span></span><br><span class="line"><span class="comment">// be null.</span></span><br><span class="line">Intent affinityIntent;  <span class="comment">// Intent of affinity-moved activity that started this task.</span></span><br><span class="line"><span class="keyword">int</span> effectiveUid;       <span class="comment">// The current effective uid of the identity of this task.</span></span><br><span class="line">ComponentName origActivity; <span class="comment">// The non-alias activity component of the intent.</span></span><br><span class="line">ComponentName realActivity; <span class="comment">// The actual activity component that started the task.</span></span><br><span class="line"><span class="keyword">boolean</span> realActivitySuspended; <span class="comment">// True if the actual activity component that started the</span></span><br><span class="line"><span class="comment">// task is suspended.</span></span><br><span class="line"><span class="keyword">boolean</span> inRecents;      <span class="comment">// Actually in the recents list?</span></span><br><span class="line"><span class="keyword">long</span> lastActiveTime;    <span class="comment">// Last time this task was active in the current device session,</span></span><br><span class="line"><span class="comment">// including sleep. This time is initialized to the elapsed time when</span></span><br><span class="line"><span class="comment">// restored from disk.</span></span><br><span class="line"><span class="keyword">boolean</span> isAvailable;    <span class="comment">// Is the activity available to be launched?</span></span><br><span class="line"><span class="keyword">boolean</span> rootWasReset;   <span class="comment">// True if the intent at the root of the task had</span></span><br><span class="line"><span class="comment">// the FLAG_ACTIVITY_RESET_TASK_IF_NEEDED flag.</span></span><br><span class="line"><span class="keyword">boolean</span> autoRemoveRecents;  <span class="comment">// If true, we should automatically remove the task from</span></span><br><span class="line"><span class="comment">// recents when activity finishes</span></span><br><span class="line"><span class="keyword">boolean</span> askedCompatMode;<span class="comment">// Have asked the user about compat mode for this task.</span></span><br><span class="line"><span class="keyword">boolean</span> hasBeenVisible; <span class="comment">// Set if any activities in the task have been visible to the user.</span></span><br><span class="line"></span><br><span class="line">String stringName;      <span class="comment">// caching of toString() result.</span></span><br><span class="line"><span class="keyword">int</span> userId;             <span class="comment">// user for which this task was created</span></span><br><span class="line"><span class="keyword">boolean</span> mUserSetupComplete; <span class="comment">// The user set-up is complete as of the last time the task activity</span></span><br><span class="line"><span class="comment">// was changed.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> numFullscreen;      <span class="comment">// Number of fullscreen activities.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mResizeMode;        <span class="comment">// The resize mode of this task and its activities.</span></span><br><span class="line"><span class="comment">// Based on the &#123;@link ActivityInfo#resizeMode&#125; of the root activity.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mSupportsPictureInPicture;  <span class="comment">// Whether or not this task and its activities</span></span><br><span class="line"><span class="comment">// support PiP. Based on the &#123;@link ActivityInfo#FLAG_SUPPORTS_PICTURE_IN_PICTURE&#125; flag</span></span><br><span class="line"><span class="comment">// of the root activity.</span></span><br><span class="line"><span class="comment">/** Can&#x27;t be put in lockTask mode. */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LOCK_TASK_AUTH_DONT_LOCK = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/** Can enter app pinning with user approval. Can never start over existing lockTask task. */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LOCK_TASK_AUTH_PINNABLE = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/** Starts in LOCK_TASK_MODE_LOCKED automatically. Can start over existing lockTask task. */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LOCK_TASK_AUTH_LAUNCHABLE = <span class="number">2</span>;</span><br><span class="line"><span class="comment">/** Can enter lockTask without user approval. Can start over existing lockTask task. */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LOCK_TASK_AUTH_WHITELISTED = <span class="number">3</span>;</span><br><span class="line"><span class="comment">/** Priv-app that starts in LOCK_TASK_MODE_LOCKED automatically. Can start over existing</span></span><br><span class="line"><span class="comment">     * lockTask task. */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LOCK_TASK_AUTH_LAUNCHABLE_PRIV = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> mLockTaskAuth = LOCK_TASK_AUTH_PINNABLE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mLockTaskUid = -<span class="number">1</span>;  <span class="comment">// The uid of the application that called startLockTask().</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This represents the last resolved activity values for this task</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> This value needs to be persisted with each task</span></span><br><span class="line">TaskDescription lastTaskDescription = <span class="keyword">new</span> TaskDescription();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** List of all activities in the task arranged in history order */</span></span><br><span class="line"><span class="keyword">final</span> ArrayList&lt;ActivityRecord&gt; mActivities;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Current stack. Setter must always be used to update the value. */</span></span><br><span class="line"><span class="keyword">private</span> ActivityStack mStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The process that had previously hosted the root activity of this task.</span></span><br><span class="line"><span class="comment">     * Used to know that we should try harder to keep this process around, in case the</span></span><br><span class="line"><span class="comment">     * user wants to return to it. */</span></span><br><span class="line"><span class="keyword">private</span> ProcessRecord mRootProcess;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Takes on same value as first root activity */</span></span><br><span class="line"><span class="keyword">boolean</span> isPersistable = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">int</span> maxRecents;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Only used for persistable tasks, otherwise 0. The last time this task was moved. Used for</span></span><br><span class="line"><span class="comment">     * determining the order when restoring. Sign indicates whether last task movement was to front</span></span><br><span class="line"><span class="comment">     * (positive) or back (negative). Absolute value indicates time. */</span></span><br><span class="line"><span class="keyword">long</span> mLastTimeMoved = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** If original intent did not allow relinquishing task identity, save that information */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mNeverRelinquishIdentity = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Used in the unique case where we are clearing the task in order to reuse it. In that case we</span></span><br><span class="line"><span class="comment">// do not want to delete the stack when the task goes empty.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mReuseTask = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">CharSequence lastDescription; <span class="comment">// Last description captured for this item.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mAffiliatedTaskId; <span class="comment">// taskId of parent affiliation or self if no parent.</span></span><br><span class="line"><span class="keyword">int</span> mAffiliatedTaskColor; <span class="comment">// color of the parent task affiliation.</span></span><br><span class="line">TaskRecord mPrevAffiliate; <span class="comment">// previous task in affiliated chain.</span></span><br><span class="line"><span class="keyword">int</span> mPrevAffiliateTaskId = INVALID_TASK_ID; <span class="comment">// previous id for persistence.</span></span><br><span class="line">TaskRecord mNextAffiliate; <span class="comment">// next task in affiliated chain.</span></span><br><span class="line"><span class="keyword">int</span> mNextAffiliateTaskId = INVALID_TASK_ID; <span class="comment">// next id for persistence.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// For relaunching the task from recents as though it was launched by the original launcher.</span></span><br><span class="line"><span class="keyword">int</span> mCallingUid;</span><br><span class="line">String mCallingPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> ActivityManagerService mService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Rect mTmpStableBounds = <span class="keyword">new</span> Rect();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Rect mTmpNonDecorBounds = <span class="keyword">new</span> Rect();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Rect mTmpRect = <span class="keyword">new</span> Rect();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Last non-fullscreen bounds the task was launched in or resized to.</span></span><br><span class="line"><span class="comment">// The information is persisted and used to determine the appropriate stack to launch the</span></span><br><span class="line"><span class="comment">// task into on restore.</span></span><br><span class="line">Rect mLastNonFullscreenBounds = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// Minimal width and height of this task when it&#x27;s resizeable. -1 means it should use the</span></span><br><span class="line"><span class="comment">// default minimal width/height.</span></span><br><span class="line"><span class="keyword">int</span> mMinWidth;</span><br><span class="line"><span class="keyword">int</span> mMinHeight;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ranking (from top) of this task among all visible tasks. (-1 means it&#x27;s not visible)</span></span><br><span class="line"><span class="comment">// This number will be assigned when we evaluate OOM scores for all visible tasks.</span></span><br><span class="line"><span class="keyword">int</span> mLayerRank = -<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>TaskRecord的职责是管理多个ActivityRecord，本文所述的任务、任务栈指的就是TaskRecord。 启动Activity时，需要找到Activity的宿主任务，如果不存在，则需要新建一个，也就是说所有的ActivityRecord都必须有宿主。 TaskRecord与ActivityRecord是一对多的关系，TaskRecord的属性中包含了ActivityRecord的数组; 同时，TaskRecord还需要维护任务栈本身的状态。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>taskid</td><td>TaskRecord的唯一标识</td></tr><tr><td>taskType</td><td>任务栈的类型，等同于ActivityRecord的类型，是由任务栈的第一个ActivityRecord决定的</td></tr><tr><td>intent</td><td>在当前任务栈中启动的第一个Activity的Intent将会被记录下来，后续如果有相同的Intent时，会与已有任务栈的Intent进行匹配，如果匹配上了，就不需要再新建一个TaskRecord了</td></tr><tr><td>realActivity, origActivity</td><td>启动任务栈的Activity，这两个属性是用包名(CompentName)表示的，real和orig是为了区分Activity有无别名(alias)的情况，如果AndroidManifest.xml中定义的Activity是一个alias，则此处real表示Activity的别名，orig表示真实的Activity</td></tr><tr><td>affinity</td><td>TaskRecord把Activity的affinity记录下来，后续启动Activity时，会从已有的任务栈中匹配affinity，如果匹配上了，则不需要新建TaskRecord</td></tr><tr><td>rootAffinity</td><td>记录任务栈中最底部Activity的affinity，一经设定后就不再改变</td></tr><tr><td>mActivities</td><td>这是TaskRecord最重要的一个属性，TaskRecord是一个栈结构，栈的元素是ActivityRecord，其内部实现是一个数组mActivities</td></tr><tr><td>stack</td><td>当前TaskRecord所在的ActivityStack</td></tr></tbody></table><p>TaskRecord的行为侧重在TaskRecord本身的管理：增/删/改/查任务栈中的元素。</p><table><thead><tr><th>行为</th><th>描述</th></tr></thead><tbody><tr><td>getRootActivity(), getTopActivity()</td><td>任务栈有根部(Root)和顶部(Top)，可以通过这两个函数分别获取到根部和顶部的ActivityRecord。获取的过程就是对TaskRecord.mActivities进行遍历，如果ActivityRecord的状态不是finishing，就认为是有效的ActivityRecord</td></tr><tr><td>topRunningActivityLocked()</td><td>虽然也是从顶至底对任务栈进行遍历获取顶部的ActivityRecord，但这个函数同getTopActivity()有区别：输入参数notTop，表示在遍历的过程中需要排除notTop这个ActivityRecord;</td></tr><tr><td>addActivityToTop(), addActivityAtBottom()</td><td>将ActivityRecord添加到任务栈的顶部或底部</td></tr><tr><td>moveActivityToFrontLocked()</td><td>该函数将一个ActivityRecord移至TaskRecord的顶部，实现方法就是先删除已有的，再在栈顶添加一个新的</td></tr><tr><td>setFrontOfTask()</td><td>ActivityRecord有一个属性是frontOfTask，表示ActivityRecord是否为TaskRecord的根Activity。该函数设置TaskRecord中所有ActivityRecord的frontOfTask属性，从栈底往上开始遍历，第一个不处于finishing状态的ActivityRecord的frontOfTask属性置成true，其他都为false</td></tr><tr><td>performClearTaskLocked()</td><td>清除TaskRecord中的ActivityRecord。当启动Activity时，用了Intent.FLAG_ACTIVITY_CLEAR_TOP参数，那么在宿主任务中，待启动ActivityRecord之上的其他ActivityRecord都会被清除</td></tr></tbody></table><p>仅仅把类的属性和行为罗列出来，当然不足以理解TaskRecord的工作原理。 接下来，将深入部分函数的代码，分析TaskRecord在一些场景下的具体执行逻辑。</p><p><code>场景 1</code> 启动一个Activity时，通常需要将ActivityRecord压入任务栈顶，addActivityToTop()就是为此功能设计：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addActivityToTop</span><span class="params">(ActivityRecord r)</span> </span>&#123;</span><br><span class="line">    addActivityAtIndex(mActivities.size(), r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将ActivityRecord压入栈顶，其实就是在mActivities数组末尾添加一个元素，所以，实际压入栈顶的操作是由addActivityAtIndex()完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addActivityAtIndex</span><span class="params">(<span class="keyword">int</span> index, ActivityRecord r)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 移除已有的ActivityRecord对象</span></span><br><span class="line">    <span class="keyword">if</span> (!mActivities.remove(r) &amp;&amp; r.fullscreen) &#123;</span><br><span class="line">        numFullscreen++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 根据任务栈是否为空，设置状态</span></span><br><span class="line">    <span class="keyword">if</span> (mActivities.isEmpty()) &#123;</span><br><span class="line">        taskType = r.mActivityType;</span><br><span class="line">        isPersistable = r.isPersistable();</span><br><span class="line">        mCallingUid = r.launchedFromUid;</span><br><span class="line">        mCallingPackage = r.launchedFromPackage;</span><br><span class="line">        maxRecents = Math.min(Math.max(r.info.maxRecents, <span class="number">1</span>),</span><br><span class="line">                ActivityManager.getMaxAppRecentsLimitStatic());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        r.mActivityType = taskType;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 在指定的位置添加ActivityRecord</span></span><br><span class="line">    mActivities.add(index, r);</span><br><span class="line">    <span class="comment">// 4. 更新任务栈关联的Intent</span></span><br><span class="line">    updateEffectiveIntent();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数会经过以下处理过程：</p><ol><li>移除任务栈中已有的ActivityRecord对象，即任务栈中不会出现两个同样的ActivityRecord对象。此处需要注意，两次启动同一个Activity，是会产生两个不同的ActivityRecord对象的;</li><li>如果任务栈为空，则设置任务栈的初始状态，否则，设置ActivityRecord的类型为任务栈的类型。由此可见，同一个任务栈中，所有ActivityRecord的类型都是一样的，而且是由任务栈的第一个ActivityRecord的类型决定的;</li><li>此处的位置就是任务栈顶，也就是mActivities属性的末尾;</li><li>任务栈中元素发生了变化，所以需要更新任务栈关联的Intent，这是通过调用updateEffectiveIntent()实现的，函数的具体逻辑，在<code>场景 3</code>中再行分析。</li></ol><p><code>场景 2</code> 当待显示的Activity压入任务栈后，就需要设置栈顶ActivityRecord的状态，这时候，会调用topRunningActivityLocked()函数来获取栈顶的元素，为了更好的分析topRunningActivityLocked()的使用场景，笔者把另一个与其功能相似的函数getTopActivity()也列出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ActivityRecord <span class="title">getTopActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = mActivities.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityRecord r = mActivities.get(i);</span><br><span class="line">        <span class="keyword">if</span> (r.finishing) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ActivityRecord <span class="title">topRunningActivityLocked</span><span class="params">(ActivityRecord notTop)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> activityNdx = mActivities.size() - <span class="number">1</span>; activityNdx &gt;= <span class="number">0</span>; --activityNdx) &#123;</span><br><span class="line">        ActivityRecord r = mActivities.get(activityNdx);</span><br><span class="line">        <span class="comment">// 除了要求ActivityRecord不是finishing状态以外，还要求不是当前给定输入的ActivityRecord</span></span><br><span class="line">        <span class="keyword">if</span> (!r.finishing &amp;&amp; r != notTop &amp;&amp; stack.okToShowLocked(r)) &#123;</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两者是从顶到底对任务栈进行遍历，但实现逻辑不同，topRunningActivityLocked()接受一个输入参数notTop，在寻找时，要求排除notTop指定的ActivityRecord，通常，传入的notTop都是null，隐含的意思就是栈顶的ActivityRecord还没有被销毁。从函数命名topRunning，也可以看出其与getTop的区别：getTop不管栈顶的死活，拿到就好; topRunning要求拿到的一定是活的栈顶。</p><p>另外，topRunningActivityLocked()还有一个限制条件： ActivityRecord是可以被显示的(okToShow)，这是通过ActivityStack.okToShowLocked()来判定的，主要是为了应多多用户或锁屏显示的Activity，一般情况下，函数返回值都为true。</p><p><code>场景 3</code> 假定在启动一个Activity时，设置了Intent的FLAG_ACTIVITY_REORDER_TO_FRONT，表示要将Activity重排序到任务栈顶。 如果目标的Activity在任务栈中已经启动过，则需要将其挪至栈顶。譬如目标任务栈从底到顶是 <code>A - B - C</code>， 然后，又以FLAG_ACTIVITY_REORDER_TO_FRONT启动了 A，那最终任务栈会变化为 <code>B - C - A</code> 。 这就会调用到moveActivityToFrontLocked()函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">moveActivityToFrontLocked</span><span class="params">(ActivityRecord newTop)</span> </span>&#123;</span><br><span class="line">    mActivities.remove(newTop);</span><br><span class="line">    mActivities.add(newTop);</span><br><span class="line">    updateEffectiveIntent();</span><br><span class="line">    setFrontOfTask();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数需要调整任务栈中ActivityRecord的顺序，延用上述例子， A 将作为参数newTop。 首先，会将 A 从任务栈中移除; 然后，再将 A 添加到任务栈顶; 接着，会调用updateEffectiveIntent()函数来更新任务栈关联的Intent：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateEffectiveIntent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> effectiveRootIndex = findEffectiveRootIndex();</span><br><span class="line">    <span class="keyword">final</span> ActivityRecord r = mActivities.get(effectiveRootIndex);</span><br><span class="line">    setIntent(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数会找到一个有效的Root Index，即任务栈底部的索引，根据这个索引值取出对应的ActivityRecord。 延续上述例子，B 会被调整为任务栈的根部ActivityRecord，通过调用setIntent()来设置当前任务栈关联的Intent为启动 B 的Intent，然而，这里可不止改变TaskRecord.intent这一个属性这个简单，与Taskrecord的发起者相关的属性值都要更改， 譬如mCallingUid，mCallingPackage都得更改为 B 的发起者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIntent</span><span class="params">(ActivityRecord r)</span> </span>&#123;</span><br><span class="line">    setIntent(r.intent, r.info);</span><br><span class="line">    mCallingUid = r.launchedFromUid;</span><br><span class="line">    mCallingPackage = r.launchedFromPackage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还有一个重载的setIntent()函数，不再展开分析了，只需要知道诸如affinity， realActivity等属性都会被重置即可。</p><p>更新完TaskRecord的Intent，再回到moveActivityToFrontLocked()函数中，需要继续更新任务栈的Front。 之前任务栈的Front是 A，在发生变化后， Front需要更新为 B，然而，TaskRecord并没有一个属性用来记录当前的Front， 它是根据任务栈中每一个ActivityRecord的frontOfTask属性来判定的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setFrontOfTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> foundFront = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> numActivities = mActivities.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> activityNdx = <span class="number">0</span>; activityNdx &lt; numActivities; ++activityNdx) &#123;</span><br><span class="line">        <span class="comment">// 从栈底往上遍历</span></span><br><span class="line">        <span class="keyword">final</span> ActivityRecord r = mActivities.get(activityNdx);</span><br><span class="line">        <span class="keyword">if</span> (foundFront || r.finishing) &#123;</span><br><span class="line">            <span class="comment">// 其他ActivityRecord的这个属性都置为false</span></span><br><span class="line">            r.frontOfTask = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 不为finishing状态，表示已经找到了front的ActivityRecord</span></span><br><span class="line">            r.frontOfTask = <span class="keyword">true</span>;</span><br><span class="line">            foundFront = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!foundFront &amp;&amp; numActivities &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        mActivities.get(<span class="number">0</span>).frontOfTask = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数从底到顶对任务栈进行遍历，找到的第一个未结束(finishing = faulse)的ActivityRecord， 将其frontOfTask属性设置成true;其他所有ActivtyRecord的frontOfTask属性设置为false。</p><h1 id="ActivityStack"><a href="#ActivityStack" class="headerlink" title="ActivityStack"></a>ActivityStack</h1><p>ActivityStack的职责是管理多个任务栈(TaskRecord)，它是一个栈式结构，栈中的元素是TaskRecord。 每个Activity在特定的时刻都会有一个状态，譬如显示、销毁等， 在应用进程看来，这些状态的变化就是在执行Activity的生命周期函数; 在系统进程看来，这些状态的变化都需要经过ActivityStack来驱动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ActivityState</span> </span>&#123;</span><br><span class="line">    INITIALIZING,</span><br><span class="line">    RESUMED,</span><br><span class="line">    PAUSING,</span><br><span class="line">    PAUSED,</span><br><span class="line">    STOPPING,</span><br><span class="line">    STOPPED,</span><br><span class="line">    FINISHING,</span><br><span class="line">    DESTROYING,</span><br><span class="line">    DESTROYED</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line"><span class="comment">/* The various modes for the method &#123;@link #removeTask&#125;. */</span></span><br><span class="line"><span class="comment">// Task is being completely removed from all stacks in the system.</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REMOVE_TASK_MODE_DESTROYING = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// Task is being removed from this stack so we can add it to another stack. In the case we are</span></span><br><span class="line"><span class="comment">// moving we don&#x27;t want to perform some operations on the task like removing it from window</span></span><br><span class="line"><span class="comment">// manager or recents.</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REMOVE_TASK_MODE_MOVING = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// Similar to &#123;@link #REMOVE_TASK_MODE_MOVING&#125; and the task will be added to the top of its new</span></span><br><span class="line"><span class="comment">// stack and the new stack will be on top of all stacks.</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REMOVE_TASK_MODE_MOVING_TO_TOP = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The height/width divide used when fitting a task within a bounds with method</span></span><br><span class="line"><span class="comment">// &#123;@link #fitWithinBounds&#125;.</span></span><br><span class="line"><span class="comment">// We always want the task to to be visible in the bounds without affecting its size when</span></span><br><span class="line"><span class="comment">// fitting. To make sure this is the case, we don&#x27;t adjust the task left or top side pass</span></span><br><span class="line"><span class="comment">// the input bounds right or bottom side minus the width or height divided by this value.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FIT_WITHIN_BOUNDS_DIVIDER = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> ActivityManagerService mService;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WindowManagerService mWindowManager;</span><br><span class="line">T mWindowContainerController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The back history of all previous (and possibly still</span></span><br><span class="line"><span class="comment"> * running) activities.  It contains #TaskRecord objects.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;TaskRecord&gt; mTaskHistory = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * List of running activities, sorted by recent usage.</span></span><br><span class="line"><span class="comment"> * The first entry in the list is the least recently used.</span></span><br><span class="line"><span class="comment"> * It contains HistoryRecord objects.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> ArrayList&lt;ActivityRecord&gt; mLRUActivities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * When we are in the process of pausing an activity, before starting the</span></span><br><span class="line"><span class="comment"> * next one, this variable holds the activity that is currently being paused.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ActivityRecord mPausingActivity = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This is the last activity that we put into the paused state.  This is</span></span><br><span class="line"><span class="comment"> * used to determine if we need to do an activity transition while sleeping,</span></span><br><span class="line"><span class="comment"> * when we normally hold the top activity paused.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ActivityRecord mLastPausedActivity = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Activities that specify No History must be removed once the user navigates away from them.</span></span><br><span class="line"><span class="comment"> * If the device goes to sleep with such an activity in the paused state then we save it here</span></span><br><span class="line"><span class="comment"> * and finish it later if another activity replaces it on wakeup.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ActivityRecord mLastNoHistoryActivity = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Current activity that is resumed, or null if there is none.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ActivityRecord mResumedActivity = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The topmost Activity passed to convertToTranslucent(). When non-null it means we are</span></span><br><span class="line"><span class="comment">// waiting for all Activities in mUndrawnActivitiesBelowTopTranslucent to be removed as they</span></span><br><span class="line"><span class="comment">// are drawn. When the last member of mUndrawnActivitiesBelowTopTranslucent is removed the</span></span><br><span class="line"><span class="comment">// Activity in mTranslucentActivityWaiting is notified via</span></span><br><span class="line"><span class="comment">// Activity.onTranslucentConversionComplete(false). If a timeout occurs prior to the last</span></span><br><span class="line"><span class="comment">// background activity being drawn then the same call will be made with a true value.</span></span><br><span class="line">ActivityRecord mTranslucentActivityWaiting = <span class="keyword">null</span>;</span><br><span class="line">ArrayList&lt;ActivityRecord&gt; mUndrawnActivitiesBelowTopTranslucent = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set when we know we are going to be calling updateConfiguration()</span></span><br><span class="line"><span class="comment"> * soon, so want to skip intermediate config checks.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">boolean</span> mConfigWillChange;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * When set, will force the stack to report as invisible.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">boolean</span> mForceHidden = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mUpdateBoundsDeferred;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mUpdateBoundsDeferredCalled;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Rect mDeferredBounds = <span class="keyword">new</span> Rect();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Rect mDeferredTaskBounds = <span class="keyword">new</span> Rect();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Rect mDeferredTaskInsetBounds = <span class="keyword">new</span> Rect();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mCurrentUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> mStackId;</span><br><span class="line"><span class="comment">/** The attached Display&#x27;s unique identifier, or -1 if detached */</span></span><br><span class="line"><span class="keyword">int</span> mDisplayId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SparseArray&lt;Rect&gt; mTmpBounds = <span class="keyword">new</span> SparseArray&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SparseArray&lt;Rect&gt; mTmpInsetBounds = <span class="keyword">new</span> SparseArray&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Rect mTmpRect2 = <span class="keyword">new</span> Rect();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ActivityOptions mTmpOptions = ActivityOptions.makeBasic();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** List for processing through a set of activities */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;ActivityRecord&gt; mTmpActivities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Run all ActivityStacks through this */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> ActivityStackSupervisor mStackSupervisor;</span><br></pre></td></tr></table></figure><p>从INITIALIZING到DESTROYED，所定义状态值示意了Activity生命周期的走向。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>stackId</td><td>每一个ActivityStack都有一个编号，从0开始递增。编号为0，表示桌面(Launcher)所在的ActivityStack，叫做Home Stack</td></tr><tr><td>mTaskHistory</td><td>TaskRecord数组，ActivityStack栈就是通过这个数组实现的</td></tr><tr><td>mPausingActivity</td><td>在发生Activity切换时，正处于Pausing状态的Activity</td></tr><tr><td>mResumedActivity</td><td>当前处于Resumed状态的ActivityRecord</td></tr><tr><td>mStacks</td><td>ActivityStack会绑定到一个显示设备上，譬如手机屏幕、投影仪等，在AMS中，通过ActivityDisplay这个类来抽象表示一个显示设备，ActivityDisplay.mStacks表示当前已经绑定到显示设备的所有ActivityStack。当执行一次绑定操作时，就会将ActivityStack.mStacks这个属性赋值成ActivityDisplay.mStacks，否则，ActivityStack.mStacks就为null。简而言之，当mStacks不为null时，表示当前ActivityStack已经绑定到了一个显示设备</td></tr></tbody></table><p>Activity状态的变迁，不仅仅是给ActivityRecord.state赋一个状态值那么简单，ActivityStack要对栈进行调整：之前的Activity要销毁或者挪到后台，待显示的Activity要挪到栈顶，这一调整，涉及到的工作就多了。</p><table><thead><tr><th>行为</th><th>描述</th></tr></thead><tbody><tr><td>findTaskLocked()</td><td>该函数的功能是找到目标ActivityRecord(target)所在的任务栈(TaskRecord)，如果找到，则返回栈顶的ActivityRecord，否则，返回null</td></tr><tr><td>findActivityLocked()</td><td>根据Intent和ActivityInfo这两个参数可以获取一个Activity的包名，该函数会从栈顶至栈底遍历ActivityStack中的所有Activity，如果包名匹配成功，就返回</td></tr><tr><td>moveToFront)</td><td>该函数用于将当前的ActivityStack挪到前台，执行时，调用ActivityStack中的其他一些判定函数</td></tr><tr><td>isAttached()</td><td>用于判定当前ActivityStack是否已经绑定到显示设备</td></tr><tr><td>isOnHomeDisplay()</td><td>用于判定当前是否为默认的显示设备(Display.DEFAULT_DISPLAY)，通常，默认的显示设备就是手机屏幕</td></tr><tr><td>isHomeStack()</td><td>用于判定当前ActivityStack是否为Home Stack，即判定当前显示的是否为桌面(Launcher)</td></tr><tr><td>moveTaskToFrontLocked()</td><td>该函数用于将指定的任务栈挪到当前ActivityStack的最前面。在Activity状态变化时，需要对已有的ActivityStack中的任务栈进行调整，待显示Activity的宿主任务需要挪到前台</td></tr><tr><td>insertTaskAtTop()</td><td>将任务插入ActivityStack栈顶</td></tr></tbody></table><p>ActivityStack还有很多与迁移Activity状态相关的行为： startActivityLocked()， resumeTopActivityLocked()， completeResumeLocked()， startPausingLocked()， completePauseLocked()， stopActivityLocked()， activityPausedLocked()， finishActivityLocked()， activityDestroyedLocked()， 它们与Activity的生命周期调度息息相关。</p><p><code>场景 1</code> 以singleTask的方式启动一个处于后台的Activity，那么，就需要将Activity挪到前台。怎么挪呢？</p><p>第一步，findTaskLocked(): 找到Activity所在TaskRecord;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ActivityRecord <span class="title">findTaskLocked</span><span class="params">(ActivityRecord target)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> taskNdx = mTaskHistory.size() - <span class="number">1</span>; taskNdx &gt;= <span class="number">0</span>; --taskNdx) &#123;</span><br><span class="line">        <span class="keyword">final</span> TaskRecord task = mTaskHistory.get(taskNdx);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">final</span> ActivityRecord r = task.getTopActivity();</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">final</span> Intent taskIntent = task.intent;</span><br><span class="line">        <span class="keyword">final</span> Intent affinityIntent = task.affinityIntent;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (!isDocument &amp;&amp; !taskIsDocument &amp;&amp; task.rootAffinity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (task.rootAffinity.equals(target.taskAffinity)) &#123;</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (taskIntent != <span class="keyword">null</span> &amp;&amp; taskIntent.getComponent() != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            taskIntent.getComponent().compareTo(cls) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">            Objects.equals(documentData, taskDocumentData)) &#123;</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="function"><span class="keyword">if</span> <span class="title">if</span> <span class="params">(affinityIntent != <span class="keyword">null</span> &amp;&amp; affinityIntent.getComponent()</span> !</span>= <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            affinityIntent.getComponent().compareTo(cls) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">            Objects.equals(documentData, taskDocumentData)) &#123;</span><br><span class="line">            <span class="keyword">return</span> r</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数的功能是找到target ActivityRecord所在的Task，如果找到，则返回Task栈顶的ActivityRecord，否则，返回null。 主体逻辑是对ActivityStack中的所有Task进行遍历，以下几种情况表示找到了ActivityRecord的宿主task：</p><ul><li>Affinity相同。rootAffinity表示第一次启动该task时affinity值，如果一个ActivityRecord的taskAffinity属性与其相等， 那么这个task自然是ActivityRecord的宿主;</li><li>Intent的包名相同。</li><li>Affinity Intent的包名相同。</li></ul><p>第二步，moveToFront(): 将TaskRecord所在的ActivityStack挪到前台;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">moveToFront</span><span class="params">(String reason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isAttached()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isOnHomeDisplay()) &#123;</span><br><span class="line">            mStackSupervisor.moveHomeStack(isHomeStack(), reason);</span><br><span class="line">        &#125;</span><br><span class="line">        mStacks.remove(<span class="keyword">this</span>);</span><br><span class="line">        mStacks.add(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">final</span> TaskRecord task = topTask();</span><br><span class="line">        <span class="keyword">if</span> (task != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mWindowManager.moveTaskToTop(task.taskId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，会有一些判定：</p><ul><li>isAttached()： 只有在当前ActivityStack绑定到显示设备的情况下，才需要挪到;</li><li>isOnHomeDisplay()： 如果当前是默认的显示设备，则对HomeStack(桌面)进行挪动， 这涉及到对多个ActivityStack的操作，所以需要通过ActivityStackSupervisor完成;</li><li>isHomeStack()： 如果当前是HomeStack，则将其挪到前后; 否则，将HomeStack挪到后台</li></ul><p>然后，就是对mStacks这个属性进行操作：在mStacks数组中，删除已有的ActivityStack对象，并添加一个新的，这样做其实达到了一个目的，前台的ActivityStacks处于mStacks末尾。</p><p>最后，调用WMS.moveTaskToTop()通知窗口的进行变化调整。</p><p>第三步， moveTaskToFrontLocked(): 将TaskRecord挪到ActivityStack的栈顶;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">moveTaskToFrontLocked</span><span class="params">(TaskRecord tr, ActivityRecord source, Bundle options,</span></span></span><br><span class="line"><span class="function"><span class="params">            String reason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> numTasks = mTaskHistory.size();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> index = mTaskHistory.indexOf(tr);</span><br><span class="line">    <span class="comment">// 判定ActivityStack是否需要挪动任务栈</span></span><br><span class="line">    <span class="keyword">if</span> (numTasks == <span class="number">0</span> || index &lt; <span class="number">0</span>)  &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调整ActivityStack</span></span><br><span class="line">    insertTaskAtTop(tr);</span><br><span class="line">    moveToFront(reason);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 将栈顶的Activity置为Resumed状态</span></span><br><span class="line">    mStackSupervisor.resumeTopActivitiesLocked();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，会经过判定：如果当前的ActivityStack为空，或者不存在要挪动的任务，则不需要对当前ActivityStack进行调整;</p><p>然后，确定目标任务在当前ActivityStack中，则对ActivityStack进行调整，将目标任务插入ActivityStack栈顶。</p><ul><li>insertTaskAtTop()，会先将已有的目标任务删除，再重新添加到栈顶位置;</li><li>moveToFront()，在第二步中执行过一次，因为在某些场景下，只会调用moveToFront()，不会调用moveTaskToFrontLocked(); 一旦要将任务挪到ActivityStack栈顶，意味着ActivityStack也一定要挪到前台;</li></ul><p>最后，将任务栈顶的Activity置为Resumed状态，这里是通过ActivityStackSupervisor完成的。因为可能同时存在多个显示设备，所以需要对多个ActivityStack进行操作。</p><blockquote><p>Activity管理中有两个栈顶：一是ActivityStack的栈顶，它对应到要显示的TaskRecord; 二是TaskRecord的栈顶，它对应到要显示的Activity。简单来说，当前显示的Activity一定是位于其所属的TaskRecord的栈顶，TaskRecord也一定位于其所属的ActivityStack的栈顶。</p></blockquote><h1 id="ActivityDisplay"><a href="#ActivityDisplay" class="headerlink" title="ActivityDisplay"></a>ActivityDisplay</h1><p>Android支持多屏显示，在不同的显示设备上可以有不同的ActivityStack。</p><p>所有的ActivityStack都是通过ActivityStackSupervisor管理起来的。ActivityDisplay对应到一个显示设备，默认的显示设备是手机屏幕。 ActivityStackSupervisor间接通过ActivityDisplay来维护多个ActivityStack的状态。 ActivityStack有一个属性是mStacks，当mStacks不为空时，表示ActivityStack已经绑定到了显示设备， 其实ActivityStack.mStacks只是一个副本，真正的对象在ActivityDisplay中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ActivityStackSupervisor mSupervisor;</span><br><span class="line"><span class="comment">/** Actual Display this object tracks. */</span></span><br><span class="line"><span class="keyword">int</span> mDisplayId;</span><br><span class="line">Display mDisplay;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * All of the stacks on this display. Order matters, topmost stack is in front of all other</span></span><br><span class="line"><span class="comment"> * stacks, bottommost behind. Accessed directly by ActivityManager package classes. Any calls</span></span><br><span class="line"><span class="comment"> * changing the list should also call &#123;<span class="doctag">@link</span> #onStackOrderChanged()&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;ActivityStack&gt; mStacks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;OnStackOrderChangedListener&gt; mStackOrderChangedCallbacks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Array of all UIDs that are present on the display. */</span></span><br><span class="line"><span class="keyword">private</span> IntArray mDisplayAccessUIDs = <span class="keyword">new</span> IntArray();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** All tokens used to put activities on this stack to sleep (including mOffToken) */</span></span><br><span class="line"><span class="keyword">final</span> ArrayList&lt;ActivityManagerInternal.SleepToken&gt; mAllSleepTokens = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">/** The token acquired by ActivityStackSupervisor to put stacks on the display to sleep */</span></span><br><span class="line">ActivityManagerInternal.SleepToken mOffToken;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mSleeping;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cached reference to some special stacks we tend to get a lot so we don&#x27;t need to loop</span></span><br><span class="line"><span class="comment">// through the list to find them.</span></span><br><span class="line"><span class="keyword">private</span> ActivityStack mHomeStack = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> ActivityStack mRecentsStack = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> ActivityStack mPinnedStack = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> ActivityStack mSplitScreenPrimaryStack = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Used in updating the display size</span></span><br><span class="line"><span class="keyword">private</span> Point mTmpDisplaySize = <span class="keyword">new</span> Point();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> DisplayWindowController mWindowContainerController;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>mDisplayId</td><td>显示设备的唯一标识</td></tr><tr><td>mDisplay</td><td>获取显示设备信息的工具类，</td></tr><tr><td>mDisplayInfo</td><td>显示设备信息的数据结构，包括类型、大小、分辨率等</td></tr><tr><td>mStacks</td><td>/**<br>     * All of the stacks on this display. Order matters, topmost stack is in front of all other<br>     * stacks, bottommost behind. Accessed directly by ActivityManager package classes. Any calls<br>     * changing the list should also call {@link #onStackOrderChanged()}.<br>     */  绑定到显示设备上的ActivityStack</td></tr></tbody></table><table><thead><tr><th>行为</th><th>描述</th></tr></thead><tbody><tr><td>attachActivities()</td><td>将一个ActivityStack绑定到显示设备</td></tr><tr><td>setVisibleBehindActivity()</td><td>设置后台显示的Activity</td></tr><tr><td>moveHomeStack()</td><td>移动HomeStack</td></tr></tbody></table><h1 id="ActivityContainer"><a href="#ActivityContainer" class="headerlink" title="ActivityContainer"></a>ActivityContainer</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityContainer</span> <span class="keyword">extends</span> <span class="title">WindowManagerState</span>.<span class="title">ConfigurationContainer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> mFullscreen;</span><br><span class="line">    <span class="keyword">protected</span> Rect mBounds;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> mMinWidth = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> mMinHeight = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ActivityContainer(ConfigurationContainerProto proto) &#123;</span><br><span class="line">        <span class="keyword">super</span>(proto);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Rect <span class="title">getBounds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBounds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isFullscreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mFullscreen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMinWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mMinWidth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMinHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mMinHeight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ActivityStackSupervisor"><a href="#ActivityStackSupervisor" class="headerlink" title="ActivityStackSupervisor"></a>ActivityStackSupervisor</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ActivityManagerService</span><span class="params">(Context systemContext)</span> </span>&#123;</span><br><span class="line">...........</span><br><span class="line">mStackSupervisor = createStackSupervisor();</span><br><span class="line">    mStackSupervisor.onConfigurationChanged(mTempConfig);</span><br><span class="line">    mKeyguardController = mStackSupervisor.getKeyguardController();</span><br><span class="line">    mCompatModePackages = <span class="keyword">new</span> CompatModePackages(<span class="keyword">this</span>, systemDir, mHandler);</span><br><span class="line">    mIntentFirewall = <span class="keyword">new</span> IntentFirewall(<span class="keyword">new</span> IntentFirewallInterface(), mHandler);</span><br><span class="line">    mTaskChangeNotificationController =</span><br><span class="line">        <span class="keyword">new</span> TaskChangeNotificationController(<span class="keyword">this</span>, mStackSupervisor, mHandler);</span><br><span class="line">    mActivityStartController = <span class="keyword">new</span> ActivityStartController(<span class="keyword">this</span>);</span><br><span class="line">    mRecentTasks = createRecentTasks();</span><br><span class="line">    mStackSupervisor.setRecentTasks(mRecentTasks);</span><br><span class="line">    mLockTaskController = <span class="keyword">new</span> LockTaskController(mContext, mStackSupervisor, mHandler);</span><br><span class="line">    .............</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ActivityStackSupervisor <span class="title">createStackSupervisor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityStackSupervisor supervisor = <span class="keyword">new</span> ActivityStackSupervisor(<span class="keyword">this</span>,mHandler.getLooper());</span><br><span class="line">        supervisor.initialize();</span><br><span class="line">        <span class="keyword">return</span> supervisor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/images/AMS-ActivityStack/image-20201214155050544.png" alt="image-20201214155050544"></p><p>ActivityStackSupervisor是ActivityStack的管理者，内部管理了mHomeStack、mFocusedStack和mLastFocusedStack三个ActivityStack。其中，mHomeStack管理的是Launcher相关的Activity栈， stackId为0；mFocusedStack管理的是当前显示在前台Activity的Activity栈；mLastFocusedStack管理的是上一次显示在前台Activity的Activity栈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** The stack containing the launcher app. Assumed to always be attached to</span></span><br><span class="line"><span class="comment">     * Display.DEFAULT_DISPLAY. */</span></span><br><span class="line">    ActivityStack mHomeStack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The stack currently receiving input or launching the next activity. */</span></span><br><span class="line">    ActivityStack mFocusedStack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** If this is the same as mFocusedStack then the activity on the top of the focused stack has</span></span><br><span class="line"><span class="comment">     * been resumed. If stacks are changing position this will hold the old stack until the new</span></span><br><span class="line"><span class="comment">     * stack becomes resumed after which it will be set to mFocusedStack. */</span></span><br><span class="line">    <span class="keyword">private</span> ActivityStack mLastFocusedStack;</span><br></pre></td></tr></table></figure><p>ActivityStackSupervisor的职责是管理多个ActivityStack。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>mHomeStack</td><td>主屏(桌面)所在ActivityStack</td></tr><tr><td>mFocusedStack</td><td>表示焦点ActivityStack，它能够获取用户输入</td></tr><tr><td>mLastFocusedStack</td><td>上一个焦点ActivityStack</td></tr><tr><td>mActivityDisplays</td><td>表示当前的显示设备，ActivityDisplay中绑定了若干ActivityStack。通过该属性就能间接获取所有ActivityStack的信息</td></tr></tbody></table><table><thead><tr><th>行为</th><th>描述</th></tr></thead><tbody><tr><td>setFocusedStack()</td><td>设置当前的焦点ActivityStack</td></tr><tr><td>adjustStackFocus()</td><td></td></tr><tr><td>startHomeActivity()</td><td>启动桌面</td></tr></tbody></table><p>ActivityStackSupervisor有很多与ActivityStack功能类似的行为，不过都是针对多个ActivityStack进行操作。 譬如findTaskLocked()， findActivityLocked()， topRunningActivityLocked(), ensureActivitiesVisibleLocked()等，</p><p><code>场景 1</code> 在启动一个新的Activity时，需要设置当前的焦点，通过AMS.setFocusedActivityLocked()函数，就能设置一个 ActivityRecord为当前的焦点Activity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setFocusedActivityLocked</span><span class="params">(ActivityRecord r, String reason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mFocusedActivity != r) &#123;</span><br><span class="line">        mFocusedActivity = r;</span><br><span class="line">        ...</span><br><span class="line">        mStackSupervisor.setFocusedStack(r, reason + <span class="string">&quot; setFocusedActivity&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mWindowManager.setFocusedApp(r.appToken, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        applyUpdateLockStateLocked(r);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数的逻辑很简单，如果当前的焦点(mFocusedActivity)不是待显示的(r)，则需要更新焦点; 然后，就发起了其他函数调用。 这里，需要通过ActivityStackSupervisor完成对ActivityStack的管理，通过调用setFocusedStack()来设置当前的焦点Stack， 焦点Stack就是焦点Activity所属的ActivityStack。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFocusedStack</span><span class="params">(ActivityRecord r, String reason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> TaskRecord task = r.task;</span><br><span class="line">        <span class="comment">// 判断输入的ActivityRecord是否为HomeActivity</span></span><br><span class="line">        <span class="keyword">boolean</span> isHomeActivity = !r.isApplicationActivity();</span><br><span class="line">        <span class="keyword">if</span> (!isHomeActivity &amp;&amp; task != <span class="keyword">null</span>) &#123;</span><br><span class="line">            isHomeActivity = !task.isApplicationTask();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isHomeActivity &amp;&amp; task != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> ActivityRecord parent = task.stack.mActivityContainer.mParentActivity;</span><br><span class="line">            isHomeActivity = parent != <span class="keyword">null</span> &amp;&amp; parent.isHomeActivity();</span><br><span class="line">        &#125;</span><br><span class="line">        moveHomeStack(isHomeActivity, reason);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有前台的ActivityStack才能获取焦点，所以，该函数的功能就是要将待显示的Activity所在的ActivityStack挪到前台。 很重要的一个处理逻辑就是判定待显示的ActivityRecord的类型是否为HomeActivity，判定细节此处不表。结果是： 如果待显示的ActivityRecord类型为HomeActivity，则需要将HomeStack挪到前台; 否则，意味着要将HomeStack挪到后台。 挪动HomeStack，是通过moveHomeStack()这个函数实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveHomeStack</span><span class="params">(<span class="keyword">boolean</span> toFront, String reason)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获取当前的Top Stack</span></span><br><span class="line">    ArrayList&lt;ActivityStack&gt; stacks = mHomeStack.mStacks;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> topNdx = stacks.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (topNdx &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ActivityStack topStack = stacks.get(topNdx);</span><br><span class="line">    <span class="comment">// 2. 判定HomeStack是否需要挪动</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> homeInFront = topStack == mHomeStack;</span><br><span class="line">    <span class="keyword">if</span> (homeInFront != toFront) &#123;</span><br><span class="line">        mLastFocusedStack = topStack;</span><br><span class="line">        stacks.remove(mHomeStack);</span><br><span class="line">        stacks.add(toFront ? topNdx : <span class="number">0</span>, mHomeStack);</span><br><span class="line">        mFocusedStack = stacks.get(topNdx);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 3. 判定当前AMS是否完成启动</span></span><br><span class="line">    <span class="keyword">if</span> (mService.mBooting || !mService.mBooted) &#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityRecord r = topRunningActivityLocked();</span><br><span class="line">        <span class="keyword">if</span> (r != <span class="keyword">null</span> &amp;&amp; r.idle) &#123;</span><br><span class="line">            checkFinishBootingLocked();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.获取当前的Top Stack，其实就是获取mStacks这个数组最后的元素。mStacks这个属性在ActivityStack和ActivityDisplay中都见过，它们是同一个东西，ActivityStackSupervisor要管理的就是这个东西;</p><p>2.判定当前HomeStack是否需要挪动。有四种情况：</p><ul><li>homeInFront = true, toFront = false： 表示HomeStack在前台，要将其挪到后台，则需要将HomeStack挪到mStacks的0号位置;</li><li>homeInFront = true, toFront = true： 表示HomeStack在前台，要将其挪到前台，则不需要对mStacks进行调整;</li><li>homeInFront = false, toFront = true： 表示HomeStack在后台，要将其挪到前台，则需要将HomeStack挪到mStacks的末尾;</li><li>homeInFront = false, toFront = false： 表示HomeStack在后台，要将其挪到后台，则不需要对mStacks进行调整。</li></ul><p>3.判断当前AMS是否完成启动。如果当前是刚开机，AMS都还未启动完成，需要显示的Activity还处于idle状态，则需要发起一次是否启动完成的检查</p><h1 id="ProcessRecord"><a href="#ProcessRecord" class="headerlink" title="ProcessRecord"></a>ProcessRecord</h1><p>AMS采用ProcessRecord这个数据结构来维护进程运行时的状态信息，当创建系统进程(system_process)或应用进程的时候，就会通过AMS初始化一个ProcessRecord。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Full information about a particular process that</span></span><br><span class="line"><span class="comment"> * is currently running.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessRecord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = TAG_WITH_CLASS_NAME ? <span class="string">&quot;ProcessRecord&quot;</span> : TAG_AM;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ActivityManagerService mService; <span class="comment">// where we came from</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BatteryStatsImpl mBatteryStats; <span class="comment">// where to collect runtime statistics</span></span><br><span class="line">    <span class="keyword">final</span> ApplicationInfo info; <span class="comment">// all about the first app in the process</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isolated;     <span class="comment">// true if this is a special isolated process</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> uid;              <span class="comment">// uid of process; may be different from &#x27;info&#x27; if isolated</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> userId;           <span class="comment">// user of process.</span></span><br><span class="line">    <span class="keyword">final</span> String processName;   <span class="comment">// name of the process</span></span><br><span class="line">    <span class="comment">// List of packages running in the process</span></span><br><span class="line">    <span class="keyword">final</span> ArrayMap&lt;String, ProcessStats.ProcessStateHolder&gt; pkgList = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">final</span> ProcessList.ProcStateMemTracker procStateMemTracker</span><br><span class="line">            = <span class="keyword">new</span> ProcessList.ProcStateMemTracker();</span><br><span class="line">    UidRecord uidRecord;        <span class="comment">// overall state of process&#x27;s uid.</span></span><br><span class="line">    ArraySet&lt;String&gt; pkgDeps;   <span class="comment">// additional packages we have a dependency on</span></span><br><span class="line">    IApplicationThread thread;  <span class="comment">// the actual proc...  may be null only if</span></span><br><span class="line">                                <span class="comment">// &#x27;persistent&#x27; is true (in which case we</span></span><br><span class="line">                                <span class="comment">// are in the process of launching the app)</span></span><br><span class="line">    ProcessState baseProcessTracker;</span><br><span class="line">    BatteryStatsImpl.Uid.Proc curProcBatteryStats;</span><br><span class="line">    <span class="keyword">int</span> pid;                    <span class="comment">// The process of this application; 0 if none</span></span><br><span class="line">    String procStatFile;        <span class="comment">// path to /proc/&lt;pid&gt;/stat</span></span><br><span class="line">    <span class="keyword">int</span>[] gids;                 <span class="comment">// The gids this process was launched with</span></span><br><span class="line">    String requiredAbi;         <span class="comment">// The ABI this process was launched with</span></span><br><span class="line">    String instructionSet;      <span class="comment">// The instruction set this process was launched with</span></span><br><span class="line">    <span class="keyword">boolean</span> starting;           <span class="comment">// True if the process is being started</span></span><br><span class="line">    <span class="keyword">long</span> lastActivityTime;      <span class="comment">// For managing the LRU list</span></span><br><span class="line">    <span class="keyword">long</span> lastPssTime;           <span class="comment">// Last time we retrieved PSS data</span></span><br><span class="line">    <span class="keyword">long</span> nextPssTime;           <span class="comment">// Next time we want to request PSS data</span></span><br><span class="line">    <span class="keyword">long</span> lastStateTime;         <span class="comment">// Last time setProcState changed</span></span><br><span class="line">    <span class="keyword">long</span> initialIdlePss;        <span class="comment">// Initial memory pss of process for idle maintenance.</span></span><br><span class="line">    <span class="keyword">long</span> lastPss;               <span class="comment">// Last computed memory pss.</span></span><br><span class="line">    <span class="keyword">long</span> lastSwapPss;           <span class="comment">// Last computed SwapPss.</span></span><br><span class="line">    <span class="keyword">long</span> lastCachedPss;         <span class="comment">// Last computed pss when in cached state.</span></span><br><span class="line">    <span class="keyword">long</span> lastCachedSwapPss;     <span class="comment">// Last computed SwapPss when in cached state.</span></span><br><span class="line">    <span class="keyword">int</span> maxAdj;                 <span class="comment">// Maximum OOM adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> curRawAdj;              <span class="comment">// Current OOM unlimited adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> setRawAdj;              <span class="comment">// Last set OOM unlimited adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> curAdj;                 <span class="comment">// Current OOM adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> setAdj;                 <span class="comment">// Last set OOM adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> verifiedAdj;            <span class="comment">// The last adjustment that was verified as actually being set</span></span><br><span class="line">    <span class="keyword">int</span> curSchedGroup;          <span class="comment">// Currently desired scheduling class</span></span><br><span class="line">    <span class="keyword">int</span> setSchedGroup;          <span class="comment">// Last set to background scheduling class</span></span><br><span class="line">    <span class="keyword">int</span> vrThreadTid;            <span class="comment">// Thread currently set for VR scheduling</span></span><br><span class="line">    <span class="keyword">int</span> trimMemoryLevel;        <span class="comment">// Last selected memory trimming level</span></span><br><span class="line">    <span class="keyword">int</span> curProcState = PROCESS_STATE_NONEXISTENT; <span class="comment">// Currently computed process state</span></span><br><span class="line">    <span class="keyword">int</span> repProcState = PROCESS_STATE_NONEXISTENT; <span class="comment">// Last reported process state</span></span><br><span class="line">    <span class="keyword">int</span> setProcState = PROCESS_STATE_NONEXISTENT; <span class="comment">// Last set process state in process tracker</span></span><br><span class="line">    <span class="keyword">int</span> pssProcState = PROCESS_STATE_NONEXISTENT; <span class="comment">// Currently requesting pss for</span></span><br><span class="line">    <span class="keyword">int</span> pssStatType;            <span class="comment">// The type of stat collection that we are currently requesting</span></span><br><span class="line">    <span class="keyword">int</span> savedPriority;          <span class="comment">// Previous priority value if we&#x27;re switching to non-SCHED_OTHER</span></span><br><span class="line">    <span class="keyword">int</span> renderThreadTid;        <span class="comment">// TID for RenderThread</span></span><br><span class="line">    <span class="keyword">boolean</span> serviceb;           <span class="comment">// Process currently is on the service B list</span></span><br><span class="line">    <span class="keyword">boolean</span> serviceHighRam;     <span class="comment">// We are forcing to service B list due to its RAM use</span></span><br><span class="line">    <span class="keyword">boolean</span> notCachedSinceIdle; <span class="comment">// Has this process not been in a cached state since last idle?</span></span><br><span class="line">    <span class="keyword">boolean</span> hasClientActivities;  <span class="comment">// Are there any client services with activities?</span></span><br><span class="line">    <span class="keyword">boolean</span> hasStartedServices; <span class="comment">// Are there any started services running in this process?</span></span><br><span class="line">    <span class="keyword">boolean</span> foregroundServices; <span class="comment">// Running any services that are foreground?</span></span><br><span class="line">    <span class="keyword">boolean</span> foregroundActivities; <span class="comment">// Running any activities that are foreground?</span></span><br><span class="line">    <span class="keyword">boolean</span> repForegroundActivities; <span class="comment">// Last reported foreground activities.</span></span><br><span class="line">    <span class="keyword">boolean</span> systemNoUi;         <span class="comment">// This is a system process, but not currently showing UI.</span></span><br><span class="line">    <span class="keyword">boolean</span> hasShownUi;         <span class="comment">// Has UI been shown in this process since it was started?</span></span><br><span class="line">    <span class="keyword">boolean</span> hasTopUi;           <span class="comment">// Is this process currently showing a non-activity UI that the user</span></span><br><span class="line">                                <span class="comment">// is interacting with? E.g. The status bar when it is expanded, but</span></span><br><span class="line">                                <span class="comment">// not when it is minimized. When true the</span></span><br><span class="line">                                <span class="comment">// process will be set to use the ProcessList#SCHED_GROUP_TOP_APP</span></span><br><span class="line">                                <span class="comment">// scheduling group to boost performance.</span></span><br><span class="line">    <span class="keyword">boolean</span> hasOverlayUi;       <span class="comment">// Is the process currently showing a non-activity UI that</span></span><br><span class="line">                                <span class="comment">// overlays on-top of activity UIs on screen. E.g. display a window</span></span><br><span class="line">                                <span class="comment">// of type</span></span><br><span class="line">                                <span class="comment">// android.view.WindowManager.LayoutParams#TYPE_APPLICATION_OVERLAY</span></span><br><span class="line">                                <span class="comment">// When true the process will oom adj score will be set to</span></span><br><span class="line">                                <span class="comment">// ProcessList#PERCEPTIBLE_APP_ADJ at minimum to reduce the chance</span></span><br><span class="line">                                <span class="comment">// of the process getting killed.</span></span><br><span class="line">    <span class="keyword">boolean</span> runningRemoteAnimation; <span class="comment">// Is the process currently running a RemoteAnimation? When true</span></span><br><span class="line">                                <span class="comment">// the process will be set to use the</span></span><br><span class="line">                                <span class="comment">// ProcessList#SCHED_GROUP_TOP_APP scheduling group to boost</span></span><br><span class="line">                                <span class="comment">// performance, as well as oom adj score will be set to</span></span><br><span class="line">                                <span class="comment">// ProcessList#VISIBLE_APP_ADJ at minimum to reduce the chance</span></span><br><span class="line">                                <span class="comment">// of the process getting killed.</span></span><br><span class="line">    <span class="keyword">boolean</span> pendingUiClean;     <span class="comment">// Want to clean up resources from showing UI?</span></span><br><span class="line">    <span class="keyword">boolean</span> hasAboveClient;     <span class="comment">// Bound using BIND_ABOVE_CLIENT, so want to be lower</span></span><br><span class="line">    <span class="keyword">boolean</span> treatLikeActivity;  <span class="comment">// Bound using BIND_TREAT_LIKE_ACTIVITY</span></span><br><span class="line">    <span class="keyword">boolean</span> bad;                <span class="comment">// True if disabled in the bad process list</span></span><br><span class="line">    <span class="keyword">boolean</span> killedByAm;         <span class="comment">// True when proc has been killed by activity manager, not for RAM</span></span><br><span class="line">    <span class="keyword">boolean</span> killed;             <span class="comment">// True once we know the process has been killed</span></span><br><span class="line">    <span class="keyword">boolean</span> procStateChanged;   <span class="comment">// Keep track of whether we changed &#x27;setAdj&#x27;.</span></span><br><span class="line">    <span class="keyword">boolean</span> reportedInteraction;<span class="comment">// Whether we have told usage stats about it being an interaction</span></span><br><span class="line">    <span class="keyword">boolean</span> unlocked;           <span class="comment">// True when proc was started in user unlocked state</span></span><br><span class="line">    <span class="keyword">long</span> interactionEventTime;  <span class="comment">// The time we sent the last interaction event</span></span><br><span class="line">    <span class="keyword">long</span> fgInteractionTime;     <span class="comment">// When we became foreground for interaction purposes</span></span><br><span class="line">    String waitingToKill;       <span class="comment">// Process is waiting to be killed when in the bg, and reason</span></span><br><span class="line">    Object forcingToImportant;  <span class="comment">// Token that is forcing this process to be important</span></span><br><span class="line">    <span class="keyword">int</span> adjSeq;                 <span class="comment">// Sequence id for identifying oom_adj assignment cycles</span></span><br><span class="line">    <span class="keyword">int</span> completedAdjSeq;        <span class="comment">// Sequence id for identifying oom_adj assignment cycles</span></span><br><span class="line">    <span class="keyword">boolean</span> containsCycle;      <span class="comment">// Whether this app has encountered a cycle in the most recent update</span></span><br><span class="line">    <span class="keyword">int</span> lruSeq;                 <span class="comment">// Sequence id for identifying LRU update cycles</span></span><br><span class="line">    CompatibilityInfo compat;   <span class="comment">// last used compatibility mode</span></span><br><span class="line">    IBinder.DeathRecipient deathRecipient; <span class="comment">// Who is watching for the death.</span></span><br><span class="line">    ActiveInstrumentation instr;<span class="comment">// Set to currently active instrumentation running in process</span></span><br><span class="line">    <span class="keyword">boolean</span> usingWrapper;       <span class="comment">// Set to true when process was launched with a wrapper attached</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;BroadcastRecord&gt; curReceivers = <span class="keyword">new</span> ArraySet&lt;BroadcastRecord&gt;();<span class="comment">// receivers currently running in the app</span></span><br><span class="line">    <span class="keyword">long</span> whenUnimportant;       <span class="comment">// When (uptime) the process last became unimportant</span></span><br><span class="line">    <span class="keyword">long</span> lastCpuTime;           <span class="comment">// How long proc has run CPU at last check</span></span><br><span class="line">    <span class="keyword">long</span> curCpuTime;            <span class="comment">// How long proc has run CPU most recently</span></span><br><span class="line">    <span class="keyword">long</span> lastRequestedGc;       <span class="comment">// When we last asked the app to do a gc</span></span><br><span class="line">    <span class="keyword">long</span> lastLowMemory;         <span class="comment">// When we last told the app that memory is low</span></span><br><span class="line">    <span class="keyword">long</span> lastProviderTime;      <span class="comment">// The last time someone else was using a provider in this process.</span></span><br><span class="line">    <span class="keyword">long</span> lastTopTime;           <span class="comment">// The last time the process was in the TOP state or greater.</span></span><br><span class="line">    <span class="keyword">boolean</span> reportLowMemory;    <span class="comment">// Set to true when waiting to report low mem</span></span><br><span class="line">    <span class="keyword">boolean</span> empty;              <span class="comment">// Is this an empty background process?</span></span><br><span class="line">    <span class="keyword">boolean</span> cached;             <span class="comment">// Is this a cached process?</span></span><br><span class="line">    String adjType;             <span class="comment">// Debugging: primary thing impacting oom_adj.</span></span><br><span class="line">    <span class="keyword">int</span> adjTypeCode;            <span class="comment">// Debugging: adj code to report to app.</span></span><br><span class="line">    Object adjSource;           <span class="comment">// Debugging: option dependent object.</span></span><br><span class="line">    <span class="keyword">int</span> adjSourceProcState;     <span class="comment">// Debugging: proc state of adjSource&#x27;s process.</span></span><br><span class="line">    Object adjTarget;           <span class="comment">// Debugging: target component impacting oom_adj.</span></span><br><span class="line">    Runnable crashHandler;      <span class="comment">// Optional local handler to be invoked in the process crash.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// all activities running in the process</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;ActivityRecord&gt; activities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// any tasks this process had run root activities in</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;TaskRecord&gt; recentTasks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// all ServiceRecord running in this process</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;ServiceRecord&gt; services = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    <span class="comment">// services that are currently executing code (need to remain foreground).</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;ServiceRecord&gt; executingServices = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    <span class="comment">// All ConnectionRecord this process holds</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;ConnectionRecord&gt; connections = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    <span class="comment">// all IIntentReceivers that are registered from this process.</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;ReceiverList&gt; receivers = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    <span class="comment">// class (String) -&gt; ContentProviderRecord</span></span><br><span class="line">    <span class="keyword">final</span> ArrayMap&lt;String, ContentProviderRecord&gt; pubProviders = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// All ContentProviderRecord process is using</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;ContentProviderConnection&gt; conProviders = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    String isolatedEntryPoint;  <span class="comment">// Class to run on start if this is a special isolated process.</span></span><br><span class="line">    String[] isolatedEntryPointArgs; <span class="comment">// Arguments to pass to isolatedEntryPoint&#x27;s main().</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> execServicesFg;     <span class="comment">// do we need to be executing services in the foreground?</span></span><br><span class="line">    <span class="keyword">boolean</span> persistent;         <span class="comment">// always keep this application running?</span></span><br><span class="line">    <span class="keyword">boolean</span> crashing;           <span class="comment">// are we in the process of crashing?</span></span><br><span class="line">    Dialog crashDialog;         <span class="comment">// dialog being displayed due to crash.</span></span><br><span class="line">    <span class="keyword">boolean</span> forceCrashReport;   <span class="comment">// suppress normal auto-dismiss of crash dialog &amp; report UI?</span></span><br><span class="line">    <span class="keyword">boolean</span> notResponding;      <span class="comment">// does the app have a not responding dialog?</span></span><br><span class="line">    Dialog anrDialog;           <span class="comment">// dialog being displayed due to app not resp.</span></span><br><span class="line">    <span class="keyword">boolean</span> removed;            <span class="comment">// has app package been removed from device?</span></span><br><span class="line">    <span class="keyword">boolean</span> debugging;          <span class="comment">// was app launched for debugging?</span></span><br><span class="line">    <span class="keyword">boolean</span> waitedForDebugger;  <span class="comment">// has process show wait for debugger dialog?</span></span><br><span class="line">    Dialog waitDialog;          <span class="comment">// current wait for debugger dialog</span></span><br><span class="line"></span><br><span class="line">    String shortStringName;     <span class="comment">// caching of toShortString() result.</span></span><br><span class="line">    String stringName;          <span class="comment">// caching of toString() result.</span></span><br><span class="line">    <span class="keyword">boolean</span> pendingStart;       <span class="comment">// Process start is pending.</span></span><br><span class="line">    <span class="keyword">long</span> startSeq;              <span class="comment">// Seq no. indicating the latest process start associated with</span></span><br><span class="line">                                <span class="comment">// this process record.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// These reports are generated &amp; stored when an app gets into an error condition.</span></span><br><span class="line">    <span class="comment">// They will be &quot;null&quot; when all is OK.</span></span><br><span class="line">    ActivityManager.ProcessErrorStateInfo crashingReport;</span><br><span class="line">    ActivityManager.ProcessErrorStateInfo notRespondingReport;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Who will be notified of the error. This is usually an activity in the</span></span><br><span class="line">    <span class="comment">// app that installed the package.</span></span><br><span class="line">    ComponentName errorReportReceiver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process is currently hosting a backup agent for backup or restore</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> inFullBackup;</span><br><span class="line">    <span class="comment">// App is allowed to manage whitelists such as temporary Power Save mode whitelist.</span></span><br><span class="line">    <span class="keyword">boolean</span> whitelistManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Params used in starting this process.</span></span><br><span class="line">    String hostingType;</span><br><span class="line">    String hostingNameStr;</span><br><span class="line">    String seInfo;</span><br><span class="line">    <span class="keyword">long</span> startTime;</span><br><span class="line">    <span class="comment">// This will be same as &#123;@link #uid&#125; usually except for some apps used during factory testing.</span></span><br><span class="line">    <span class="keyword">int</span> startUid;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>BatteryStats</td><td>电量统计的接口</td></tr><tr><td>ApplicationInfo</td><td>系统进程的ApplicationInfo是从android包中解析出来的数据; 应用程序的ApplicationInfo是从AndroidManifest.xml中解析出来的数据</td></tr><tr><td>Process Name</td><td>进程名称</td></tr><tr><td>UID</td><td>进程的UID。系统进程的UID是1000(Process.SYSTEM_UID); 应用进程的UID是从10000(Process.FIRST_APPLICATION_UID)开始分配的</td></tr><tr><td>maxAdj, curAdj, setAdj</td><td>各种不同的OOM Adjustment值</td></tr><tr><td>lastPss， lastPssTime</td><td>物理内存(PSS)相关，进程中有对象创建或销毁时，PSS相关的属性会被更新。</td></tr><tr><td>activities, services, receivers</td><td>进程中的Android组件，随着进程的运行，这些信息都可能需要更新。譬如Activity的启动时，ProcessRecord.activies会增加一个实例; 销毁时，对将对应的实例从activities删除</td></tr><tr><td>pkgList</td><td>进程中运行的包</td></tr><tr><td>thread</td><td>该属性是IApplicationThread类型的对象</td></tr></tbody></table><p>ProcessRecord有“激活(Active)”和“非激活(Inactive)”两种状态，只有将ProcessRecord绑定到一个实际进程的时候，才是激活状态。 绑定成功后，thread属性就被赋值，表示ProcessRecord已经激活。 激活后，AMS就可以通过这个接口完成对应用进程的管理，譬如启动Activity、派发广播等</p><table><thead><tr><th>行为</th><th>描述</th></tr></thead><tbody><tr><td>makeActive()</td><td>将ProcessRecord置成激活状态</td></tr><tr><td>makeInactive()</td><td>将ProcessRecord置成非激活状态</td></tr><tr><td>addPackage()</td><td>向ProcessRecord添加包</td></tr></tbody></table><h1 id="整体关系"><a href="#整体关系" class="headerlink" title="整体关系"></a>整体关系</h1><p>MS运行在SystemServer进程中。SystemServer进程启动时，会通过SystemServer.startBootstrapServices()来创建一个AMS的对象;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startBootstrapServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    mActivityManagerService = mSystemServiceManager.startService(</span><br><span class="line">        ActivityManagerService.Lifecycle.class).getService();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AMS通过ActivityStackSupervisor来管理Activity。AMS对象只会存在一个，在初始化的时候，会创建一个唯一的ActivityStackSupervisor对象;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ActivityManagerService</span><span class="params">(Context systemContext)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    mStackSupervisor = createStackSupervisor();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ActivityStackSupervisor <span class="title">createStackSupervisor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityStackSupervisor supervisor = <span class="keyword">new</span> ActivityStackSupervisor(<span class="keyword">this</span>, mHandler.getLooper());</span><br><span class="line">        supervisor.initialize();</span><br><span class="line">        <span class="keyword">return</span> supervisor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>ActivityStackSupervisor中维护了显示设备的信息。当有新的显示设备添加时，会创建一个新的ActivityDisplay对象;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">createStackOnDisplay</span><span class="params">(<span class="keyword">int</span> displayId)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    enforceCallingPermission(MANAGE_ACTIVITY_STACKS, <span class="string">&quot;createStackOnDisplay()&quot;</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityDisplay display =</span><br><span class="line">            mStackSupervisor.getActivityDisplayOrCreateLocked(displayId);</span><br><span class="line">        <span class="keyword">if</span> (display == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> INVALID_STACK_ID;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// TODO(multi-display): Have the caller pass in the windowing mode and activity type.</span></span><br><span class="line">        <span class="keyword">final</span> ActivityStack stack = display.createStack(</span><br><span class="line">            WINDOWING_MODE_FULLSCREEN_OR_SPLIT_SCREEN_SECONDARY, ACTIVITY_TYPE_STANDARD,</span><br><span class="line">            ON_TOP);</span><br><span class="line">        <span class="keyword">return</span> (stack != <span class="keyword">null</span>) ? stack.mStackId : INVALID_STACK_ID;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AMS维护了所有进程的信息ProcessRecord。当需要创建一个新的进程时， 会通过AMS.newProcessRecordLocked()函数来创建一个ProcessRecord对象， ProcessRecord对象都保存在AMS.mPidsSelfLocked这个属性中;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> ProcessRecord <span class="title">newProcessRecordLocked</span><span class="params">(ApplicationInfo info, String customProcess,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> isolated, <span class="keyword">int</span> isolatedUid)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ProcessRecord(stats, info, proc, uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过ActivityStackSupervisor来创建ActivityRecord。当SystemServer进程收到来自应用进程的启动Activity请求时， 会通过ActivityStackSupervisor来创建一个ActivityRecord对象;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityLocked</span><span class="params">(IApplicationThread caller, ...)</span> </span>&#123;</span><br><span class="line">   ...</span><br><span class="line">   ActivityRecord r  = <span class="keyword">new</span> ActivityRecord(mService, callerApp, callingUid, callingPackage,</span><br><span class="line">           intent, resolvedType, aInfo, mService.mConfiguration, resultRecord, resultWho,</span><br><span class="line">           requestCode, componentSpecified, <span class="keyword">this</span>, container, options);</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在ActivityStack上创建TaskRecord。当需要创建新的任务栈时，就会通过ActivityStack对象来创建一个TaskRecord对象， 这样就建立了ActivityStack和TaskRecord的关联;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TaskRecord <span class="title">createTaskRecord</span><span class="params">(<span class="keyword">int</span> taskId, ActivityInfo info, Intent intent,</span></span></span><br><span class="line"><span class="function"><span class="params">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> toTop)</span> </span>&#123;</span><br><span class="line">    TaskRecord task = <span class="keyword">new</span> TaskRecord(mService, taskId, info, intent, voiceSession,</span><br><span class="line">            voiceInteractor);</span><br><span class="line">    addTask(task, toTop, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">return</span> task;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ActivityRecord的宿主TaskRecord。每一个ActivityRecord都需要找到自己的宿主TaskRecord，通过ActivityRecord.setTask()函数 就能建立ActivityRecord和TaskRecord的关联;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTask</span><span class="params">(TaskRecord newTask, TaskRecord taskToAffiliateWith)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    task = newTask;</span><br><span class="line">    setTaskToAffiliateWith(taskToAffiliateWith);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进程中运行的Activity信息。Activity在应用进程中运行，AMS中记录了进程中所有运行的Activity的信息，在ActivityRecord创建后， 会通过ProcessRecord.addPackage()函数，在ProcessRecord中登记ActivityRecord的信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startSpecificActivityLocked</span><span class="params">(ActivityRecord r,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> andResume, <span class="keyword">boolean</span> checkConfig)</span> </span>&#123;</span><br><span class="line">    ProcessRecord app = mService.getProcessRecordLocked(r.processName,</span><br><span class="line">            r.info.applicationInfo.uid, <span class="keyword">true</span>);</span><br><span class="line">    ...</span><br><span class="line">    app.addPackage(r.info.packageName, r.info.applicationInfo.versionCode,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p><a href="https://www.cnblogs.com/krislight1105/tag/ActivityStackSupervisor/">https://www.cnblogs.com/krislight1105/tag/ActivityStackSupervisor/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/AMS-ActivityStack/v2-86a554a0bbecdf13fa70feaa373bf164_720w.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/AMS-ActivityStack/1</summary>
      
    
    
    
    <category term="AMS" scheme="http://example.com/categories/AMS/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>log框架总述</title>
    <link href="http://example.com/2020/12/11/log%E6%A1%86%E6%9E%B6%E6%80%BB%E8%BF%B0/"/>
    <id>http://example.com/2020/12/11/log%E6%A1%86%E6%9E%B6%E6%80%BB%E8%BF%B0/</id>
    <published>2020-12-11T02:29:17.000Z</published>
    <updated>2020-12-16T10:51:52.180Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/log%E6%A1%86%E6%9E%B6%E6%80%BB%E8%BF%B0/image-20201211111818579.png" alt="image-20201211111818579"></p><p>早期版本写log到设备节点</p><p><img src="/images/log%E6%A1%86%E6%9E%B6%E6%80%BB%E8%BF%B0/Android-logging-kmc-kobayashi.png" alt="File:Android-logging-kmc-kobayashi.png"></p><p>新版本android9写log到logd进程的buffer</p><p><img src="/images/log%E6%A1%86%E6%9E%B6%E6%80%BB%E8%BF%B0/20200210103856594.png" alt="img"></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://elinux.org/Android_Logging_System">https://elinux.org/Android_Logging_System</a></p><p><a href="https://jekton.github.io/2018/05/11/logd-overview/">https://jekton.github.io/2018/05/11/logd-overview/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/log%E6%A1%86%E6%9E%B6%E6%80%BB%E8%BF%B0/image-20201211111818579.png&quot; alt=&quot;image-20201211111818579&quot;&gt;&lt;/p&gt;
&lt;p&gt;早期版本写log到设备节</summary>
      
    
    
    
    <category term="logd进程" scheme="http://example.com/categories/logd%E8%BF%9B%E7%A8%8B/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>logd-01</title>
    <link href="http://example.com/2020/12/11/logd-01-1/"/>
    <id>http://example.com/2020/12/11/logd-01-1/</id>
    <published>2020-12-11T02:27:36.000Z</published>
    <updated>2020-12-11T02:27:36.362Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
