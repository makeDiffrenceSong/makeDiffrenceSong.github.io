<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Make a difference</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-12-15T09:05:52.260Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>SongSong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>androidP-VNDK</title>
    <link href="http://example.com/2020/12/15/androidP-VNDK/"/>
    <id>http://example.com/2020/12/15/androidP-VNDK/</id>
    <published>2020-12-15T07:44:42.000Z</published>
    <updated>2020-12-15T09:05:52.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="liblog中新增一个buffer-id"><a href="#liblog中新增一个buffer-id" class="headerlink" title="liblog中新增一个buffer id"></a>liblog中新增一个buffer id</h1><p>新增的patch如下：</p><figure class="highlight patch"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/liblog/include/android/log.h b/liblog/include/android/log.h</span><br><span class="line">old mode 100644</span><br><span class="line">new mode 100755</span><br><span class="line">index 28c87e4..0f325c0</span><br><span class="line"><span class="comment">--- a/liblog/include/android/log.h</span></span><br><span class="line"><span class="comment">+++ b/liblog/include/android/log.h</span></span><br><span class="line">@@ -183,7 +183,8 @@ typedef enum log_id &#123;</span><br><span class="line">   LOG_ID_CRASH = 4,</span><br><span class="line">   LOG_ID_STATS = 5,</span><br><span class="line">   LOG_ID_SECURITY = 6,</span><br><span class="line"><span class="deletion">-  LOG_ID_KERNEL = 7, /* place last, third-parties can not use it */</span></span><br><span class="line"><span class="addition">+  LOG_ID_VIP = 7,</span></span><br><span class="line"><span class="addition">+  LOG_ID_KERNEL = 8, /* place last, third-parties can not use it */</span></span><br><span class="line"> </span><br><span class="line">   LOG_ID_MAX</span><br><span class="line"> &#125; log_id_t;</span><br><span class="line">diff --git a/liblog/include/log/log.h b/liblog/include/log/log.h</span><br><span class="line">old mode 100644</span><br><span class="line">new mode 100755</span><br><span class="line">index 3813e6e..c6ee7a8</span><br><span class="line"><span class="comment">--- a/liblog/include/log/log.h</span></span><br><span class="line"><span class="comment">+++ b/liblog/include/log/log.h</span></span><br><span class="line"><span class="meta">@@ -34,6 +34,7 @@</span></span><br><span class="line"> #include &lt;log/log_read.h&gt;</span><br><span class="line"> #include &lt;log/log_safetynet.h&gt;</span><br><span class="line"> #include &lt;log/log_system.h&gt;</span><br><span class="line"><span class="addition">+#include &lt;log/log_vip.h&gt;</span></span><br><span class="line"> #include &lt;log/log_time.h&gt;</span><br><span class="line"> #include &lt;log/uio.h&gt; /* helper to define iovec for portability */</span><br><span class="line"> </span><br><span class="line">diff --git a/liblog/include/log/log_id.h b/liblog/include/log/log_id.h</span><br><span class="line">old mode 100644</span><br><span class="line">new mode 100755</span><br><span class="line">index c44f5a2..4647d71</span><br><span class="line"><span class="comment">--- a/liblog/include/log/log_id.h</span></span><br><span class="line"><span class="comment">+++ b/liblog/include/log/log_id.h</span></span><br><span class="line">@@ -33,7 +33,10 @@ typedef enum log_id &#123;</span><br><span class="line">   LOG_ID_CRASH = 4,</span><br><span class="line">   LOG_ID_STATS = 5,</span><br><span class="line">   LOG_ID_SECURITY = 6,</span><br><span class="line"><span class="deletion">-  LOG_ID_KERNEL = 7, /* place last, third-parties can not use it */</span></span><br><span class="line"><span class="addition">+  LOG_ID_VIP = 7,</span></span><br><span class="line"><span class="addition">+  LOG_ID_KERNEL = 8, /* place last, third-parties can not use it */</span></span><br><span class="line"><span class="addition">+  </span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"> </span><br><span class="line">   LOG_ID_MAX</span><br><span class="line"> &#125; log_id_t;</span><br><span class="line">diff --git a/liblog/include/log/log_vip.h b/liblog/include/log/log_vip.h</span><br><span class="line">new file mode 100755</span><br><span class="line">index 0000000..9123a49</span><br><span class="line"><span class="comment">--- /dev/null</span></span><br><span class="line"><span class="comment">+++ b/liblog/include/log/log_vip.h</span></span><br><span class="line"><span class="meta">@@ -0,0 +1,61 @@</span></span><br><span class="line"><span class="addition">+/*</span></span><br><span class="line"><span class="addition">+ * Copyright (C) 2005-2017 The Android Open Source Project</span></span><br><span class="line"><span class="addition">+ *</span></span><br><span class="line"><span class="addition">+ * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="addition">+ * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="addition">+ * You may obtain a copy of the License at</span></span><br><span class="line"><span class="addition">+ *</span></span><br><span class="line"><span class="addition">+ *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="addition">+ *</span></span><br><span class="line"><span class="addition">+ * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="addition">+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="addition">+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="addition">+ * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="addition">+ * limitations under the License.</span></span><br><span class="line"><span class="addition">+ */</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef _LIBS_LOG_LOG_VIP_H</span></span><br><span class="line"><span class="addition">+#define _LIBS_LOG_LOG_VIP_H</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#include &lt;android/log.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;log/log_id.h&gt;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+/*</span></span><br><span class="line"><span class="addition">+ * Normally we strip the effects of ALOGV (VERBOSE messages),</span></span><br><span class="line"><span class="addition">+ * LOG_FATAL and LOG_FATAL_IF (FATAL assert messages) from the</span></span><br><span class="line"><span class="addition">+ * release builds be defining NDEBUG.  You can modify this (for</span></span><br><span class="line"><span class="addition">+ * example with &quot;#define LOG_NDEBUG 0&quot; at the top of your source</span></span><br><span class="line"><span class="addition">+ * file) to change that behavior.</span></span><br><span class="line"><span class="addition">+ */</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef LOG_NDEBUG</span></span><br><span class="line"><span class="addition">+#ifdef NDEBUG</span></span><br><span class="line"><span class="addition">+#define LOG_NDEBUG 1</span></span><br><span class="line"><span class="addition">+#else</span></span><br><span class="line"><span class="addition">+#define LOG_NDEBUG 0</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef __predict_false</span></span><br><span class="line"><span class="addition">+#define __predict_false(exp) __builtin_expect((exp) != 0, 0)</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+/*</span></span><br><span class="line"><span class="addition">+ * Simplified macro to send an error dtc VIP message using current LOG_TAG.</span></span><br><span class="line"><span class="addition">+ */</span></span><br><span class="line"><span class="addition">+#ifndef VLOGI</span></span><br><span class="line"><span class="addition">+#define VLOGI(...)                                                          \</span></span><br><span class="line"><span class="addition">+  ((void)__android_log_buf_print(LOG_ID_VIP, ANDROID_LOG_ERROR, LOG_TAG, \</span></span><br><span class="line"><span class="addition">+                                 __VA_ARGS__))</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef VLOGI_IF</span></span><br><span class="line"><span class="addition">+#define VLOGI_IF(cond, ...)                                               \</span></span><br><span class="line"><span class="addition">+  ((__predict_false(cond))                                                \</span></span><br><span class="line"><span class="addition">+       ? ((void)__android_log_buf_print(LOG_ID_VIP, ANDROID_LOG_ERROR, \</span></span><br><span class="line"><span class="addition">+                                        LOG_TAG, __VA_ARGS__))            \</span></span><br><span class="line"><span class="addition">+       : (void)0)</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#endif /* _LIBS_LOG_LOG_VIP_H */</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">diff --git a/liblog/include_vndk/log/log.h b/liblog/include_vndk/log/log.h</span><br><span class="line">old mode 100644</span><br><span class="line">new mode 100755</span><br><span class="line">index a79beec..07a50aa</span><br><span class="line"><span class="comment">--- a/liblog/include_vndk/log/log.h</span></span><br><span class="line"><span class="comment">+++ b/liblog/include_vndk/log/log.h</span></span><br><span class="line"><span class="meta">@@ -10,6 +10,7 @@</span></span><br><span class="line"> #include &lt;log/log_read.h&gt;</span><br><span class="line"> #include &lt;log/log_safetynet.h&gt;</span><br><span class="line"> #include &lt;log/log_system.h&gt;</span><br><span class="line"><span class="addition">+#include &lt;log/log_vip.h&gt;</span></span><br><span class="line"> #include &lt;log/log_time.h&gt;</span><br><span class="line"> </span><br><span class="line"> /*</span><br><span class="line">diff --git a/liblog/include_vndk/log/log_vip.h b/liblog/include_vndk/log/log_vip.h</span><br><span class="line">new file mode 100755</span><br><span class="line">index 0000000..9123a49</span><br><span class="line"><span class="comment">--- /dev/null</span></span><br><span class="line"><span class="comment">+++ b/liblog/include_vndk/log/log_vip.h</span></span><br><span class="line"><span class="meta">@@ -0,0 +1,61 @@</span></span><br><span class="line"><span class="addition">+/*</span></span><br><span class="line"><span class="addition">+ * Copyright (C) 2005-2017 The Android Open Source Project</span></span><br><span class="line"><span class="addition">+ *</span></span><br><span class="line"><span class="addition">+ * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="addition">+ * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="addition">+ * You may obtain a copy of the License at</span></span><br><span class="line"><span class="addition">+ *</span></span><br><span class="line"><span class="addition">+ *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="addition">+ *</span></span><br><span class="line"><span class="addition">+ * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="addition">+ * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="addition">+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="addition">+ * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="addition">+ * limitations under the License.</span></span><br><span class="line"><span class="addition">+ */</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef _LIBS_LOG_LOG_VIP_H</span></span><br><span class="line"><span class="addition">+#define _LIBS_LOG_LOG_VIP_H</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#include &lt;android/log.h&gt;</span></span><br><span class="line"><span class="addition">+#include &lt;log/log_id.h&gt;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+/*</span></span><br><span class="line"><span class="addition">+ * Normally we strip the effects of ALOGV (VERBOSE messages),</span></span><br><span class="line"><span class="addition">+ * LOG_FATAL and LOG_FATAL_IF (FATAL assert messages) from the</span></span><br><span class="line"><span class="addition">+ * release builds be defining NDEBUG.  You can modify this (for</span></span><br><span class="line"><span class="addition">+ * example with &quot;#define LOG_NDEBUG 0&quot; at the top of your source</span></span><br><span class="line"><span class="addition">+ * file) to change that behavior.</span></span><br><span class="line"><span class="addition">+ */</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef LOG_NDEBUG</span></span><br><span class="line"><span class="addition">+#ifdef NDEBUG</span></span><br><span class="line"><span class="addition">+#define LOG_NDEBUG 1</span></span><br><span class="line"><span class="addition">+#else</span></span><br><span class="line"><span class="addition">+#define LOG_NDEBUG 0</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef __predict_false</span></span><br><span class="line"><span class="addition">+#define __predict_false(exp) __builtin_expect((exp) != 0, 0)</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+/*</span></span><br><span class="line"><span class="addition">+ * Simplified macro to send an error dtc VIP message using current LOG_TAG.</span></span><br><span class="line"><span class="addition">+ */</span></span><br><span class="line"><span class="addition">+#ifndef VLOGI</span></span><br><span class="line"><span class="addition">+#define VLOGI(...)                                                          \</span></span><br><span class="line"><span class="addition">+  ((void)__android_log_buf_print(LOG_ID_VIP, ANDROID_LOG_ERROR, LOG_TAG, \</span></span><br><span class="line"><span class="addition">+                                 __VA_ARGS__))</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef VLOGI_IF</span></span><br><span class="line"><span class="addition">+#define VLOGI_IF(cond, ...)                                               \</span></span><br><span class="line"><span class="addition">+  ((__predict_false(cond))                                                \</span></span><br><span class="line"><span class="addition">+       ? ((void)__android_log_buf_print(LOG_ID_VIP, ANDROID_LOG_ERROR, \</span></span><br><span class="line"><span class="addition">+                                        LOG_TAG, __VA_ARGS__))            \</span></span><br><span class="line"><span class="addition">+       : (void)0)</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#endif /* _LIBS_LOG_LOG_VIP_H */</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">diff --git a/liblog/logger_name.c b/liblog/logger_name.c</span><br><span class="line">old mode 100644</span><br><span class="line">new mode 100755</span><br><span class="line">index 479bbfe..e20edb0</span><br><span class="line"><span class="comment">--- a/liblog/logger_name.c</span></span><br><span class="line"><span class="comment">+++ b/liblog/logger_name.c</span></span><br><span class="line">@@ -31,6 +31,7 @@ static const char* LOG_NAME[LOG_ID_MAX] = &#123;</span><br><span class="line">   [LOG_ID_STATS] = &quot;stats&quot;,</span><br><span class="line">   [LOG_ID_SECURITY] = &quot;security&quot;,</span><br><span class="line">   [LOG_ID_KERNEL] = &quot;kernel&quot;,</span><br><span class="line"><span class="addition">+  [LOG_ID_VIP] = &quot;vip&quot;,</span></span><br><span class="line">   /* clang-format on */</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h1 id="1-编译报错"><a href="#1-编译报错" class="headerlink" title="1.编译报错"></a>1.编译报错</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">gacrnd@gacrnd:~/<span class="title">songlingjie</span>/<span class="title">AndroidP</span>/<span class="title">AOSP</span>$ <span class="title">make</span> <span class="title">systemimage</span></span></span><br><span class="line"><span class="function">============================================</span></span><br><span class="line"><span class="function"><span class="title">PLATFORM_VERSION_CODENAME</span>=<span class="title">REL</span></span></span><br><span class="line"><span class="function"><span class="title">PLATFORM_VERSION</span>=9</span></span><br><span class="line"><span class="function"><span class="title">TARGET_PRODUCT</span>=<span class="title">aosp_car_x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_BUILD_VARIANT</span>=<span class="title">userdebug</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_BUILD_TYPE</span>=<span class="title">release</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_ARCH_VARIANT</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_2ND_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_2ND_ARCH_VARIANT</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_2ND_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_OS</span>=<span class="title">linux</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_OS_EXTRA</span>=<span class="title">Linux</span>-5.4.0-53-<span class="title">generic</span>-<span class="title">x86_64</span>-<span class="title">Ubuntu</span>-18.04.4-<span class="title">LTS</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_OS</span>=<span class="title">windows</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_2ND_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_BUILD_TYPE</span>=<span class="title">release</span></span></span><br><span class="line"><span class="function"><span class="title">BUILD_ID</span>=<span class="title">PQ2A</span>.190205.003</span></span><br><span class="line"><span class="function"><span class="title">OUT_DIR</span>=<span class="title">out</span></span></span><br><span class="line"><span class="function">============================================</span></span><br><span class="line"><span class="function"><span class="title">ninja</span>: <span class="title">no</span> <span class="title">work</span> <span class="title">to</span> <span class="title">do</span>.</span></span><br><span class="line"><span class="function"><span class="title">ninja</span>: <span class="title">no</span> <span class="title">work</span> <span class="title">to</span> <span class="title">do</span>.</span></span><br><span class="line"><span class="function"><span class="title">No</span> <span class="title">need</span> <span class="title">to</span> <span class="title">regenerate</span> <span class="title">ninja</span> <span class="title">file</span></span></span><br><span class="line"><span class="function"><span class="title">No</span> <span class="title">need</span> <span class="title">to</span> <span class="title">regenerate</span> <span class="title">ninja</span> <span class="title">file</span></span></span><br><span class="line"><span class="function">[  0% 35/7293] //<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog:liblog</span> <span class="title">header</span>-<span class="title">abi</span>-<span class="title">diff</span> <span class="title">liblog.so.abidiff</span></span></span><br><span class="line"><span class="function"><span class="title">FAILED</span>: <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">intermediates</span>/<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog</span>/<span class="title">liblog</span>/<span class="title">android_x86_64_core_shared</span>/<span class="title">liblog.so.abidiff</span> </span></span><br><span class="line"><span class="function">(<span class="title">prebuilts</span>/<span class="title">clang</span>-<span class="title">tools</span>/<span class="title">linux</span>-<span class="title">x86</span>/<span class="title">bin</span>/<span class="title">header</span>-<span class="title">abi</span>-<span class="title">diff</span> -<span class="title">allow</span>-<span class="title">unreferenced</span>-<span class="title">changes</span> -<span class="title">allow</span>-<span class="title">unreferenced</span>-<span class="title">elf</span>-<span class="title">symbol</span>-<span class="title">changes</span> -<span class="title">lib</span> <span class="title">liblog</span> -<span class="title">arch</span> <span class="title">x86_64</span> -<span class="title">o</span> <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">intermediates</span>/<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog</span>/<span class="title">liblog</span>/<span class="title">android_x86_64_core_shared</span>/<span class="title">liblog.so.abidiff</span> -<span class="title">new</span> <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">intermediates</span>/<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog</span>/<span class="title">liblog</span>/<span class="title">android_x86_64_core_shared</span>/<span class="title">liblog.so.lsdump</span> -<span class="title">old</span> <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">intermediates</span>/<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog</span>/<span class="title">liblog</span>/<span class="title">android_x86_64_core_shared</span>/<span class="title">liblog.so_ref.lsdump</span>)|| (<span class="title">echo</span> &#x27; ---- <span class="title">Please</span> <span class="title">update</span> <span class="title">abi</span> <span class="title">references</span> <span class="title">by</span> <span class="title">running</span> <span class="title">platform</span>/<span class="title">development</span>/<span class="title">vndk</span>/<span class="title">tools</span>/<span class="title">header</span>-<span class="title">checker</span>/<span class="title">utils</span>/<span class="title">create_reference_dumps.py</span> -<span class="title">l</span> <span class="title">liblog</span> ----&#x27; &amp;&amp; <span class="title">exit</span> 1)</span></span><br><span class="line"><span class="function">******************************************************</span></span><br><span class="line"><span class="function"><span class="title">error</span>: <span class="title">VNDK</span> <span class="title">library</span>: <span class="title">liblog</span>&#x27;<span class="title">s</span> <span class="title">ABI</span> <span class="title">has</span> <span class="title">INCOMPATIBLE</span> <span class="title">CHANGES</span> <span class="title">Please</span> <span class="title">check</span> <span class="title">compatiblity</span> <span class="title">report</span> <span class="title">at</span> : <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">intermediates</span>/<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog</span>/<span class="title">liblog</span>/<span class="title">android_x86_64_core_shared</span>/<span class="title">liblog.so.abidiff</span></span></span><br><span class="line"><span class="function">******************************************************</span></span><br><span class="line"><span class="function"> ---- <span class="title">Please</span> <span class="title">update</span> <span class="title">abi</span> <span class="title">references</span> <span class="title">by</span> <span class="title">running</span> <span class="title">platform</span>/<span class="title">development</span>/<span class="title">vndk</span>/<span class="title">tools</span>/<span class="title">header</span>-<span class="title">checker</span>/<span class="title">utils</span>/<span class="title">create_reference_dumps.py</span> -<span class="title">l</span> <span class="title">liblog</span> ----</span></span><br><span class="line"><span class="function">[  0% 44/7293] //<span class="title">frameworks</span>/<span class="title">compile</span>/<span class="title">libbcc</span>/<span class="title">lib:libbcc</span> <span class="title">link</span> <span class="title">libbcc.so</span></span></span><br><span class="line"><span class="function"><span class="title">ninja</span>: <span class="title">build</span> <span class="title">stopped</span>: <span class="title">subcommand</span> <span class="title">failed</span>.</span></span><br><span class="line"><span class="function">15:06:41 <span class="title">ninja</span> <span class="title">failed</span> <span class="title">with</span>: <span class="title">exit</span> <span class="title">status</span> 1</span></span><br></pre></td></tr></table></figure><p>在liblog中新增一个buffer id,编译时报错</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">error: <span class="title">VNDK</span> <span class="title">library</span>: <span class="title">liblog</span>&#x27;<span class="title">s</span> <span class="title">ABI</span> <span class="title">has</span> <span class="title">INCOMPATIBLE</span> <span class="title">CHANGES</span> <span class="title">Please</span> <span class="title">check</span> <span class="title">compatiblity</span> <span class="title">report</span> <span class="title">at</span> : <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">intermediates</span>/<span class="title">system</span>/<span class="title">core</span>/<span class="title">liblog</span>/<span class="title">liblog</span>/<span class="title">android_x86_64_core_shared</span>/<span class="title">liblog.so.abidiff</span></span></span><br></pre></td></tr></table></figure><h1 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2.问题原因</h1><p>不是新增源码的问题，而是VNDK的问题</p><p>VNDK(Vendor Native Development Kit)是一组专门用于vendor实现其HAL的lib库，因为自Android 8.0以来，Google引入了Treble架构，希望对vendor和system分区进行解耦处理，期待实现：framwork进程不加载vendor共享库，vendor进程仅加载vendor共享库（和部分framework共享库），而framework进程和vendor进程之间通过HIDL和hwbinder来通信。总结为如下几点：</p><ul><li>platform和Vendor的构建是相互隔离的；</li><li>platform lib对应 system.img；</li><li>vendor lib对应 vendor.img；</li><li>大多数情况下，Vendor lib跟系统核心不能相互使用；Vendor lib不允许dlopen私有的系统库；</li><li>合作伙伴不允许为自己的产品在VNDK新增lib，只能贡献到AOSP；</li></ul><p><img src="/images/androidP-VNDK/20200429110934727.png" alt="img"><br>关于VNDK的具体介绍可以参见如下博客：<br><a href="https://source.android.google.cn/devices/architecture/vndk/abi-stability?hl=zh-tw">ABI 稳定性</a><br><a href="https://www.cnblogs.com/blogs-of-lxl/p/11232754.html">Android : 供应商原生开发套件 (VNDK)</a><br><a href="https://source.android.google.cn/devices/architecture/vndk">供应商原生开发套件 (VNDK)</a></p><h2 id="2-1报错代码位置"><a href="#2-1报错代码位置" class="headerlink" title="2.1报错代码位置"></a>2.1报错代码位置</h2><p>在代码中搜索，发现 development/vndk/tools/header-checker/header-abi-diff/src 中的 header_abi_diff.cpp 报出的错误。错误提示如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">.........</span><br><span class="line"><span class="keyword">bool</span> should_emit_warning_message = ShouldEmitWarningMessage(status);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (should_emit_warning_message) &#123;</span><br><span class="line">    llvm::errs() &lt;&lt; <span class="string">&quot;******************************************************\n&quot;</span></span><br><span class="line">                 &lt;&lt; error_or_warning_str</span><br><span class="line">                 &lt;&lt; <span class="string">&quot;VNDK library: &quot;</span></span><br><span class="line">                 &lt;&lt; lib_name</span><br><span class="line">                 &lt;&lt; <span class="string">&quot;&#x27;s ABI has &quot;</span></span><br><span class="line">                 &lt;&lt; status_str</span><br><span class="line">                 &lt;&lt; unreferenced_change_str</span><br><span class="line">                 &lt;&lt; <span class="string">&quot; Please check compatiblity report at : &quot;</span></span><br><span class="line">                 &lt;&lt; compatibility_report &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 &lt;&lt; <span class="string">&quot;******************************************************\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!advice_only &amp;&amp; should_emit_warning_message) &#123;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> abi_util::CompatibilityStatusIR::Compatible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3.解决方案"></a>3.解决方案</h1><p>直接修改代码，让里面的 main 直接返回 abi_util::CompatibilityStatusIR::Compatible; </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">      ........</span><br><span class="line">      <span class="keyword">bool</span> should_emit_warning_message = ShouldEmitWarningMessage(status);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (should_emit_warning_message) &#123;</span><br><span class="line">        <span class="comment">/*llvm::errs() &lt;&lt; &quot;******************************************************\n&quot;</span></span><br><span class="line"><span class="comment">                     &lt;&lt; error_or_warning_str</span></span><br><span class="line"><span class="comment">                     &lt;&lt; &quot;VNDK library: &quot;</span></span><br><span class="line"><span class="comment">                     &lt;&lt; lib_name</span></span><br><span class="line"><span class="comment">                     &lt;&lt; &quot;&#x27;s ABI has &quot;</span></span><br><span class="line"><span class="comment">                     &lt;&lt; status_str</span></span><br><span class="line"><span class="comment">                     &lt;&lt; unreferenced_change_str</span></span><br><span class="line"><span class="comment">                     &lt;&lt; &quot; Please check compatiblity report at : &quot;</span></span><br><span class="line"><span class="comment">                     &lt;&lt; compatibility_report &lt;&lt; &quot;\n&quot;</span></span><br><span class="line"><span class="comment">                     &lt;&lt; &quot;******************************************************\n&quot;;*/</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      if (!advice_only &amp;&amp; should_emit_warning_message) &#123;</span></span><br><span class="line"><span class="comment">        return status;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> abi_util::CompatibilityStatusIR::Compatible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4-编译"><a href="#4-编译" class="headerlink" title="4.编译"></a>4.编译</h1><h2 id="4-1编译header-checker"><a href="#4-1编译header-checker" class="headerlink" title="4.1编译header-checker"></a>4.1编译header-checker</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">gacrnd@gacrnd:~/<span class="title">songlingjie</span>/<span class="title">AndroidP</span>/<span class="title">AOSP</span>$ <span class="title">mmm</span> <span class="title">development</span>/<span class="title">vndk</span>/<span class="title">tools</span>/<span class="title">header</span>-<span class="title">checker</span>/ -<span class="title">j32</span></span></span><br><span class="line"><span class="function">============================================</span></span><br><span class="line"><span class="function"><span class="title">PLATFORM_VERSION_CODENAME</span>=<span class="title">REL</span></span></span><br><span class="line"><span class="function"><span class="title">PLATFORM_VERSION</span>=9</span></span><br><span class="line"><span class="function"><span class="title">TARGET_PRODUCT</span>=<span class="title">aosp_car_x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_BUILD_VARIANT</span>=<span class="title">userdebug</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_BUILD_TYPE</span>=<span class="title">release</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_ARCH_VARIANT</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_2ND_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_2ND_ARCH_VARIANT</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_2ND_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_OS</span>=<span class="title">linux</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_OS_EXTRA</span>=<span class="title">Linux</span>-5.4.0-53-<span class="title">generic</span>-<span class="title">x86_64</span>-<span class="title">Ubuntu</span>-18.04.4-<span class="title">LTS</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_OS</span>=<span class="title">windows</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_2ND_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_BUILD_TYPE</span>=<span class="title">release</span></span></span><br><span class="line"><span class="function"><span class="title">BUILD_ID</span>=<span class="title">PQ2A</span>.190205.003</span></span><br><span class="line"><span class="function"><span class="title">OUT_DIR</span>=<span class="title">out</span></span></span><br><span class="line"><span class="function">============================================</span></span><br><span class="line"><span class="function"><span class="title">ninja</span>: <span class="title">no</span> <span class="title">work</span> <span class="title">to</span> <span class="title">do</span>.</span></span><br><span class="line"><span class="function">[1/1] <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">bootstrap</span>/<span class="title">bin</span>/<span class="title">soong_build</span> <span class="title">out</span>/<span class="title">soong</span>/<span class="title">build.ninja</span></span></span><br><span class="line"><span class="function"><span class="title">out</span>/<span class="title">build</span>-6<span class="title">a3b3b02de52311720105cf509e4ece0</span>-<span class="title">cleanspec.ninja</span> <span class="title">is</span> <span class="title">missing</span>, <span class="title">regenerating</span>...</span></span><br><span class="line"><span class="function"><span class="title">out</span>/<span class="title">build</span>-6<span class="title">a3b3b02de52311720105cf509e4ece0.ninja</span> <span class="title">is</span> <span class="title">missing</span>, <span class="title">regenerating</span>...</span></span><br><span class="line"><span class="function">[ 80% 4/5] <span class="title">glob</span> <span class="title">frameworks</span>/<span class="title">base</span>/<span class="title">core</span>/<span class="title">jni</span></span></span><br><span class="line"><span class="function">[100% 764/764] <span class="title">Install</span>: <span class="title">out</span>/<span class="title">host</span>/<span class="title">linux</span>-<span class="title">x86</span>/<span class="title">bin</span>/<span class="title">header</span>-<span class="title">abi</span>-<span class="title">dumper</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">#### <span class="title">build</span> <span class="title">completed</span> <span class="title">successfully</span> (12:34 (<span class="title">mm:ss</span>)) ####</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><h2 id="4-2替换二进制库"><a href="#4-2替换二进制库" class="headerlink" title="4.2替换二进制库"></a>4.2替换二进制库</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">gacrnd@gacrnd:~/<span class="title">songlingjie</span>/<span class="title">AndroidP</span>/<span class="title">AOSP</span>$ <span class="title">cp</span> <span class="title">out</span>/<span class="title">host</span>/<span class="title">linux</span>-<span class="title">x86</span>/<span class="title">bin</span>/<span class="title">header</span>-<span class="title">abi</span>-<span class="title">d</span></span></span><br><span class="line"><span class="function"><span class="title">header</span>-<span class="title">abi</span>-<span class="title">diff</span>    <span class="title">header</span>-<span class="title">abi</span>-<span class="title">dumper</span>  </span></span><br><span class="line"><span class="function"><span class="title">gacrnd</span>@<span class="title">gacrnd</span>:~/<span class="title">songlingjie</span>/<span class="title">AndroidP</span>/<span class="title">AOSP</span>$ <span class="title">cp</span> <span class="title">out</span>/<span class="title">host</span>/<span class="title">linux</span>-<span class="title">x86</span>/<span class="title">bin</span>/<span class="title">header</span>-<span class="title">abi</span>-<span class="title">dumper</span> <span class="title">prebuilts</span>/<span class="title">clang</span>-<span class="title">tools</span>/<span class="title">linux</span>-<span class="title">x86</span>/<span class="title">bin</span>/<span class="title">header</span>-<span class="title">abi</span>-<span class="title">dumper</span> </span></span><br></pre></td></tr></table></figure><h2 id="4-3重新编译liblog"><a href="#4-3重新编译liblog" class="headerlink" title="4.3重新编译liblog"></a>4.3重新编译liblog</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">gacrnd@gacrnd:~/<span class="title">songlingjie</span>/<span class="title">AndroidP</span>/<span class="title">AOSP</span>$ <span class="title">make</span> -<span class="title">j32</span> <span class="title">liblog</span></span></span><br><span class="line"><span class="function">============================================</span></span><br><span class="line"><span class="function"><span class="title">PLATFORM_VERSION_CODENAME</span>=<span class="title">REL</span></span></span><br><span class="line"><span class="function"><span class="title">PLATFORM_VERSION</span>=9</span></span><br><span class="line"><span class="function"><span class="title">TARGET_PRODUCT</span>=<span class="title">aosp_car_x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_BUILD_VARIANT</span>=<span class="title">userdebug</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_BUILD_TYPE</span>=<span class="title">release</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_ARCH_VARIANT</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_2ND_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">TARGET_2ND_ARCH_VARIANT</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_2ND_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_OS</span>=<span class="title">linux</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_OS_EXTRA</span>=<span class="title">Linux</span>-5.4.0-53-<span class="title">generic</span>-<span class="title">x86_64</span>-<span class="title">Ubuntu</span>-18.04.4-<span class="title">LTS</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_OS</span>=<span class="title">windows</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_ARCH</span>=<span class="title">x86</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_CROSS_2ND_ARCH</span>=<span class="title">x86_64</span></span></span><br><span class="line"><span class="function"><span class="title">HOST_BUILD_TYPE</span>=<span class="title">release</span></span></span><br><span class="line"><span class="function"><span class="title">BUILD_ID</span>=<span class="title">PQ2A</span>.190205.003</span></span><br><span class="line"><span class="function"><span class="title">OUT_DIR</span>=<span class="title">out</span></span></span><br><span class="line"><span class="function">============================================</span></span><br><span class="line"><span class="function"><span class="title">ninja</span>: <span class="title">no</span> <span class="title">work</span> <span class="title">to</span> <span class="title">do</span>.</span></span><br><span class="line"><span class="function">[1/1] <span class="title">out</span>/<span class="title">soong</span>/.<span class="title">bootstrap</span>/<span class="title">bin</span>/<span class="title">soong_build</span> <span class="title">out</span>/<span class="title">soong</span>/<span class="title">build.ninja</span></span></span><br><span class="line"><span class="function"><span class="title">No</span> <span class="title">need</span> <span class="title">to</span> <span class="title">regenerate</span> <span class="title">ninja</span> <span class="title">file</span></span></span><br><span class="line"><span class="function"><span class="title">No</span> <span class="title">need</span> <span class="title">to</span> <span class="title">regenerate</span> <span class="title">ninja</span> <span class="title">file</span></span></span><br><span class="line"><span class="function">[100% 1506/1506] <span class="title">Install</span>: <span class="title">out</span>/<span class="title">target</span>/<span class="title">product</span>/<span class="title">generic_x86_64</span>/<span class="title">system</span>/<span class="title">lib</span>/<span class="title">liblog.so</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">#### <span class="title">build</span> <span class="title">completed</span> <span class="title">successfully</span> (02:18 (<span class="title">mm:ss</span>)) ####</span></span><br></pre></td></tr></table></figure><h2 id="4-4编译systemimage"><a href="#4-4编译systemimage" class="headerlink" title="4.4编译systemimage"></a>4.4编译systemimage</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">gacrnd@gacrnd:~/<span class="title">songlingjie</span>/<span class="title">AndroidP</span>/<span class="title">AOSP</span>$ <span class="title">make</span> <span class="title">systemimage</span></span></span><br><span class="line"><span class="function">........</span></span><br><span class="line"><span class="function">........</span></span><br><span class="line"><span class="function"><span class="title">REALLY</span> <span class="title">setting</span> <span class="title">name</span>!</span></span><br><span class="line"><span class="function"><span class="title">Warning</span>: <span class="title">The</span> <span class="title">kernel</span> <span class="title">is</span> <span class="title">still</span> <span class="title">using</span> <span class="title">the</span> <span class="title">old</span> <span class="title">partition</span> <span class="title">table</span>.</span></span><br><span class="line"><span class="function"><span class="title">The</span> <span class="title">new</span> <span class="title">table</span> <span class="title">will</span> <span class="title">be</span> <span class="title">used</span> <span class="title">at</span> <span class="title">the</span> <span class="title">next</span> <span class="title">reboot</span>.</span></span><br><span class="line"><span class="function"><span class="title">The</span> <span class="title">operation</span> <span class="title">has</span> <span class="title">completed</span> <span class="title">successfully</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">#### <span class="title">build</span> <span class="title">completed</span> <span class="title">successfully</span> (43:55 (<span class="title">mm:ss</span>)) ####</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><p>strace -f -p 进程号（socket所在的进程） -o path(log保存的文件路径)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;liblog中新增一个buffer-id&quot;&gt;&lt;a href=&quot;#liblog中新增一个buffer-id&quot; class=&quot;headerlink&quot; title=&quot;liblog中新增一个buffer id&quot;&gt;&lt;/a&gt;liblog中新增一个buffer id&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="log" scheme="http://example.com/categories/log/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>shell命令-Sed</title>
    <link href="http://example.com/2020/12/15/shell%E5%91%BD%E4%BB%A4-Sed/"/>
    <id>http://example.com/2020/12/15/shell%E5%91%BD%E4%BB%A4-Sed/</id>
    <published>2020-12-15T07:26:43.000Z</published>
    <updated>2020-12-15T07:26:43.513Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>AMS-Intent</title>
    <link href="http://example.com/2020/12/15/AMS-Intent/"/>
    <id>http://example.com/2020/12/15/AMS-Intent/</id>
    <published>2020-12-15T01:42:11.000Z</published>
    <updated>2020-12-15T01:42:11.919Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>AMS-ProcessRecord</title>
    <link href="http://example.com/2020/12/14/AMS-ProcessRecord/"/>
    <id>http://example.com/2020/12/14/AMS-ProcessRecord/</id>
    <published>2020-12-14T10:38:24.000Z</published>
    <updated>2020-12-14T12:00:55.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-ProcessRecord数据结构"><a href="#1-ProcessRecord数据结构" class="headerlink" title="1.ProcessRecord数据结构"></a>1.ProcessRecord数据结构</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Full information about a particular process that</span></span><br><span class="line"><span class="comment"> * is currently running.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessRecord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = TAG_WITH_CLASS_NAME ? <span class="string">&quot;ProcessRecord&quot;</span> : TAG_AM;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ActivityManagerService mService; <span class="comment">// where we came from</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BatteryStatsImpl mBatteryStats; <span class="comment">// where to collect runtime statistics</span></span><br><span class="line">    <span class="keyword">final</span> ApplicationInfo info; <span class="comment">// all about the first app in the process</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isolated;     <span class="comment">// true if this is a special isolated process</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> uid;              <span class="comment">// uid of process; may be different from &#x27;info&#x27; if isolated</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> userId;           <span class="comment">// user of process.</span></span><br><span class="line">    <span class="keyword">final</span> String processName;   <span class="comment">// name of the process</span></span><br><span class="line">    <span class="comment">// List of packages running in the process</span></span><br><span class="line">    <span class="keyword">final</span> ArrayMap&lt;String, ProcessStats.ProcessStateHolder&gt; pkgList = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">final</span> ProcessList.ProcStateMemTracker procStateMemTracker</span><br><span class="line">            = <span class="keyword">new</span> ProcessList.ProcStateMemTracker();</span><br><span class="line">    UidRecord uidRecord;        <span class="comment">// overall state of process&#x27;s uid.</span></span><br><span class="line">    ArraySet&lt;String&gt; pkgDeps;   <span class="comment">// additional packages we have a dependency on</span></span><br><span class="line">    IApplicationThread thread;  <span class="comment">// the actual proc...  may be null only if</span></span><br><span class="line">                                <span class="comment">// &#x27;persistent&#x27; is true (in which case we</span></span><br><span class="line">                                <span class="comment">// are in the process of launching the app)</span></span><br><span class="line">    ProcessState baseProcessTracker;</span><br><span class="line">    BatteryStatsImpl.Uid.Proc curProcBatteryStats;</span><br><span class="line">    <span class="keyword">int</span> pid;                    <span class="comment">// The process of this application; 0 if none</span></span><br><span class="line">    String procStatFile;        <span class="comment">// path to /proc/&lt;pid&gt;/stat</span></span><br><span class="line">    <span class="keyword">int</span>[] gids;                 <span class="comment">// The gids this process was launched with</span></span><br><span class="line">    String requiredAbi;         <span class="comment">// The ABI this process was launched with</span></span><br><span class="line">    String instructionSet;      <span class="comment">// The instruction set this process was launched with</span></span><br><span class="line">    <span class="keyword">boolean</span> starting;           <span class="comment">// True if the process is being started</span></span><br><span class="line">    <span class="keyword">long</span> lastActivityTime;      <span class="comment">// For managing the LRU list</span></span><br><span class="line">    <span class="keyword">long</span> lastPssTime;           <span class="comment">// Last time we retrieved PSS data</span></span><br><span class="line">    <span class="keyword">long</span> nextPssTime;           <span class="comment">// Next time we want to request PSS data</span></span><br><span class="line">    <span class="keyword">long</span> lastStateTime;         <span class="comment">// Last time setProcState changed</span></span><br><span class="line">    <span class="keyword">long</span> initialIdlePss;        <span class="comment">// Initial memory pss of process for idle maintenance.</span></span><br><span class="line">    <span class="keyword">long</span> lastPss;               <span class="comment">// Last computed memory pss.</span></span><br><span class="line">    <span class="keyword">long</span> lastSwapPss;           <span class="comment">// Last computed SwapPss.</span></span><br><span class="line">    <span class="keyword">long</span> lastCachedPss;         <span class="comment">// Last computed pss when in cached state.</span></span><br><span class="line">    <span class="keyword">long</span> lastCachedSwapPss;     <span class="comment">// Last computed SwapPss when in cached state.</span></span><br><span class="line">    <span class="keyword">int</span> maxAdj;                 <span class="comment">// Maximum OOM adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> curRawAdj;              <span class="comment">// Current OOM unlimited adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> setRawAdj;              <span class="comment">// Last set OOM unlimited adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> curAdj;                 <span class="comment">// Current OOM adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> setAdj;                 <span class="comment">// Last set OOM adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> verifiedAdj;            <span class="comment">// The last adjustment that was verified as actually being set</span></span><br><span class="line">    <span class="keyword">int</span> curSchedGroup;          <span class="comment">// Currently desired scheduling class</span></span><br><span class="line">    <span class="keyword">int</span> setSchedGroup;          <span class="comment">// Last set to background scheduling class</span></span><br><span class="line">    <span class="keyword">int</span> vrThreadTid;            <span class="comment">// Thread currently set for VR scheduling</span></span><br><span class="line">    <span class="keyword">int</span> trimMemoryLevel;        <span class="comment">// Last selected memory trimming level</span></span><br><span class="line">    <span class="keyword">int</span> curProcState = PROCESS_STATE_NONEXISTENT; <span class="comment">// Currently computed process state</span></span><br><span class="line">    <span class="keyword">int</span> repProcState = PROCESS_STATE_NONEXISTENT; <span class="comment">// Last reported process state</span></span><br><span class="line">    <span class="keyword">int</span> setProcState = PROCESS_STATE_NONEXISTENT; <span class="comment">// Last set process state in process tracker</span></span><br><span class="line">    <span class="keyword">int</span> pssProcState = PROCESS_STATE_NONEXISTENT; <span class="comment">// Currently requesting pss for</span></span><br><span class="line">    <span class="keyword">int</span> pssStatType;            <span class="comment">// The type of stat collection that we are currently requesting</span></span><br><span class="line">    <span class="keyword">int</span> savedPriority;          <span class="comment">// Previous priority value if we&#x27;re switching to non-SCHED_OTHER</span></span><br><span class="line">    <span class="keyword">int</span> renderThreadTid;        <span class="comment">// TID for RenderThread</span></span><br><span class="line">    <span class="keyword">boolean</span> serviceb;           <span class="comment">// Process currently is on the service B list</span></span><br><span class="line">    <span class="keyword">boolean</span> serviceHighRam;     <span class="comment">// We are forcing to service B list due to its RAM use</span></span><br><span class="line">    <span class="keyword">boolean</span> notCachedSinceIdle; <span class="comment">// Has this process not been in a cached state since last idle?</span></span><br><span class="line">    <span class="keyword">boolean</span> hasClientActivities;  <span class="comment">// Are there any client services with activities?</span></span><br><span class="line">    <span class="keyword">boolean</span> hasStartedServices; <span class="comment">// Are there any started services running in this process?</span></span><br><span class="line">    <span class="keyword">boolean</span> foregroundServices; <span class="comment">// Running any services that are foreground?</span></span><br><span class="line">    <span class="keyword">boolean</span> foregroundActivities; <span class="comment">// Running any activities that are foreground?</span></span><br><span class="line">    <span class="keyword">boolean</span> repForegroundActivities; <span class="comment">// Last reported foreground activities.</span></span><br><span class="line">    <span class="keyword">boolean</span> systemNoUi;         <span class="comment">// This is a system process, but not currently showing UI.</span></span><br><span class="line">    <span class="keyword">boolean</span> hasShownUi;         <span class="comment">// Has UI been shown in this process since it was started?</span></span><br><span class="line">    <span class="keyword">boolean</span> hasTopUi;           <span class="comment">// Is this process currently showing a non-activity UI that the user</span></span><br><span class="line">                                <span class="comment">// is interacting with? E.g. The status bar when it is expanded, but</span></span><br><span class="line">                                <span class="comment">// not when it is minimized. When true the</span></span><br><span class="line">                                <span class="comment">// process will be set to use the ProcessList#SCHED_GROUP_TOP_APP</span></span><br><span class="line">                                <span class="comment">// scheduling group to boost performance.</span></span><br><span class="line">    <span class="keyword">boolean</span> hasOverlayUi;       <span class="comment">// Is the process currently showing a non-activity UI that</span></span><br><span class="line">                                <span class="comment">// overlays on-top of activity UIs on screen. E.g. display a window</span></span><br><span class="line">                                <span class="comment">// of type</span></span><br><span class="line">                                <span class="comment">// android.view.WindowManager.LayoutParams#TYPE_APPLICATION_OVERLAY</span></span><br><span class="line">                                <span class="comment">// When true the process will oom adj score will be set to</span></span><br><span class="line">                                <span class="comment">// ProcessList#PERCEPTIBLE_APP_ADJ at minimum to reduce the chance</span></span><br><span class="line">                                <span class="comment">// of the process getting killed.</span></span><br><span class="line">    <span class="keyword">boolean</span> runningRemoteAnimation; <span class="comment">// Is the process currently running a RemoteAnimation? When true</span></span><br><span class="line">                                <span class="comment">// the process will be set to use the</span></span><br><span class="line">                                <span class="comment">// ProcessList#SCHED_GROUP_TOP_APP scheduling group to boost</span></span><br><span class="line">                                <span class="comment">// performance, as well as oom adj score will be set to</span></span><br><span class="line">                                <span class="comment">// ProcessList#VISIBLE_APP_ADJ at minimum to reduce the chance</span></span><br><span class="line">                                <span class="comment">// of the process getting killed.</span></span><br><span class="line">    <span class="keyword">boolean</span> pendingUiClean;     <span class="comment">// Want to clean up resources from showing UI?</span></span><br><span class="line">    <span class="keyword">boolean</span> hasAboveClient;     <span class="comment">// Bound using BIND_ABOVE_CLIENT, so want to be lower</span></span><br><span class="line">    <span class="keyword">boolean</span> treatLikeActivity;  <span class="comment">// Bound using BIND_TREAT_LIKE_ACTIVITY</span></span><br><span class="line">    <span class="keyword">boolean</span> bad;                <span class="comment">// True if disabled in the bad process list</span></span><br><span class="line">    <span class="keyword">boolean</span> killedByAm;         <span class="comment">// True when proc has been killed by activity manager, not for RAM</span></span><br><span class="line">    <span class="keyword">boolean</span> killed;             <span class="comment">// True once we know the process has been killed</span></span><br><span class="line">    <span class="keyword">boolean</span> procStateChanged;   <span class="comment">// Keep track of whether we changed &#x27;setAdj&#x27;.</span></span><br><span class="line">    <span class="keyword">boolean</span> reportedInteraction;<span class="comment">// Whether we have told usage stats about it being an interaction</span></span><br><span class="line">    <span class="keyword">boolean</span> unlocked;           <span class="comment">// True when proc was started in user unlocked state</span></span><br><span class="line">    <span class="keyword">long</span> interactionEventTime;  <span class="comment">// The time we sent the last interaction event</span></span><br><span class="line">    <span class="keyword">long</span> fgInteractionTime;     <span class="comment">// When we became foreground for interaction purposes</span></span><br><span class="line">    String waitingToKill;       <span class="comment">// Process is waiting to be killed when in the bg, and reason</span></span><br><span class="line">    Object forcingToImportant;  <span class="comment">// Token that is forcing this process to be important</span></span><br><span class="line">    <span class="keyword">int</span> adjSeq;                 <span class="comment">// Sequence id for identifying oom_adj assignment cycles</span></span><br><span class="line">    <span class="keyword">int</span> completedAdjSeq;        <span class="comment">// Sequence id for identifying oom_adj assignment cycles</span></span><br><span class="line">    <span class="keyword">boolean</span> containsCycle;      <span class="comment">// Whether this app has encountered a cycle in the most recent update</span></span><br><span class="line">    <span class="keyword">int</span> lruSeq;                 <span class="comment">// Sequence id for identifying LRU update cycles</span></span><br><span class="line">    CompatibilityInfo compat;   <span class="comment">// last used compatibility mode</span></span><br><span class="line">    IBinder.DeathRecipient deathRecipient; <span class="comment">// Who is watching for the death.</span></span><br><span class="line">    ActiveInstrumentation instr;<span class="comment">// Set to currently active instrumentation running in process</span></span><br><span class="line">    <span class="keyword">boolean</span> usingWrapper;       <span class="comment">// Set to true when process was launched with a wrapper attached</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;BroadcastRecord&gt; curReceivers = <span class="keyword">new</span> ArraySet&lt;BroadcastRecord&gt;();<span class="comment">// receivers currently running in the app</span></span><br><span class="line">    <span class="keyword">long</span> whenUnimportant;       <span class="comment">// When (uptime) the process last became unimportant</span></span><br><span class="line">    <span class="keyword">long</span> lastCpuTime;           <span class="comment">// How long proc has run CPU at last check</span></span><br><span class="line">    <span class="keyword">long</span> curCpuTime;            <span class="comment">// How long proc has run CPU most recently</span></span><br><span class="line">    <span class="keyword">long</span> lastRequestedGc;       <span class="comment">// When we last asked the app to do a gc</span></span><br><span class="line">    <span class="keyword">long</span> lastLowMemory;         <span class="comment">// When we last told the app that memory is low</span></span><br><span class="line">    <span class="keyword">long</span> lastProviderTime;      <span class="comment">// The last time someone else was using a provider in this process.</span></span><br><span class="line">    <span class="keyword">long</span> lastTopTime;           <span class="comment">// The last time the process was in the TOP state or greater.</span></span><br><span class="line">    <span class="keyword">boolean</span> reportLowMemory;    <span class="comment">// Set to true when waiting to report low mem</span></span><br><span class="line">    <span class="keyword">boolean</span> empty;              <span class="comment">// Is this an empty background process?</span></span><br><span class="line">    <span class="keyword">boolean</span> cached;             <span class="comment">// Is this a cached process?</span></span><br><span class="line">    String adjType;             <span class="comment">// Debugging: primary thing impacting oom_adj.</span></span><br><span class="line">    <span class="keyword">int</span> adjTypeCode;            <span class="comment">// Debugging: adj code to report to app.</span></span><br><span class="line">    Object adjSource;           <span class="comment">// Debugging: option dependent object.</span></span><br><span class="line">    <span class="keyword">int</span> adjSourceProcState;     <span class="comment">// Debugging: proc state of adjSource&#x27;s process.</span></span><br><span class="line">    Object adjTarget;           <span class="comment">// Debugging: target component impacting oom_adj.</span></span><br><span class="line">    Runnable crashHandler;      <span class="comment">// Optional local handler to be invoked in the process crash.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// all activities running in the process</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;ActivityRecord&gt; activities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// any tasks this process had run root activities in</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;TaskRecord&gt; recentTasks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// all ServiceRecord running in this process</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;ServiceRecord&gt; services = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    <span class="comment">// services that are currently executing code (need to remain foreground).</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;ServiceRecord&gt; executingServices = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    <span class="comment">// All ConnectionRecord this process holds</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;ConnectionRecord&gt; connections = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    <span class="comment">// all IIntentReceivers that are registered from this process.</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;ReceiverList&gt; receivers = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    <span class="comment">// class (String) -&gt; ContentProviderRecord</span></span><br><span class="line">    <span class="keyword">final</span> ArrayMap&lt;String, ContentProviderRecord&gt; pubProviders = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// All ContentProviderRecord process is using</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;ContentProviderConnection&gt; conProviders = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    String isolatedEntryPoint;  <span class="comment">// Class to run on start if this is a special isolated process.</span></span><br><span class="line">    String[] isolatedEntryPointArgs; <span class="comment">// Arguments to pass to isolatedEntryPoint&#x27;s main().</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> execServicesFg;     <span class="comment">// do we need to be executing services in the foreground?</span></span><br><span class="line">    <span class="keyword">boolean</span> persistent;         <span class="comment">// always keep this application running?</span></span><br><span class="line">    <span class="keyword">boolean</span> crashing;           <span class="comment">// are we in the process of crashing?</span></span><br><span class="line">    Dialog crashDialog;         <span class="comment">// dialog being displayed due to crash.</span></span><br><span class="line">    <span class="keyword">boolean</span> forceCrashReport;   <span class="comment">// suppress normal auto-dismiss of crash dialog &amp; report UI?</span></span><br><span class="line">    <span class="keyword">boolean</span> notResponding;      <span class="comment">// does the app have a not responding dialog?</span></span><br><span class="line">    Dialog anrDialog;           <span class="comment">// dialog being displayed due to app not resp.</span></span><br><span class="line">    <span class="keyword">boolean</span> removed;            <span class="comment">// has app package been removed from device?</span></span><br><span class="line">    <span class="keyword">boolean</span> debugging;          <span class="comment">// was app launched for debugging?</span></span><br><span class="line">    <span class="keyword">boolean</span> waitedForDebugger;  <span class="comment">// has process show wait for debugger dialog?</span></span><br><span class="line">    Dialog waitDialog;          <span class="comment">// current wait for debugger dialog</span></span><br><span class="line"></span><br><span class="line">    String shortStringName;     <span class="comment">// caching of toShortString() result.</span></span><br><span class="line">    String stringName;          <span class="comment">// caching of toString() result.</span></span><br><span class="line">    <span class="keyword">boolean</span> pendingStart;       <span class="comment">// Process start is pending.</span></span><br><span class="line">    <span class="keyword">long</span> startSeq;              <span class="comment">// Seq no. indicating the latest process start associated with</span></span><br><span class="line">                                <span class="comment">// this process record.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// These reports are generated &amp; stored when an app gets into an error condition.</span></span><br><span class="line">    <span class="comment">// They will be &quot;null&quot; when all is OK.</span></span><br><span class="line">    ActivityManager.ProcessErrorStateInfo crashingReport;</span><br><span class="line">    ActivityManager.ProcessErrorStateInfo notRespondingReport;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Who will be notified of the error. This is usually an activity in the</span></span><br><span class="line">    <span class="comment">// app that installed the package.</span></span><br><span class="line">    ComponentName errorReportReceiver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process is currently hosting a backup agent for backup or restore</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> inFullBackup;</span><br><span class="line">    <span class="comment">// App is allowed to manage whitelists such as temporary Power Save mode whitelist.</span></span><br><span class="line">    <span class="keyword">boolean</span> whitelistManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Params used in starting this process.</span></span><br><span class="line">    String hostingType;</span><br><span class="line">    String hostingNameStr;</span><br><span class="line">    String seInfo;</span><br><span class="line">    <span class="keyword">long</span> startTime;</span><br><span class="line">    <span class="comment">// This will be same as &#123;@link #uid&#125; usually except for some apps used during factory testing.</span></span><br><span class="line">    <span class="keyword">int</span> startUid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-1第一类数据：描述身份的数据"><a href="#1-1第一类数据：描述身份的数据" class="headerlink" title="1.1第一类数据：描述身份的数据"></a>1.1第一类数据：描述身份的数据</h2><ul><li><strong>ApplicationInfo info</strong>：AndroidManifest.xml中定义的Application信息</li><li><strong>boolean isolated</strong>：是不是isolated进程</li><li><strong>int uid</strong>：进程uid</li><li><strong>int userId</strong>：这个是android做的多用户系统id，就像windows可以登录很多用户一样，android也希望可以实现类似的多用户</li><li><strong>String processName</strong>：进程名字，默认情况下是包名</li><li><strong>UidRecord uidRecord</strong>：记录已经使用的uid</li><li><strong>IApplicationThread thread</strong>：这个很重要，它是ApplicationThread的客户端，AMS就是通过这个对象给apk进程发送异步消息的（管理四大组件的消息），所以只有这个对象不为空的情况下，才代表apk进程可是使用了</li><li><strong>int pid</strong>：进程的pid</li><li><strong>String procStatFile</strong>：proc目录下每一个进程都有一个以pid命名的目录文件，这个目录下记载着进程的详细信息，这个目录及目录下的文件是内核创建的， proc是内核文件系统，proc就是process的缩写，涉及的目的就是导出进程内核信息</li><li><strong>int[] gids</strong>：gid组</li><li><strong>CompatibilityInfo compat</strong> : 兼容性信息</li><li><strong>String requiredAbi</strong> : abi信息</li><li><strong>String instructionSet</strong> : 指令集信息</li></ul><h2 id="1-2第二类数据：描述进程中组件的数据"><a href="#1-2第二类数据：描述进程中组件的数据" class="headerlink" title="1.2第二类数据：描述进程中组件的数据"></a>1.2第二类数据：描述进程中组件的数据</h2><ul><li><strong>ArrayMap pkgList</strong>：进程中运行的包</li><li><strong>ArraySet pkgDeps</strong>：进程运行依赖的包</li><li><strong>ArrayList activities</strong>：进程启动的所有的activity组件记录表</li><li><strong>ArraySet services</strong>：进程启动的所有的service组件记录表</li><li><strong>ArraySet executingServices</strong>：正在运行（executing）是怎么定义的？首先需要明确的是系统是怎么控制组件的？发送消息给apk进程，apk进程处理消息，上报消息完成，这被定义为一个完整的执行过程，因此正在执行（executing）被定义为发送消息到上报完成这段时间</li><li><strong>ArraySet connections</strong>：绑定当前进程中service的客户端记录表</li><li><strong>ArraySet receivers</strong>：广播接收器的记录表</li><li><strong>ArrayMap pubProviders</strong>：pub是publish（发布）的意思，ContentProvider需要安装然后把自己发布到系统（AMS）中后，才能使用，安装指的是apk进程加载ContentProvider子类、初始化、创建数据库等过程，发布是将ContentProvider的binder客户端注册到AMS中</li><li><strong>ArrayList conProviders</strong>：使用ContentProvider的客户端记录表</li><li><strong>final ArraySet curReceivers</strong>：当前进程正在执行的广播<br>在本节中以上组件信息只是做一个简单的描述，以后单独分析组件管理的时候在详细介绍</li></ul><h2 id="1-3第三类数据：描述进程状态的数据"><a href="#1-3第三类数据：描述进程状态的数据" class="headerlink" title="1.3第三类数据：描述进程状态的数据"></a>1.3第三类数据：描述进程状态的数据</h2><ul><li><strong>int maxAdj</strong>：进程的adj上限（adjustment）</li><li><strong>int curRawAdj</strong>：当前正在计算的adj，这个值有可能大于maxAdj</li><li><strong>int setRawAdj</strong>：上次计算的curRawAdj设置到lowmemorykiller系统后的adj</li><li><strong>int curAdj</strong>：当前正在计算的adj，这是curRawAdj被maxAdj削平的值</li><li><strong>int setAdj</strong>：上次计算的curAdj设置到lowmemorykiller系统后的adj</li><li><strong>int verifiedAdj</strong>：setAdj校验后的值</li><li><strong>int curSchedGroup</strong>：正在计算的调度组</li><li><strong>int setSchedGroup</strong>：保存上次计算的调度组</li><li><strong>int curProcState</strong>：正在计算的进程状态</li><li><strong>int repProcState</strong>：发送给apk进程的状态</li><li><strong>int setProcState</strong>：保存上次计算的进程状态</li><li><strong>int pssProcState</strong>：pss进程状态</li><li><strong>ProcessState baseProcessTracker</strong>：进程状态监测器</li><li><strong>int adjSeq</strong>：计算adj的序列数</li><li><strong>int lruSeq</strong>：lru序列数</li><li><strong>IBinder forcingToForeground</strong>:强制将进程的状态设置为前台运行的IBinder，IBinder代表的是组件的ID，这个是整个android系统唯一</li></ul><h2 id="1-4第四类数据：和pss相关的数据"><a href="#1-4第四类数据：和pss相关的数据" class="headerlink" title="1.4第四类数据：和pss相关的数据"></a>1.4第四类数据：和pss相关的数据</h2><p>我们先来普及一下一些名词：</p><blockquote><p>VSS- Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）<br>RSS- Resident Set Size 实际使用物理内存（包含共享库占用的内存）<br>PSS- Proportional Set Size 实际使用的物理内存（比例分配共享库占用的内存）<br>USS- Unique Set Size 进程独自占用的物理内存（不包含共享库占用的内存）<br>一般来说内存占用大小有如下规律：VSS &gt;= RSS &gt;= PSS &gt;= USS</p></blockquote><ul><li><strong>long initialIdlePss</strong>：初始化pss</li><li><strong>long lastPss</strong>：上次pss</li><li><strong>long lastSwapPss</strong>：上次SwapPss数据</li><li><strong>long lastCachedPss</strong>：上次CachedPss数据</li><li><strong>long lastCachedSwapPss</strong>：上次CachedSwapPss数据</li></ul><h2 id="1-5第五类数据：和时间相关的数据"><a href="#1-5第五类数据：和时间相关的数据" class="headerlink" title="1.5第五类数据：和时间相关的数据"></a>1.5第五类数据：和时间相关的数据</h2><ul><li>long lastActivityTime：上次使用时间</li><li>long lastPssTime：上次计算pss的时间</li><li>long nextPssTime：下次计算pss的时间</li><li>long lastStateTime：上次设置进程状态的时间</li><li>long lastWakeTime：持有wakelock的时长</li><li>long lastCpuTime：上次计算占用cpu的时长</li><li>long curCpuTime：当前最新占用cpu的时长</li><li>long lastRequestedGc：上次发送gc命令给apk进程的时间</li><li>long lastLowMemory：上次发送低内存消息给apk进程的时间</li><li>long lastProviderTime：上次进程中ContentProvider被使用的时间</li><li>long interactionEventTime：上次发送交互时间时间</li><li>long fgInteractionTime：变成前台的时间</li></ul><h2 id="1-6第六类数据：crash和anr相关的数据"><a href="#1-6第六类数据：crash和anr相关的数据" class="headerlink" title="1.6第六类数据：crash和anr相关的数据"></a>1.6第六类数据：crash和anr相关的数据</h2><ul><li>IBinder.DeathRecipient deathRecipient：apk进程退出运行的话，会触发这个对象的binderDied()方法，来回收系统资源</li><li>boolean crashing：进程已经crash</li><li>Dialog crashDialog：crash对话框</li><li>boolean forceCrashReport：强制crash对话框显示</li><li>boolean notResponding：是否处于anr状态</li><li>Dialog anrDialog：anr显示对话框</li><li>Runnable crashHandler：crash回调</li><li>ActivityManager.ProcessErrorStateInfo crashingReport:crash报告的进程状态</li><li>ActivityManager.ProcessErrorStateInfo notRespondingReport:anr报告的进程状态</li><li>String waitingToKill:后台进程被kill原因</li><li>ComponentName errorReportReceiver:接收error信息的组件</li></ul><h2 id="1-7第七类数据：和instrumentation相关的数据"><a href="#1-7第七类数据：和instrumentation相关的数据" class="headerlink" title="1.7第七类数据：和instrumentation相关的数据"></a>1.7第七类数据：和instrumentation相关的数据</h2><blockquote><p>instrumentation 也可以说是apk的一个组件，如果我们提供的话，系统会默认使用Instrumentation.java类，按照我们一般的理解，UI 线程控制activity的生命周期，是是直接调用Activity类的方法，时间是这样子的，UI线程调用的是instrumentation的方法，由它在调用Activity涉及生命周期的方法，所有如果我们覆写了instrumentation的这些方法，就可以了解所有的Activity的生命周期了</p></blockquote><ul><li>ComponentName instrumentationClass：AndroidManifest.xml中定义的instrumentation信息</li><li>ApplicationInfo instrumentationInfo：instrumentation应用信息</li><li>String instrumentationProfileFile：instrumentation配置文件</li><li>IInstrumentationWatcher instrumentationWatcher：instrumentation监测器</li><li>IUiAutomationConnection instrumentationUiAutomationConnection：UiAutomation连接器</li><li>ComponentName instrumentationResultClass：返回结果组件</li></ul><h2 id="1-8第八类数据：电源信息和调试信息"><a href="#1-8第八类数据：电源信息和调试信息" class="headerlink" title="1.8第八类数据：电源信息和调试信息"></a>1.8第八类数据：电源信息和调试信息</h2><ul><li>BatteryStatsImpl mBatteryStats:电量信息</li><li>BatteryStatsImpl.Uid.Proc curProcBatteryStats：当前进程电量信息</li><li>boolean debugging:处于调试中</li><li>boolean waitedForDebugger:等待调试</li><li>Dialog waitDialog:等待对话框</li><li>String adjType:adj类型（或者说标示）</li><li>int adjTypeCode:adj类型码（也是一种标示）</li><li>Object adjSource:改变adj的组件记录表</li><li>int adjSourceProcState:影响adj的进程状态</li><li>Object adjTarget：改变adj的组件</li><li>String shortStringName：进程记录表的字符串显示</li><li>String stringName：进程记录表的字符串显示</li></ul><h2 id="1-9第九类数据：最后我们来看一下31个boolean值"><a href="#1-9第九类数据：最后我们来看一下31个boolean值" class="headerlink" title="1.9第九类数据：最后我们来看一下31个boolean值"></a>1.9第九类数据：最后我们来看一下31个boolean值</h2><h3 id="1-9-1进程生命周期相关的"><a href="#1-9-1进程生命周期相关的" class="headerlink" title="1.9.1进程生命周期相关的"></a>1.9.1进程生命周期相关的</h3><ul><li>boolean starting:进程正在启动</li><li>boolean removed:进程系统资源已经清理</li><li>boolean killedByAm:进程被AMS主动kill掉，非RAM kill</li><li>boolean killed:进程被kill掉了</li><li>boolean persistent:常驻内存进程</li></ul><h3 id="1-9-2组件状态影响进程行为的"><a href="#1-9-2组件状态影响进程行为的" class="headerlink" title="1.9.2组件状态影响进程行为的"></a>1.9.2组件状态影响进程行为的</h3><ul><li>boolean empty:空进程，不含有任何组件的进程</li><li>boolean cached:缓存进程</li><li>boolean bad:60s内连续crash两次的进程被定义为bad进程</li><li>boolean hasClientActivities:进程有Activity绑定其他Service</li><li>boolean hasStartedServices:进程中包含启动了的Service</li><li>boolean foregroundServices:进程中包含前台运行的Service</li><li>boolean foregroundActivities:进程中包含前台运行的Activity</li><li>boolean repForegroundActivities:</li><li>boolean systemNoUi:系统进程，没有显示UI</li><li>boolean hasShownUi:重进程启动开始，是否已经显示UI</li><li>boolean pendingUiClean:</li><li>boolean hasAboveClient:进程中有组件使用BIND_ABOVE_CLIENT标志绑定其他Service</li><li>boolean treatLikeActivity:进程中有组件使用BIND_TREAT_LIKE_ACTIVITY标志绑定其他Service</li><li>boolean execServicesFg:前台执行Service</li><li>boolean setIsForeground:设置运行前台UI</li></ul><h3 id="1-9-3其他"><a href="#1-9-3其他" class="headerlink" title="1.9.3其他"></a>1.9.3其他</h3><ul><li>boolean serviceb:进程存在service B list中</li><li>boolean serviceHighRam:由于内存原因，进程强制存在service B list中</li><li>boolean notCachedSinceIdle:进程自从上次空闲，是否属于缓存进程</li><li>boolean procStateChanged:进程状态改变</li><li>boolean reportedInteraction:是否报告交互事件</li><li>boolean unlocked:解锁状态下进程启动</li><li>boolean usingWrapper:zygote是否使用了wrapper启动apk进程</li><li>boolean reportLowMemory:报告低内存</li><li>boolean inFullBackup:进程中存在backup组件在运行</li><li>boolean whitelistManager:和电源管理相关</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-ProcessRecord数据结构&quot;&gt;&lt;a href=&quot;#1-ProcessRecord数据结构&quot; class=&quot;headerlink&quot; title=&quot;1.ProcessRecord数据结构&quot;&gt;&lt;/a&gt;1.ProcessRecord数据结构&lt;/h1&gt;&lt;figu</summary>
      
    
    
    
    <category term="AMS" scheme="http://example.com/categories/AMS/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>AMS-ActivityStack</title>
    <link href="http://example.com/2020/12/14/AMS-ActivityStack/"/>
    <id>http://example.com/2020/12/14/AMS-ActivityStack/</id>
    <published>2020-12-14T07:00:38.000Z</published>
    <updated>2020-12-14T12:16:44.897Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/AMS-ActivityStack/v2-86a554a0bbecdf13fa70feaa373bf164_720w.jpg" alt="img"></p><p><img src="/images/AMS-ActivityStack/19954663-236fc1f056295414.jpg" alt="img"></p><h1 id="ActivityRecord"><a href="#ActivityRecord" class="headerlink" title="ActivityRecord"></a>ActivityRecord</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ActivityManagerService service; <span class="comment">// owner</span></span><br><span class="line"><span class="keyword">final</span> IApplicationToken.Stub appToken; <span class="comment">// window manager token</span></span><br><span class="line">AppWindowContainerController mWindowContainerController;</span><br><span class="line"><span class="keyword">final</span> ActivityInfo info; <span class="comment">// all about me</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> This is duplicated state already contained in info.applicationInfo - remove</span></span><br><span class="line">ApplicationInfo appInfo; <span class="comment">// information about activity&#x27;s app</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> launchedFromPid; <span class="comment">// always the pid who started the activity.</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> launchedFromUid; <span class="comment">// always the uid who started the activity.</span></span><br><span class="line"><span class="keyword">final</span> String launchedFromPackage; <span class="comment">// always the package who started the activity.</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> userId;          <span class="comment">// Which user is this running for?</span></span><br><span class="line"><span class="keyword">final</span> Intent intent;    <span class="comment">// the original intent that generated us</span></span><br><span class="line"><span class="keyword">final</span> ComponentName realActivity;  <span class="comment">// the intent component, or target of an alias.</span></span><br><span class="line"><span class="keyword">final</span> String shortComponentName; <span class="comment">// the short component name of the intent</span></span><br><span class="line"><span class="keyword">final</span> String resolvedType; <span class="comment">// as per original caller;</span></span><br><span class="line"><span class="keyword">final</span> String packageName; <span class="comment">// the package implementing intent&#x27;s component</span></span><br><span class="line"><span class="keyword">final</span> String processName; <span class="comment">// process where this component wants to run</span></span><br><span class="line"><span class="keyword">final</span> String taskAffinity; <span class="comment">// as per ActivityInfo.taskAffinity</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> stateNotNeeded; <span class="comment">// As per ActivityInfo.flags</span></span><br><span class="line"><span class="keyword">boolean</span> fullscreen; <span class="comment">// The activity is opaque and fills the entire space of this task.</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> See if it possible to combine this with the fullscreen field.</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> hasWallpaper; <span class="comment">// Has a wallpaper window as a background.</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> noDisplay;  <span class="comment">// activity is not displayed?</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> componentSpecified;  <span class="comment">// did caller specify an explicit component?</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> rootVoiceInteraction;  <span class="comment">// was this the root activity of a voice interaction?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> CharSequence nonLocalizedLabel;  <span class="comment">// the label information from the package mgr.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> labelRes;           <span class="comment">// the label information from the package mgr.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> icon;               <span class="comment">// resource identifier of activity&#x27;s icon.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> logo;               <span class="comment">// resource identifier of activity&#x27;s logo.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> theme;              <span class="comment">// resource identifier of activity&#x27;s theme.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> realTheme;          <span class="comment">// actual theme resource we will use, never 0.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> windowFlags;        <span class="comment">// custom window flags for preview window.</span></span><br><span class="line"><span class="keyword">private</span> TaskRecord task;        <span class="comment">// the task this is in.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> createTime = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> lastVisibleTime;   <span class="comment">// last time this activity became visible</span></span><br><span class="line"><span class="keyword">long</span> cpuTimeAtResume;   <span class="comment">// the cpu time of host process at the time of resuming activity</span></span><br><span class="line"><span class="keyword">long</span> pauseTime;         <span class="comment">// last time we started pausing the activity</span></span><br><span class="line"><span class="keyword">long</span> launchTickTime;    <span class="comment">// base time for launch tick messages</span></span><br><span class="line"><span class="comment">// Last configuration reported to the activity in the client process.</span></span><br><span class="line"><span class="keyword">private</span> MergedConfiguration mLastReportedConfiguration;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mLastReportedDisplayId;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mLastReportedMultiWindowMode;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mLastReportedPictureInPictureMode;</span><br><span class="line">CompatibilityInfo compat;<span class="comment">// last used compatibility mode</span></span><br><span class="line">ActivityRecord resultTo; <span class="comment">// who started this entry, so will get our reply</span></span><br><span class="line"><span class="keyword">final</span> String resultWho; <span class="comment">// additional identifier for use by resultTo.</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> requestCode;  <span class="comment">// code given by requester (resultTo)</span></span><br><span class="line">ArrayList&lt;ResultInfo&gt; results; <span class="comment">// pending ActivityResult objs we have received</span></span><br><span class="line">HashSet&lt;WeakReference&lt;PendingIntentRecord&gt;&gt; pendingResults; <span class="comment">// all pending intents for this act</span></span><br><span class="line">ArrayList&lt;ReferrerIntent&gt; newIntents; <span class="comment">// any pending new intents for single-top mode</span></span><br><span class="line">ActivityOptions pendingOptions; <span class="comment">// most recently given options</span></span><br><span class="line">ActivityOptions returningOptions; <span class="comment">// options that are coming back via convertToTranslucent</span></span><br><span class="line">AppTimeTracker appTimeTracker; <span class="comment">// set if we are tracking the time in this app/task/activity</span></span><br><span class="line">HashSet&lt;ConnectionRecord&gt; connections; <span class="comment">// All ConnectionRecord we hold</span></span><br><span class="line">UriPermissionOwner uriPermissions; <span class="comment">// current special URI access perms.</span></span><br><span class="line">ProcessRecord app;      <span class="comment">// if non-null, hosting application</span></span><br><span class="line"><span class="keyword">private</span> ActivityState mState;    <span class="comment">// current state we are in</span></span><br><span class="line">Bundle  icicle;         <span class="comment">// last saved activity state</span></span><br><span class="line">PersistableBundle persistentState; <span class="comment">// last persistently saved activity state</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> See if this is still needed.</span></span><br><span class="line"><span class="keyword">boolean</span> frontOfTask;    <span class="comment">// is this the root activity of its task?</span></span><br><span class="line"><span class="keyword">boolean</span> launchFailed;   <span class="comment">// set if a launched failed, to abort on 2nd try</span></span><br><span class="line"><span class="keyword">boolean</span> haveState;      <span class="comment">// have we gotten the last activity state?</span></span><br><span class="line"><span class="keyword">boolean</span> stopped;        <span class="comment">// is activity pause finished?</span></span><br><span class="line"><span class="keyword">boolean</span> delayedResume;  <span class="comment">// not yet resumed because of stopped app switches?</span></span><br><span class="line"><span class="keyword">boolean</span> finishing;      <span class="comment">// activity in pending finish list?</span></span><br><span class="line"><span class="keyword">boolean</span> deferRelaunchUntilPaused;   <span class="comment">// relaunch of activity is being deferred until pause is</span></span><br><span class="line">                                    <span class="comment">// completed</span></span><br><span class="line"><span class="keyword">boolean</span> preserveWindowOnDeferredRelaunch; <span class="comment">// activity windows are preserved on deferred relaunch</span></span><br><span class="line"><span class="keyword">int</span> configChangeFlags;  <span class="comment">// which config values have changed</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> keysPaused;     <span class="comment">// has key dispatching been paused for it?</span></span><br><span class="line"><span class="keyword">int</span> launchMode;         <span class="comment">// the launch mode activity attribute.</span></span><br><span class="line"><span class="keyword">int</span> lockTaskLaunchMode; <span class="comment">// the lockTaskMode manifest attribute, subject to override</span></span><br><span class="line"><span class="keyword">boolean</span> visible;        <span class="comment">// does this activity&#x27;s window need to be shown?</span></span><br><span class="line"><span class="keyword">boolean</span> visibleIgnoringKeyguard; <span class="comment">// is this activity visible, ignoring the fact that Keyguard</span></span><br><span class="line">                                 <span class="comment">// might hide this activity?</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mDeferHidingClient; <span class="comment">// If true we told WM to defer reporting to the client</span></span><br><span class="line">                                    <span class="comment">// process that it is hidden.</span></span><br><span class="line"><span class="keyword">boolean</span> sleeping;       <span class="comment">// have we told the activity to sleep?</span></span><br><span class="line"><span class="keyword">boolean</span> nowVisible;     <span class="comment">// is this activity&#x27;s window visible?</span></span><br><span class="line"><span class="keyword">boolean</span> drawn;          <span class="comment">// is this activity&#x27;s window drawn?</span></span><br><span class="line"><span class="keyword">boolean</span> mClientVisibilityDeferred;<span class="comment">// was the visibility change message to client deferred?</span></span><br><span class="line"><span class="keyword">boolean</span> idle;           <span class="comment">// has the activity gone idle?</span></span><br><span class="line"><span class="keyword">boolean</span> hasBeenLaunched;<span class="comment">// has this activity ever been launched?</span></span><br><span class="line"><span class="keyword">boolean</span> frozenBeforeDestroy;<span class="comment">// has been frozen but not yet destroyed.</span></span><br><span class="line"><span class="keyword">boolean</span> immersive;      <span class="comment">// immersive mode (don&#x27;t interrupt if possible)</span></span><br><span class="line"><span class="keyword">boolean</span> forceNewConfig; <span class="comment">// force re-create with new config next time</span></span><br><span class="line"><span class="keyword">boolean</span> supportsEnterPipOnTaskSwitch;  <span class="comment">// This flag is set by the system to indicate that the</span></span><br><span class="line">    <span class="comment">// activity can enter picture in picture while pausing (only when switching to another task)</span></span><br><span class="line">PictureInPictureParams pictureInPictureArgs = <span class="keyword">new</span> PictureInPictureParams.Builder().build();</span><br><span class="line">    <span class="comment">// The PiP params used when deferring the entering of picture-in-picture.</span></span><br><span class="line"><span class="keyword">int</span> launchCount;        <span class="comment">// count of launches since last state</span></span><br><span class="line"><span class="keyword">long</span> lastLaunchTime;    <span class="comment">// time of last launch of this activity</span></span><br><span class="line">ComponentName requestedVrComponent; <span class="comment">// the requested component for handling VR mode.</span></span><br><span class="line"></span><br><span class="line">String stringName;      <span class="comment">// for caching of toString().</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> inHistory;  <span class="comment">// are we in the history stack?</span></span><br><span class="line"><span class="keyword">final</span> ActivityStackSupervisor mStackSupervisor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STARTING_WINDOW_NOT_SHOWN = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STARTING_WINDOW_SHOWN = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STARTING_WINDOW_REMOVED = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> mStartingWindowState = STARTING_WINDOW_NOT_SHOWN;</span><br><span class="line"><span class="keyword">boolean</span> mTaskOverlay = <span class="keyword">false</span>; <span class="comment">// Task is always on-top of other activities in the task.</span></span><br><span class="line"></span><br><span class="line">TaskDescription taskDescription; <span class="comment">// the recents information for this activity</span></span><br><span class="line"><span class="keyword">boolean</span> mLaunchTaskBehind; <span class="comment">// this activity is actively being launched with</span></span><br></pre></td></tr></table></figure><p>ActivityRecord是AMS调度Activity的基本单位，它需要记录AndroidManifest.xml中所定义Activity的静态特征，同时， 也需要记录Activity在被调度时的状态变化,</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>ActivityInfo</td><td>从<activity>标签中解析出来的信息，包含launchMode，permission，taskAffinity等</activity></td></tr><tr><td>mActivityType</td><td>Activity的类型有三种：APPLICATION_ACTIVITY_TYPE(应用)、HOME_ACTIVITY_TYPE(桌面)、RECENTS_ACTIVITY_TYPE(最近使用)</td></tr><tr><td>ComponentName realActivity</td><td>the intent component, or target of an alias.</td></tr><tr><td>appToken</td><td>当前ActivityRecord的标识</td></tr><tr><td>packageName</td><td>当前所属的包名，这是由<activity>静态定义的</activity></td></tr><tr><td>processName</td><td>当前所属的进程名，大部分情况都是由<activity>静态定义的，但也有例外</activity></td></tr><tr><td>taskAffinity</td><td>相同taskAffinity的Activity会被分配到同一个任务栈中</td></tr><tr><td>intent</td><td>启动当前Activity的Intent</td></tr><tr><td>launchedFromUid</td><td>启动当前Activity的UID，即发起者的UID</td></tr><tr><td>userId;</td><td>Which user is this running for?</td></tr><tr><td>launchedFromPackage</td><td>启动当前Activity的包名，即发起者的包名</td></tr><tr><td>resultTo</td><td>在当前ActivityRecord看来，resultTo表示上一个启动它的ActivityRecord，当需要启动另一个ActivityRecord，会把自己作为resultTo，传递给下一个ActivityRecord</td></tr><tr><td>state</td><td>ActivityRecord所处的状态，初始值是ActivityState.INITIALIZING</td></tr><tr><td>app</td><td>ActivityRecord的宿主进程</td></tr><tr><td>task</td><td>ActivityRecord的宿主任务</td></tr><tr><td>inHistory</td><td>标识当前的ActivityRecord是否已经置入任务栈中</td></tr><tr><td>frontOfTask</td><td>标识当前的ActivityRecord是否处于任务栈的根部，即是否为进入任务栈的第一个ActivityRecord</td></tr><tr><td>newIntents</td><td>Intent数组，用于暂存还没有调度到应用进程Activity的Intent</td></tr></tbody></table><p>由于ActivityRecord是一个最基本的数据结构，所以其行为相对较少，大都是一些用于判定和更新当前ActivityRecord状态的函数：</p><table><thead><tr><th>行为</th><th>描述</th></tr></thead><tbody><tr><td>putInHistory(), takeFromHistory(), isInHistory()</td><td>基于inHistory属性，来判定和更新ActivityRecord是否在任务栈的状态值</td></tr><tr><td>isHomeActivity(), isRecentsActivity(), isApplicationActivity()</td><td>基于mActivityType属性，判定Activity的类型</td></tr><tr><td>setTask()</td><td>设置ActivityRecord的宿主任务</td></tr><tr><td>deliverNewIntentLocked()</td><td>向当前ActivityRecord继续派发Intent。在一些场景下，位于任务栈顶的ActivityRecord会继续接受新的Intent(譬如以singleTop方式启动的同一个Activity)，这时候，会触发调度Activity.onNewIntent()函数</td></tr><tr><td>addNewIntentLocked()</td><td>如果Intent没有派发到应用进程，则通过该函数往newIntents数组中添加一个元素。</td></tr></tbody></table><p>要理解ActivityRecord这个数据结构，可以从其构造函数出发，理解其属性在什么场景下会发生变化。 每次需要启动一个新的Activity时，都会构建一个ActivityRecord对象，这在ActivityStackSupervisor.startActivityLocked()函数中完成，构造一个ActivityRecord要传入的参数是相当多的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">ActivityRecord(ActivityManagerService _service, ProcessRecord _caller,</span><br><span class="line">      <span class="keyword">int</span> _launchedFromUid, String _launchedFromPackage, Intent _intent, String _resolvedType,</span><br><span class="line">      ActivityInfo aInfo, Configuration _configuration,</span><br><span class="line">      ActivityRecord _resultTo, String _resultWho, <span class="keyword">int</span> _reqCode,</span><br><span class="line">      <span class="keyword">boolean</span> _componentSpecified, ActivityStackSupervisor supervisor,</span><br><span class="line">      ActivityContainer container, Bundle options) &#123;</span><br><span class="line">    service = _service; <span class="comment">// AMS对象</span></span><br><span class="line">    appToken = <span class="keyword">new</span> Token(<span class="keyword">this</span>); <span class="comment">//appToken可以进行跨进程传递，标识一个AR对象</span></span><br><span class="line">    info = aInfo; <span class="comment">//从AndroidManifest.xml中解析得到的Activity信息</span></span><br><span class="line">    launchedFromUid = _launchedFromUid; <span class="comment">//譬如从浏览器启动当前AR，那么该属性记录的就是浏览器的UID</span></span><br><span class="line">    launchedFromPackage = _launchedFromPackage;</span><br><span class="line">    userId = UserHandle.getUserId(aInfo.applicationInfo.uid);</span><br><span class="line">    intent = _intent; <span class="comment">//启动当前AR的Intent</span></span><br><span class="line">    shortComponentName = _intent.getComponent().flattenToShortString();</span><br><span class="line">    resolvedType = _resolvedType;</span><br><span class="line">    componentSpecified = _componentSpecified;</span><br><span class="line">    configuration = _configuration;</span><br><span class="line">    resultTo = _resultTo; <span class="comment">//记录上一个AR对象</span></span><br><span class="line">    resultWho = _resultWho; <span class="comment">//reslutTo的字符串标识</span></span><br><span class="line">    requestCode = _reqCode; <span class="comment">//上一个AR对象设定的Request Code</span></span><br><span class="line">    state = ActivityState.INITIALIZING; <span class="comment">//AR的状态，Activity调度时发生改变</span></span><br><span class="line">    frontOfTask = <span class="keyword">false</span>; <span class="comment">//是否处于Task的根部，调整任务栈中AR顺序时，可能发生改变</span></span><br><span class="line">    launchFailed = <span class="keyword">false</span>;</span><br><span class="line">    stopped = <span class="keyword">false</span>; <span class="comment">//pause操作完成状态位</span></span><br><span class="line">    delayedResume = <span class="keyword">false</span>;</span><br><span class="line">    finishing = <span class="keyword">false</span>; <span class="comment">//stoped到finished之间的过渡状态位</span></span><br><span class="line">    configDestroy = <span class="keyword">false</span>;</span><br><span class="line">    keysPaused = <span class="keyword">false</span>; <span class="comment">//如果置为true，则当前AR不再接受用户输入</span></span><br><span class="line">    inHistory = <span class="keyword">false</span>; <span class="comment">//将AR压入任务栈后，该状态位被置为true</span></span><br><span class="line">    visible = <span class="keyword">true</span>;</span><br><span class="line">    waitingVisible = <span class="keyword">false</span>;</span><br><span class="line">    nowVisible = <span class="keyword">false</span>;</span><br><span class="line">    idle = <span class="keyword">false</span>;</span><br><span class="line">    hasBeenLaunched = <span class="keyword">false</span>;</span><br><span class="line">    mStackSupervisor = supervisor;</span><br><span class="line">    mInitialActivityContainer = container;</span><br><span class="line">    <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</span><br><span class="line">        pendingOptions = <span class="keyword">new</span> ActivityOptions(options);</span><br><span class="line">        mLaunchTaskBehind = pendingOptions.getLaunchTaskBehind();</span><br><span class="line">    &#125;</span><br><span class="line">    haveState = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (aInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//根据aInfo给realActivity, taskAffinity, processName等属性赋值</span></span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//没有aInfo的情况下，赋予默认值</span></span><br><span class="line">        realActivity = <span class="keyword">null</span>;</span><br><span class="line">        taskAffinity = <span class="keyword">null</span>;</span><br><span class="line">        stateNotNeeded = <span class="keyword">false</span>;</span><br><span class="line">        appInfo = <span class="keyword">null</span>;</span><br><span class="line">        processName = <span class="keyword">null</span>;</span><br><span class="line">        packageName = <span class="keyword">null</span>;</span><br><span class="line">        fullscreen = <span class="keyword">true</span>;</span><br><span class="line">        noDisplay = <span class="keyword">false</span>;</span><br><span class="line">        mActivityType = APPLICATION_ACTIVITY_TYPE;</span><br><span class="line">        immersive = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="TaskRecord"><a href="#TaskRecord" class="headerlink" title="TaskRecord"></a>TaskRecord</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> taskId;       <span class="comment">// Unique identifier for this task.</span></span><br><span class="line">String affinity;        <span class="comment">// The affinity name for this task, or null; may change identity.</span></span><br><span class="line">String rootAffinity;    <span class="comment">// Initial base affinity, or null; does not change from initial root.</span></span><br><span class="line"><span class="keyword">final</span> IVoiceInteractionSession voiceSession;    <span class="comment">// Voice interaction session driving task</span></span><br><span class="line"><span class="keyword">final</span> IVoiceInteractor voiceInteractor;         <span class="comment">// Associated interactor to provide to app</span></span><br><span class="line">Intent intent;          <span class="comment">// The original intent that started the task. Note that this value can</span></span><br><span class="line"><span class="comment">// be null.</span></span><br><span class="line">Intent affinityIntent;  <span class="comment">// Intent of affinity-moved activity that started this task.</span></span><br><span class="line"><span class="keyword">int</span> effectiveUid;       <span class="comment">// The current effective uid of the identity of this task.</span></span><br><span class="line">ComponentName origActivity; <span class="comment">// The non-alias activity component of the intent.</span></span><br><span class="line">ComponentName realActivity; <span class="comment">// The actual activity component that started the task.</span></span><br><span class="line"><span class="keyword">boolean</span> realActivitySuspended; <span class="comment">// True if the actual activity component that started the</span></span><br><span class="line"><span class="comment">// task is suspended.</span></span><br><span class="line"><span class="keyword">boolean</span> inRecents;      <span class="comment">// Actually in the recents list?</span></span><br><span class="line"><span class="keyword">long</span> lastActiveTime;    <span class="comment">// Last time this task was active in the current device session,</span></span><br><span class="line"><span class="comment">// including sleep. This time is initialized to the elapsed time when</span></span><br><span class="line"><span class="comment">// restored from disk.</span></span><br><span class="line"><span class="keyword">boolean</span> isAvailable;    <span class="comment">// Is the activity available to be launched?</span></span><br><span class="line"><span class="keyword">boolean</span> rootWasReset;   <span class="comment">// True if the intent at the root of the task had</span></span><br><span class="line"><span class="comment">// the FLAG_ACTIVITY_RESET_TASK_IF_NEEDED flag.</span></span><br><span class="line"><span class="keyword">boolean</span> autoRemoveRecents;  <span class="comment">// If true, we should automatically remove the task from</span></span><br><span class="line"><span class="comment">// recents when activity finishes</span></span><br><span class="line"><span class="keyword">boolean</span> askedCompatMode;<span class="comment">// Have asked the user about compat mode for this task.</span></span><br><span class="line"><span class="keyword">boolean</span> hasBeenVisible; <span class="comment">// Set if any activities in the task have been visible to the user.</span></span><br><span class="line"></span><br><span class="line">String stringName;      <span class="comment">// caching of toString() result.</span></span><br><span class="line"><span class="keyword">int</span> userId;             <span class="comment">// user for which this task was created</span></span><br><span class="line"><span class="keyword">boolean</span> mUserSetupComplete; <span class="comment">// The user set-up is complete as of the last time the task activity</span></span><br><span class="line"><span class="comment">// was changed.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> numFullscreen;      <span class="comment">// Number of fullscreen activities.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mResizeMode;        <span class="comment">// The resize mode of this task and its activities.</span></span><br><span class="line"><span class="comment">// Based on the &#123;@link ActivityInfo#resizeMode&#125; of the root activity.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mSupportsPictureInPicture;  <span class="comment">// Whether or not this task and its activities</span></span><br><span class="line"><span class="comment">// support PiP. Based on the &#123;@link ActivityInfo#FLAG_SUPPORTS_PICTURE_IN_PICTURE&#125; flag</span></span><br><span class="line"><span class="comment">// of the root activity.</span></span><br><span class="line"><span class="comment">/** Can&#x27;t be put in lockTask mode. */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LOCK_TASK_AUTH_DONT_LOCK = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/** Can enter app pinning with user approval. Can never start over existing lockTask task. */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LOCK_TASK_AUTH_PINNABLE = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/** Starts in LOCK_TASK_MODE_LOCKED automatically. Can start over existing lockTask task. */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LOCK_TASK_AUTH_LAUNCHABLE = <span class="number">2</span>;</span><br><span class="line"><span class="comment">/** Can enter lockTask without user approval. Can start over existing lockTask task. */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LOCK_TASK_AUTH_WHITELISTED = <span class="number">3</span>;</span><br><span class="line"><span class="comment">/** Priv-app that starts in LOCK_TASK_MODE_LOCKED automatically. Can start over existing</span></span><br><span class="line"><span class="comment">     * lockTask task. */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LOCK_TASK_AUTH_LAUNCHABLE_PRIV = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> mLockTaskAuth = LOCK_TASK_AUTH_PINNABLE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mLockTaskUid = -<span class="number">1</span>;  <span class="comment">// The uid of the application that called startLockTask().</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This represents the last resolved activity values for this task</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> This value needs to be persisted with each task</span></span><br><span class="line">TaskDescription lastTaskDescription = <span class="keyword">new</span> TaskDescription();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** List of all activities in the task arranged in history order */</span></span><br><span class="line"><span class="keyword">final</span> ArrayList&lt;ActivityRecord&gt; mActivities;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Current stack. Setter must always be used to update the value. */</span></span><br><span class="line"><span class="keyword">private</span> ActivityStack mStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The process that had previously hosted the root activity of this task.</span></span><br><span class="line"><span class="comment">     * Used to know that we should try harder to keep this process around, in case the</span></span><br><span class="line"><span class="comment">     * user wants to return to it. */</span></span><br><span class="line"><span class="keyword">private</span> ProcessRecord mRootProcess;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Takes on same value as first root activity */</span></span><br><span class="line"><span class="keyword">boolean</span> isPersistable = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">int</span> maxRecents;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Only used for persistable tasks, otherwise 0. The last time this task was moved. Used for</span></span><br><span class="line"><span class="comment">     * determining the order when restoring. Sign indicates whether last task movement was to front</span></span><br><span class="line"><span class="comment">     * (positive) or back (negative). Absolute value indicates time. */</span></span><br><span class="line"><span class="keyword">long</span> mLastTimeMoved = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** If original intent did not allow relinquishing task identity, save that information */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mNeverRelinquishIdentity = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Used in the unique case where we are clearing the task in order to reuse it. In that case we</span></span><br><span class="line"><span class="comment">// do not want to delete the stack when the task goes empty.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mReuseTask = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">CharSequence lastDescription; <span class="comment">// Last description captured for this item.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mAffiliatedTaskId; <span class="comment">// taskId of parent affiliation or self if no parent.</span></span><br><span class="line"><span class="keyword">int</span> mAffiliatedTaskColor; <span class="comment">// color of the parent task affiliation.</span></span><br><span class="line">TaskRecord mPrevAffiliate; <span class="comment">// previous task in affiliated chain.</span></span><br><span class="line"><span class="keyword">int</span> mPrevAffiliateTaskId = INVALID_TASK_ID; <span class="comment">// previous id for persistence.</span></span><br><span class="line">TaskRecord mNextAffiliate; <span class="comment">// next task in affiliated chain.</span></span><br><span class="line"><span class="keyword">int</span> mNextAffiliateTaskId = INVALID_TASK_ID; <span class="comment">// next id for persistence.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// For relaunching the task from recents as though it was launched by the original launcher.</span></span><br><span class="line"><span class="keyword">int</span> mCallingUid;</span><br><span class="line">String mCallingPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> ActivityManagerService mService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Rect mTmpStableBounds = <span class="keyword">new</span> Rect();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Rect mTmpNonDecorBounds = <span class="keyword">new</span> Rect();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Rect mTmpRect = <span class="keyword">new</span> Rect();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Last non-fullscreen bounds the task was launched in or resized to.</span></span><br><span class="line"><span class="comment">// The information is persisted and used to determine the appropriate stack to launch the</span></span><br><span class="line"><span class="comment">// task into on restore.</span></span><br><span class="line">Rect mLastNonFullscreenBounds = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// Minimal width and height of this task when it&#x27;s resizeable. -1 means it should use the</span></span><br><span class="line"><span class="comment">// default minimal width/height.</span></span><br><span class="line"><span class="keyword">int</span> mMinWidth;</span><br><span class="line"><span class="keyword">int</span> mMinHeight;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ranking (from top) of this task among all visible tasks. (-1 means it&#x27;s not visible)</span></span><br><span class="line"><span class="comment">// This number will be assigned when we evaluate OOM scores for all visible tasks.</span></span><br><span class="line"><span class="keyword">int</span> mLayerRank = -<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>TaskRecord的职责是管理多个ActivityRecord，本文所述的任务、任务栈指的就是TaskRecord。 启动Activity时，需要找到Activity的宿主任务，如果不存在，则需要新建一个，也就是说所有的ActivityRecord都必须有宿主。 TaskRecord与ActivityRecord是一对多的关系，TaskRecord的属性中包含了ActivityRecord的数组; 同时，TaskRecord还需要维护任务栈本身的状态。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>taskid</td><td>TaskRecord的唯一标识</td></tr><tr><td>taskType</td><td>任务栈的类型，等同于ActivityRecord的类型，是由任务栈的第一个ActivityRecord决定的</td></tr><tr><td>intent</td><td>在当前任务栈中启动的第一个Activity的Intent将会被记录下来，后续如果有相同的Intent时，会与已有任务栈的Intent进行匹配，如果匹配上了，就不需要再新建一个TaskRecord了</td></tr><tr><td>realActivity, origActivity</td><td>启动任务栈的Activity，这两个属性是用包名(CompentName)表示的，real和orig是为了区分Activity有无别名(alias)的情况，如果AndroidManifest.xml中定义的Activity是一个alias，则此处real表示Activity的别名，orig表示真实的Activity</td></tr><tr><td>affinity</td><td>TaskRecord把Activity的affinity记录下来，后续启动Activity时，会从已有的任务栈中匹配affinity，如果匹配上了，则不需要新建TaskRecord</td></tr><tr><td>rootAffinity</td><td>记录任务栈中最底部Activity的affinity，一经设定后就不再改变</td></tr><tr><td>mActivities</td><td>这是TaskRecord最重要的一个属性，TaskRecord是一个栈结构，栈的元素是ActivityRecord，其内部实现是一个数组mActivities</td></tr><tr><td>stack</td><td>当前TaskRecord所在的ActivityStack</td></tr></tbody></table><p>TaskRecord的行为侧重在TaskRecord本身的管理：增/删/改/查任务栈中的元素。</p><table><thead><tr><th>行为</th><th>描述</th></tr></thead><tbody><tr><td>getRootActivity(), getTopActivity()</td><td>任务栈有根部(Root)和顶部(Top)，可以通过这两个函数分别获取到根部和顶部的ActivityRecord。获取的过程就是对TaskRecord.mActivities进行遍历，如果ActivityRecord的状态不是finishing，就认为是有效的ActivityRecord</td></tr><tr><td>topRunningActivityLocked()</td><td>虽然也是从顶至底对任务栈进行遍历获取顶部的ActivityRecord，但这个函数同getTopActivity()有区别：输入参数notTop，表示在遍历的过程中需要排除notTop这个ActivityRecord;</td></tr><tr><td>addActivityToTop(), addActivityAtBottom()</td><td>将ActivityRecord添加到任务栈的顶部或底部</td></tr><tr><td>moveActivityToFrontLocked()</td><td>该函数将一个ActivityRecord移至TaskRecord的顶部，实现方法就是先删除已有的，再在栈顶添加一个新的</td></tr><tr><td>setFrontOfTask()</td><td>ActivityRecord有一个属性是frontOfTask，表示ActivityRecord是否为TaskRecord的根Activity。该函数设置TaskRecord中所有ActivityRecord的frontOfTask属性，从栈底往上开始遍历，第一个不处于finishing状态的ActivityRecord的frontOfTask属性置成true，其他都为false</td></tr><tr><td>performClearTaskLocked()</td><td>清除TaskRecord中的ActivityRecord。当启动Activity时，用了Intent.FLAG_ACTIVITY_CLEAR_TOP参数，那么在宿主任务中，待启动ActivityRecord之上的其他ActivityRecord都会被清除</td></tr></tbody></table><p>仅仅把类的属性和行为罗列出来，当然不足以理解TaskRecord的工作原理。 接下来，将深入部分函数的代码，分析TaskRecord在一些场景下的具体执行逻辑。</p><p><code>场景 1</code> 启动一个Activity时，通常需要将ActivityRecord压入任务栈顶，addActivityToTop()就是为此功能设计：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addActivityToTop</span><span class="params">(ActivityRecord r)</span> </span>&#123;</span><br><span class="line">    addActivityAtIndex(mActivities.size(), r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将ActivityRecord压入栈顶，其实就是在mActivities数组末尾添加一个元素，所以，实际压入栈顶的操作是由addActivityAtIndex()完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addActivityAtIndex</span><span class="params">(<span class="keyword">int</span> index, ActivityRecord r)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 移除已有的ActivityRecord对象</span></span><br><span class="line">    <span class="keyword">if</span> (!mActivities.remove(r) &amp;&amp; r.fullscreen) &#123;</span><br><span class="line">        numFullscreen++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 根据任务栈是否为空，设置状态</span></span><br><span class="line">    <span class="keyword">if</span> (mActivities.isEmpty()) &#123;</span><br><span class="line">        taskType = r.mActivityType;</span><br><span class="line">        isPersistable = r.isPersistable();</span><br><span class="line">        mCallingUid = r.launchedFromUid;</span><br><span class="line">        mCallingPackage = r.launchedFromPackage;</span><br><span class="line">        maxRecents = Math.min(Math.max(r.info.maxRecents, <span class="number">1</span>),</span><br><span class="line">                ActivityManager.getMaxAppRecentsLimitStatic());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        r.mActivityType = taskType;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 在指定的位置添加ActivityRecord</span></span><br><span class="line">    mActivities.add(index, r);</span><br><span class="line">    <span class="comment">// 4. 更新任务栈关联的Intent</span></span><br><span class="line">    updateEffectiveIntent();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数会经过以下处理过程：</p><ol><li>移除任务栈中已有的ActivityRecord对象，即任务栈中不会出现两个同样的ActivityRecord对象。此处需要注意，两次启动同一个Activity，是会产生两个不同的ActivityRecord对象的;</li><li>如果任务栈为空，则设置任务栈的初始状态，否则，设置ActivityRecord的类型为任务栈的类型。由此可见，同一个任务栈中，所有ActivityRecord的类型都是一样的，而且是由任务栈的第一个ActivityRecord的类型决定的;</li><li>此处的位置就是任务栈顶，也就是mActivities属性的末尾;</li><li>任务栈中元素发生了变化，所以需要更新任务栈关联的Intent，这是通过调用updateEffectiveIntent()实现的，函数的具体逻辑，在<code>场景 3</code>中再行分析。</li></ol><p><code>场景 2</code> 当待显示的Activity压入任务栈后，就需要设置栈顶ActivityRecord的状态，这时候，会调用topRunningActivityLocked()函数来获取栈顶的元素，为了更好的分析topRunningActivityLocked()的使用场景，笔者把另一个与其功能相似的函数getTopActivity()也列出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ActivityRecord <span class="title">getTopActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = mActivities.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityRecord r = mActivities.get(i);</span><br><span class="line">        <span class="keyword">if</span> (r.finishing) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ActivityRecord <span class="title">topRunningActivityLocked</span><span class="params">(ActivityRecord notTop)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> activityNdx = mActivities.size() - <span class="number">1</span>; activityNdx &gt;= <span class="number">0</span>; --activityNdx) &#123;</span><br><span class="line">        ActivityRecord r = mActivities.get(activityNdx);</span><br><span class="line">        <span class="comment">// 除了要求ActivityRecord不是finishing状态以外，还要求不是当前给定输入的ActivityRecord</span></span><br><span class="line">        <span class="keyword">if</span> (!r.finishing &amp;&amp; r != notTop &amp;&amp; stack.okToShowLocked(r)) &#123;</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两者是从顶到底对任务栈进行遍历，但实现逻辑不同，topRunningActivityLocked()接受一个输入参数notTop，在寻找时，要求排除notTop指定的ActivityRecord，通常，传入的notTop都是null，隐含的意思就是栈顶的ActivityRecord还没有被销毁。从函数命名topRunning，也可以看出其与getTop的区别：getTop不管栈顶的死活，拿到就好; topRunning要求拿到的一定是活的栈顶。</p><p>另外，topRunningActivityLocked()还有一个限制条件： ActivityRecord是可以被显示的(okToShow)，这是通过ActivityStack.okToShowLocked()来判定的，主要是为了应多多用户或锁屏显示的Activity，一般情况下，函数返回值都为true。</p><p><code>场景 3</code> 假定在启动一个Activity时，设置了Intent的FLAG_ACTIVITY_REORDER_TO_FRONT，表示要将Activity重排序到任务栈顶。 如果目标的Activity在任务栈中已经启动过，则需要将其挪至栈顶。譬如目标任务栈从底到顶是 <code>A - B - C</code>， 然后，又以FLAG_ACTIVITY_REORDER_TO_FRONT启动了 A，那最终任务栈会变化为 <code>B - C - A</code> 。 这就会调用到moveActivityToFrontLocked()函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">moveActivityToFrontLocked</span><span class="params">(ActivityRecord newTop)</span> </span>&#123;</span><br><span class="line">    mActivities.remove(newTop);</span><br><span class="line">    mActivities.add(newTop);</span><br><span class="line">    updateEffectiveIntent();</span><br><span class="line">    setFrontOfTask();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数需要调整任务栈中ActivityRecord的顺序，延用上述例子， A 将作为参数newTop。 首先，会将 A 从任务栈中移除; 然后，再将 A 添加到任务栈顶; 接着，会调用updateEffectiveIntent()函数来更新任务栈关联的Intent：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateEffectiveIntent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> effectiveRootIndex = findEffectiveRootIndex();</span><br><span class="line">    <span class="keyword">final</span> ActivityRecord r = mActivities.get(effectiveRootIndex);</span><br><span class="line">    setIntent(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数会找到一个有效的Root Index，即任务栈底部的索引，根据这个索引值取出对应的ActivityRecord。 延续上述例子，B 会被调整为任务栈的根部ActivityRecord，通过调用setIntent()来设置当前任务栈关联的Intent为启动 B 的Intent，然而，这里可不止改变TaskRecord.intent这一个属性这个简单，与Taskrecord的发起者相关的属性值都要更改， 譬如mCallingUid，mCallingPackage都得更改为 B 的发起者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIntent</span><span class="params">(ActivityRecord r)</span> </span>&#123;</span><br><span class="line">    setIntent(r.intent, r.info);</span><br><span class="line">    mCallingUid = r.launchedFromUid;</span><br><span class="line">    mCallingPackage = r.launchedFromPackage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还有一个重载的setIntent()函数，不再展开分析了，只需要知道诸如affinity， realActivity等属性都会被重置即可。</p><p>更新完TaskRecord的Intent，再回到moveActivityToFrontLocked()函数中，需要继续更新任务栈的Front。 之前任务栈的Front是 A，在发生变化后， Front需要更新为 B，然而，TaskRecord并没有一个属性用来记录当前的Front， 它是根据任务栈中每一个ActivityRecord的frontOfTask属性来判定的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setFrontOfTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> foundFront = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> numActivities = mActivities.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> activityNdx = <span class="number">0</span>; activityNdx &lt; numActivities; ++activityNdx) &#123;</span><br><span class="line">        <span class="comment">// 从栈底往上遍历</span></span><br><span class="line">        <span class="keyword">final</span> ActivityRecord r = mActivities.get(activityNdx);</span><br><span class="line">        <span class="keyword">if</span> (foundFront || r.finishing) &#123;</span><br><span class="line">            <span class="comment">// 其他ActivityRecord的这个属性都置为false</span></span><br><span class="line">            r.frontOfTask = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 不为finishing状态，表示已经找到了front的ActivityRecord</span></span><br><span class="line">            r.frontOfTask = <span class="keyword">true</span>;</span><br><span class="line">            foundFront = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!foundFront &amp;&amp; numActivities &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        mActivities.get(<span class="number">0</span>).frontOfTask = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数从底到顶对任务栈进行遍历，找到的第一个未结束(finishing = faulse)的ActivityRecord， 将其frontOfTask属性设置成true;其他所有ActivtyRecord的frontOfTask属性设置为false。</p><h1 id="ActivityStack"><a href="#ActivityStack" class="headerlink" title="ActivityStack"></a>ActivityStack</h1><p>ActivityStack的职责是管理多个任务栈(TaskRecord)，它是一个栈式结构，栈中的元素是TaskRecord。 每个Activity在特定的时刻都会有一个状态，譬如显示、销毁等， 在应用进程看来，这些状态的变化就是在执行Activity的生命周期函数; 在系统进程看来，这些状态的变化都需要经过ActivityStack来驱动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ActivityState</span> </span>&#123;</span><br><span class="line">    INITIALIZING,</span><br><span class="line">    RESUMED,</span><br><span class="line">    PAUSING,</span><br><span class="line">    PAUSED,</span><br><span class="line">    STOPPING,</span><br><span class="line">    STOPPED,</span><br><span class="line">    FINISHING,</span><br><span class="line">    DESTROYING,</span><br><span class="line">    DESTROYED</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line"><span class="comment">/* The various modes for the method &#123;@link #removeTask&#125;. */</span></span><br><span class="line"><span class="comment">// Task is being completely removed from all stacks in the system.</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REMOVE_TASK_MODE_DESTROYING = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// Task is being removed from this stack so we can add it to another stack. In the case we are</span></span><br><span class="line"><span class="comment">// moving we don&#x27;t want to perform some operations on the task like removing it from window</span></span><br><span class="line"><span class="comment">// manager or recents.</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REMOVE_TASK_MODE_MOVING = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// Similar to &#123;@link #REMOVE_TASK_MODE_MOVING&#125; and the task will be added to the top of its new</span></span><br><span class="line"><span class="comment">// stack and the new stack will be on top of all stacks.</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REMOVE_TASK_MODE_MOVING_TO_TOP = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The height/width divide used when fitting a task within a bounds with method</span></span><br><span class="line"><span class="comment">// &#123;@link #fitWithinBounds&#125;.</span></span><br><span class="line"><span class="comment">// We always want the task to to be visible in the bounds without affecting its size when</span></span><br><span class="line"><span class="comment">// fitting. To make sure this is the case, we don&#x27;t adjust the task left or top side pass</span></span><br><span class="line"><span class="comment">// the input bounds right or bottom side minus the width or height divided by this value.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FIT_WITHIN_BOUNDS_DIVIDER = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> ActivityManagerService mService;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WindowManagerService mWindowManager;</span><br><span class="line">T mWindowContainerController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The back history of all previous (and possibly still</span></span><br><span class="line"><span class="comment"> * running) activities.  It contains #TaskRecord objects.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;TaskRecord&gt; mTaskHistory = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * List of running activities, sorted by recent usage.</span></span><br><span class="line"><span class="comment"> * The first entry in the list is the least recently used.</span></span><br><span class="line"><span class="comment"> * It contains HistoryRecord objects.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> ArrayList&lt;ActivityRecord&gt; mLRUActivities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * When we are in the process of pausing an activity, before starting the</span></span><br><span class="line"><span class="comment"> * next one, this variable holds the activity that is currently being paused.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ActivityRecord mPausingActivity = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This is the last activity that we put into the paused state.  This is</span></span><br><span class="line"><span class="comment"> * used to determine if we need to do an activity transition while sleeping,</span></span><br><span class="line"><span class="comment"> * when we normally hold the top activity paused.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ActivityRecord mLastPausedActivity = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Activities that specify No History must be removed once the user navigates away from them.</span></span><br><span class="line"><span class="comment"> * If the device goes to sleep with such an activity in the paused state then we save it here</span></span><br><span class="line"><span class="comment"> * and finish it later if another activity replaces it on wakeup.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ActivityRecord mLastNoHistoryActivity = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Current activity that is resumed, or null if there is none.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ActivityRecord mResumedActivity = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The topmost Activity passed to convertToTranslucent(). When non-null it means we are</span></span><br><span class="line"><span class="comment">// waiting for all Activities in mUndrawnActivitiesBelowTopTranslucent to be removed as they</span></span><br><span class="line"><span class="comment">// are drawn. When the last member of mUndrawnActivitiesBelowTopTranslucent is removed the</span></span><br><span class="line"><span class="comment">// Activity in mTranslucentActivityWaiting is notified via</span></span><br><span class="line"><span class="comment">// Activity.onTranslucentConversionComplete(false). If a timeout occurs prior to the last</span></span><br><span class="line"><span class="comment">// background activity being drawn then the same call will be made with a true value.</span></span><br><span class="line">ActivityRecord mTranslucentActivityWaiting = <span class="keyword">null</span>;</span><br><span class="line">ArrayList&lt;ActivityRecord&gt; mUndrawnActivitiesBelowTopTranslucent = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set when we know we are going to be calling updateConfiguration()</span></span><br><span class="line"><span class="comment"> * soon, so want to skip intermediate config checks.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">boolean</span> mConfigWillChange;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * When set, will force the stack to report as invisible.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">boolean</span> mForceHidden = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mUpdateBoundsDeferred;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mUpdateBoundsDeferredCalled;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Rect mDeferredBounds = <span class="keyword">new</span> Rect();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Rect mDeferredTaskBounds = <span class="keyword">new</span> Rect();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Rect mDeferredTaskInsetBounds = <span class="keyword">new</span> Rect();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mCurrentUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> mStackId;</span><br><span class="line"><span class="comment">/** The attached Display&#x27;s unique identifier, or -1 if detached */</span></span><br><span class="line"><span class="keyword">int</span> mDisplayId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SparseArray&lt;Rect&gt; mTmpBounds = <span class="keyword">new</span> SparseArray&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SparseArray&lt;Rect&gt; mTmpInsetBounds = <span class="keyword">new</span> SparseArray&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Rect mTmpRect2 = <span class="keyword">new</span> Rect();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ActivityOptions mTmpOptions = ActivityOptions.makeBasic();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** List for processing through a set of activities */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;ActivityRecord&gt; mTmpActivities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Run all ActivityStacks through this */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> ActivityStackSupervisor mStackSupervisor;</span><br></pre></td></tr></table></figure><p>从INITIALIZING到DESTROYED，所定义状态值示意了Activity生命周期的走向。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>stackId</td><td>每一个ActivityStack都有一个编号，从0开始递增。编号为0，表示桌面(Launcher)所在的ActivityStack，叫做Home Stack</td></tr><tr><td>mTaskHistory</td><td>TaskRecord数组，ActivityStack栈就是通过这个数组实现的</td></tr><tr><td>mPausingActivity</td><td>在发生Activity切换时，正处于Pausing状态的Activity</td></tr><tr><td>mResumedActivity</td><td>当前处于Resumed状态的ActivityRecord</td></tr><tr><td>mStacks</td><td>ActivityStack会绑定到一个显示设备上，譬如手机屏幕、投影仪等，在AMS中，通过ActivityDisplay这个类来抽象表示一个显示设备，ActivityDisplay.mStacks表示当前已经绑定到显示设备的所有ActivityStack。当执行一次绑定操作时，就会将ActivityStack.mStacks这个属性赋值成ActivityDisplay.mStacks，否则，ActivityStack.mStacks就为null。简而言之，当mStacks不为null时，表示当前ActivityStack已经绑定到了一个显示设备</td></tr></tbody></table><p>Activity状态的变迁，不仅仅是给ActivityRecord.state赋一个状态值那么简单，ActivityStack要对栈进行调整：之前的Activity要销毁或者挪到后台，待显示的Activity要挪到栈顶，这一调整，涉及到的工作就多了。</p><table><thead><tr><th>行为</th><th>描述</th></tr></thead><tbody><tr><td>findTaskLocked()</td><td>该函数的功能是找到目标ActivityRecord(target)所在的任务栈(TaskRecord)，如果找到，则返回栈顶的ActivityRecord，否则，返回null</td></tr><tr><td>findActivityLocked()</td><td>根据Intent和ActivityInfo这两个参数可以获取一个Activity的包名，该函数会从栈顶至栈底遍历ActivityStack中的所有Activity，如果包名匹配成功，就返回</td></tr><tr><td>moveToFront)</td><td>该函数用于将当前的ActivityStack挪到前台，执行时，调用ActivityStack中的其他一些判定函数</td></tr><tr><td>isAttached()</td><td>用于判定当前ActivityStack是否已经绑定到显示设备</td></tr><tr><td>isOnHomeDisplay()</td><td>用于判定当前是否为默认的显示设备(Display.DEFAULT_DISPLAY)，通常，默认的显示设备就是手机屏幕</td></tr><tr><td>isHomeStack()</td><td>用于判定当前ActivityStack是否为Home Stack，即判定当前显示的是否为桌面(Launcher)</td></tr><tr><td>moveTaskToFrontLocked()</td><td>该函数用于将指定的任务栈挪到当前ActivityStack的最前面。在Activity状态变化时，需要对已有的ActivityStack中的任务栈进行调整，待显示Activity的宿主任务需要挪到前台</td></tr><tr><td>insertTaskAtTop()</td><td>将任务插入ActivityStack栈顶</td></tr></tbody></table><p>ActivityStack还有很多与迁移Activity状态相关的行为： startActivityLocked()， resumeTopActivityLocked()， completeResumeLocked()， startPausingLocked()， completePauseLocked()， stopActivityLocked()， activityPausedLocked()， finishActivityLocked()， activityDestroyedLocked()， 它们与Activity的生命周期调度息息相关。</p><p><code>场景 1</code> 以singleTask的方式启动一个处于后台的Activity，那么，就需要将Activity挪到前台。怎么挪呢？</p><p>第一步，findTaskLocked(): 找到Activity所在TaskRecord;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ActivityRecord <span class="title">findTaskLocked</span><span class="params">(ActivityRecord target)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> taskNdx = mTaskHistory.size() - <span class="number">1</span>; taskNdx &gt;= <span class="number">0</span>; --taskNdx) &#123;</span><br><span class="line">        <span class="keyword">final</span> TaskRecord task = mTaskHistory.get(taskNdx);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">final</span> ActivityRecord r = task.getTopActivity();</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">final</span> Intent taskIntent = task.intent;</span><br><span class="line">        <span class="keyword">final</span> Intent affinityIntent = task.affinityIntent;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (!isDocument &amp;&amp; !taskIsDocument &amp;&amp; task.rootAffinity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (task.rootAffinity.equals(target.taskAffinity)) &#123;</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (taskIntent != <span class="keyword">null</span> &amp;&amp; taskIntent.getComponent() != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            taskIntent.getComponent().compareTo(cls) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">            Objects.equals(documentData, taskDocumentData)) &#123;</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="function"><span class="keyword">if</span> <span class="title">if</span> <span class="params">(affinityIntent != <span class="keyword">null</span> &amp;&amp; affinityIntent.getComponent()</span> !</span>= <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            affinityIntent.getComponent().compareTo(cls) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">            Objects.equals(documentData, taskDocumentData)) &#123;</span><br><span class="line">            <span class="keyword">return</span> r</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数的功能是找到target ActivityRecord所在的Task，如果找到，则返回Task栈顶的ActivityRecord，否则，返回null。 主体逻辑是对ActivityStack中的所有Task进行遍历，以下几种情况表示找到了ActivityRecord的宿主task：</p><ul><li>Affinity相同。rootAffinity表示第一次启动该task时affinity值，如果一个ActivityRecord的taskAffinity属性与其相等， 那么这个task自然是ActivityRecord的宿主;</li><li>Intent的包名相同。</li><li>Affinity Intent的包名相同。</li></ul><p>第二步，moveToFront(): 将TaskRecord所在的ActivityStack挪到前台;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">moveToFront</span><span class="params">(String reason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isAttached()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isOnHomeDisplay()) &#123;</span><br><span class="line">            mStackSupervisor.moveHomeStack(isHomeStack(), reason);</span><br><span class="line">        &#125;</span><br><span class="line">        mStacks.remove(<span class="keyword">this</span>);</span><br><span class="line">        mStacks.add(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">final</span> TaskRecord task = topTask();</span><br><span class="line">        <span class="keyword">if</span> (task != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mWindowManager.moveTaskToTop(task.taskId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，会有一些判定：</p><ul><li>isAttached()： 只有在当前ActivityStack绑定到显示设备的情况下，才需要挪到;</li><li>isOnHomeDisplay()： 如果当前是默认的显示设备，则对HomeStack(桌面)进行挪动， 这涉及到对多个ActivityStack的操作，所以需要通过ActivityStackSupervisor完成;</li><li>isHomeStack()： 如果当前是HomeStack，则将其挪到前后; 否则，将HomeStack挪到后台</li></ul><p>然后，就是对mStacks这个属性进行操作：在mStacks数组中，删除已有的ActivityStack对象，并添加一个新的，这样做其实达到了一个目的，前台的ActivityStacks处于mStacks末尾。</p><p>最后，调用WMS.moveTaskToTop()通知窗口的进行变化调整。</p><p>第三步， moveTaskToFrontLocked(): 将TaskRecord挪到ActivityStack的栈顶;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">moveTaskToFrontLocked</span><span class="params">(TaskRecord tr, ActivityRecord source, Bundle options,</span></span></span><br><span class="line"><span class="function"><span class="params">            String reason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> numTasks = mTaskHistory.size();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> index = mTaskHistory.indexOf(tr);</span><br><span class="line">    <span class="comment">// 判定ActivityStack是否需要挪动任务栈</span></span><br><span class="line">    <span class="keyword">if</span> (numTasks == <span class="number">0</span> || index &lt; <span class="number">0</span>)  &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调整ActivityStack</span></span><br><span class="line">    insertTaskAtTop(tr);</span><br><span class="line">    moveToFront(reason);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 将栈顶的Activity置为Resumed状态</span></span><br><span class="line">    mStackSupervisor.resumeTopActivitiesLocked();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，会经过判定：如果当前的ActivityStack为空，或者不存在要挪动的任务，则不需要对当前ActivityStack进行调整;</p><p>然后，确定目标任务在当前ActivityStack中，则对ActivityStack进行调整，将目标任务插入ActivityStack栈顶。</p><ul><li>insertTaskAtTop()，会先将已有的目标任务删除，再重新添加到栈顶位置;</li><li>moveToFront()，在第二步中执行过一次，因为在某些场景下，只会调用moveToFront()，不会调用moveTaskToFrontLocked(); 一旦要将任务挪到ActivityStack栈顶，意味着ActivityStack也一定要挪到前台;</li></ul><p>最后，将任务栈顶的Activity置为Resumed状态，这里是通过ActivityStackSupervisor完成的。因为可能同时存在多个显示设备，所以需要对多个ActivityStack进行操作。</p><blockquote><p>Activity管理中有两个栈顶：一是ActivityStack的栈顶，它对应到要显示的TaskRecord; 二是TaskRecord的栈顶，它对应到要显示的Activity。简单来说，当前显示的Activity一定是位于其所属的TaskRecord的栈顶，TaskRecord也一定位于其所属的ActivityStack的栈顶。</p></blockquote><h1 id="ActivityDisplay"><a href="#ActivityDisplay" class="headerlink" title="ActivityDisplay"></a>ActivityDisplay</h1><p>Android支持多屏显示，在不同的显示设备上可以有不同的ActivityStack。</p><p>所有的ActivityStack都是通过ActivityStackSupervisor管理起来的。ActivityDisplay对应到一个显示设备，默认的显示设备是手机屏幕。 ActivityStackSupervisor间接通过ActivityDisplay来维护多个ActivityStack的状态。 ActivityStack有一个属性是mStacks，当mStacks不为空时，表示ActivityStack已经绑定到了显示设备， 其实ActivityStack.mStacks只是一个副本，真正的对象在ActivityDisplay中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ActivityStackSupervisor mSupervisor;</span><br><span class="line"><span class="comment">/** Actual Display this object tracks. */</span></span><br><span class="line"><span class="keyword">int</span> mDisplayId;</span><br><span class="line">Display mDisplay;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * All of the stacks on this display. Order matters, topmost stack is in front of all other</span></span><br><span class="line"><span class="comment"> * stacks, bottommost behind. Accessed directly by ActivityManager package classes. Any calls</span></span><br><span class="line"><span class="comment"> * changing the list should also call &#123;<span class="doctag">@link</span> #onStackOrderChanged()&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;ActivityStack&gt; mStacks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;OnStackOrderChangedListener&gt; mStackOrderChangedCallbacks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Array of all UIDs that are present on the display. */</span></span><br><span class="line"><span class="keyword">private</span> IntArray mDisplayAccessUIDs = <span class="keyword">new</span> IntArray();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** All tokens used to put activities on this stack to sleep (including mOffToken) */</span></span><br><span class="line"><span class="keyword">final</span> ArrayList&lt;ActivityManagerInternal.SleepToken&gt; mAllSleepTokens = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">/** The token acquired by ActivityStackSupervisor to put stacks on the display to sleep */</span></span><br><span class="line">ActivityManagerInternal.SleepToken mOffToken;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mSleeping;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cached reference to some special stacks we tend to get a lot so we don&#x27;t need to loop</span></span><br><span class="line"><span class="comment">// through the list to find them.</span></span><br><span class="line"><span class="keyword">private</span> ActivityStack mHomeStack = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> ActivityStack mRecentsStack = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> ActivityStack mPinnedStack = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> ActivityStack mSplitScreenPrimaryStack = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Used in updating the display size</span></span><br><span class="line"><span class="keyword">private</span> Point mTmpDisplaySize = <span class="keyword">new</span> Point();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> DisplayWindowController mWindowContainerController;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>mDisplayId</td><td>显示设备的唯一标识</td></tr><tr><td>mDisplay</td><td>获取显示设备信息的工具类，</td></tr><tr><td>mDisplayInfo</td><td>显示设备信息的数据结构，包括类型、大小、分辨率等</td></tr><tr><td>mStacks</td><td>/**<br>     * All of the stacks on this display. Order matters, topmost stack is in front of all other<br>     * stacks, bottommost behind. Accessed directly by ActivityManager package classes. Any calls<br>     * changing the list should also call {@link #onStackOrderChanged()}.<br>     */  绑定到显示设备上的ActivityStack</td></tr></tbody></table><table><thead><tr><th>行为</th><th>描述</th></tr></thead><tbody><tr><td>attachActivities()</td><td>将一个ActivityStack绑定到显示设备</td></tr><tr><td>setVisibleBehindActivity()</td><td>设置后台显示的Activity</td></tr><tr><td>moveHomeStack()</td><td>移动HomeStack</td></tr></tbody></table><h1 id="ActivityContainer"><a href="#ActivityContainer" class="headerlink" title="ActivityContainer"></a>ActivityContainer</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityContainer</span> <span class="keyword">extends</span> <span class="title">WindowManagerState</span>.<span class="title">ConfigurationContainer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> mFullscreen;</span><br><span class="line">    <span class="keyword">protected</span> Rect mBounds;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> mMinWidth = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> mMinHeight = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ActivityContainer(ConfigurationContainerProto proto) &#123;</span><br><span class="line">        <span class="keyword">super</span>(proto);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Rect <span class="title">getBounds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBounds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isFullscreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mFullscreen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMinWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mMinWidth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMinHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mMinHeight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ActivityStackSupervisor"><a href="#ActivityStackSupervisor" class="headerlink" title="ActivityStackSupervisor"></a>ActivityStackSupervisor</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ActivityManagerService</span><span class="params">(Context systemContext)</span> </span>&#123;</span><br><span class="line">...........</span><br><span class="line">mStackSupervisor = createStackSupervisor();</span><br><span class="line">    mStackSupervisor.onConfigurationChanged(mTempConfig);</span><br><span class="line">    mKeyguardController = mStackSupervisor.getKeyguardController();</span><br><span class="line">    mCompatModePackages = <span class="keyword">new</span> CompatModePackages(<span class="keyword">this</span>, systemDir, mHandler);</span><br><span class="line">    mIntentFirewall = <span class="keyword">new</span> IntentFirewall(<span class="keyword">new</span> IntentFirewallInterface(), mHandler);</span><br><span class="line">    mTaskChangeNotificationController =</span><br><span class="line">        <span class="keyword">new</span> TaskChangeNotificationController(<span class="keyword">this</span>, mStackSupervisor, mHandler);</span><br><span class="line">    mActivityStartController = <span class="keyword">new</span> ActivityStartController(<span class="keyword">this</span>);</span><br><span class="line">    mRecentTasks = createRecentTasks();</span><br><span class="line">    mStackSupervisor.setRecentTasks(mRecentTasks);</span><br><span class="line">    mLockTaskController = <span class="keyword">new</span> LockTaskController(mContext, mStackSupervisor, mHandler);</span><br><span class="line">    .............</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ActivityStackSupervisor <span class="title">createStackSupervisor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityStackSupervisor supervisor = <span class="keyword">new</span> ActivityStackSupervisor(<span class="keyword">this</span>,mHandler.getLooper());</span><br><span class="line">        supervisor.initialize();</span><br><span class="line">        <span class="keyword">return</span> supervisor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/images/AMS-ActivityStack/image-20201214155050544.png" alt="image-20201214155050544"></p><p>ActivityStackSupervisor是ActivityStack的管理者，内部管理了mHomeStack、mFocusedStack和mLastFocusedStack三个ActivityStack。其中，mHomeStack管理的是Launcher相关的Activity栈， stackId为0；mFocusedStack管理的是当前显示在前台Activity的Activity栈；mLastFocusedStack管理的是上一次显示在前台Activity的Activity栈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** The stack containing the launcher app. Assumed to always be attached to</span></span><br><span class="line"><span class="comment">     * Display.DEFAULT_DISPLAY. */</span></span><br><span class="line">    ActivityStack mHomeStack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The stack currently receiving input or launching the next activity. */</span></span><br><span class="line">    ActivityStack mFocusedStack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** If this is the same as mFocusedStack then the activity on the top of the focused stack has</span></span><br><span class="line"><span class="comment">     * been resumed. If stacks are changing position this will hold the old stack until the new</span></span><br><span class="line"><span class="comment">     * stack becomes resumed after which it will be set to mFocusedStack. */</span></span><br><span class="line">    <span class="keyword">private</span> ActivityStack mLastFocusedStack;</span><br></pre></td></tr></table></figure><p>ActivityStackSupervisor的职责是管理多个ActivityStack。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>mHomeStack</td><td>主屏(桌面)所在ActivityStack</td></tr><tr><td>mFocusedStack</td><td>表示焦点ActivityStack，它能够获取用户输入</td></tr><tr><td>mLastFocusedStack</td><td>上一个焦点ActivityStack</td></tr><tr><td>mActivityDisplays</td><td>表示当前的显示设备，ActivityDisplay中绑定了若干ActivityStack。通过该属性就能间接获取所有ActivityStack的信息</td></tr></tbody></table><table><thead><tr><th>行为</th><th>描述</th></tr></thead><tbody><tr><td>setFocusedStack()</td><td>设置当前的焦点ActivityStack</td></tr><tr><td>adjustStackFocus()</td><td></td></tr><tr><td>startHomeActivity()</td><td>启动桌面</td></tr></tbody></table><p>ActivityStackSupervisor有很多与ActivityStack功能类似的行为，不过都是针对多个ActivityStack进行操作。 譬如findTaskLocked()， findActivityLocked()， topRunningActivityLocked(), ensureActivitiesVisibleLocked()等，</p><p><code>场景 1</code> 在启动一个新的Activity时，需要设置当前的焦点，通过AMS.setFocusedActivityLocked()函数，就能设置一个 ActivityRecord为当前的焦点Activity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setFocusedActivityLocked</span><span class="params">(ActivityRecord r, String reason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mFocusedActivity != r) &#123;</span><br><span class="line">        mFocusedActivity = r;</span><br><span class="line">        ...</span><br><span class="line">        mStackSupervisor.setFocusedStack(r, reason + <span class="string">&quot; setFocusedActivity&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mWindowManager.setFocusedApp(r.appToken, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        applyUpdateLockStateLocked(r);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数的逻辑很简单，如果当前的焦点(mFocusedActivity)不是待显示的(r)，则需要更新焦点; 然后，就发起了其他函数调用。 这里，需要通过ActivityStackSupervisor完成对ActivityStack的管理，通过调用setFocusedStack()来设置当前的焦点Stack， 焦点Stack就是焦点Activity所属的ActivityStack。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFocusedStack</span><span class="params">(ActivityRecord r, String reason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> TaskRecord task = r.task;</span><br><span class="line">        <span class="comment">// 判断输入的ActivityRecord是否为HomeActivity</span></span><br><span class="line">        <span class="keyword">boolean</span> isHomeActivity = !r.isApplicationActivity();</span><br><span class="line">        <span class="keyword">if</span> (!isHomeActivity &amp;&amp; task != <span class="keyword">null</span>) &#123;</span><br><span class="line">            isHomeActivity = !task.isApplicationTask();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isHomeActivity &amp;&amp; task != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> ActivityRecord parent = task.stack.mActivityContainer.mParentActivity;</span><br><span class="line">            isHomeActivity = parent != <span class="keyword">null</span> &amp;&amp; parent.isHomeActivity();</span><br><span class="line">        &#125;</span><br><span class="line">        moveHomeStack(isHomeActivity, reason);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有前台的ActivityStack才能获取焦点，所以，该函数的功能就是要将待显示的Activity所在的ActivityStack挪到前台。 很重要的一个处理逻辑就是判定待显示的ActivityRecord的类型是否为HomeActivity，判定细节此处不表。结果是： 如果待显示的ActivityRecord类型为HomeActivity，则需要将HomeStack挪到前台; 否则，意味着要将HomeStack挪到后台。 挪动HomeStack，是通过moveHomeStack()这个函数实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveHomeStack</span><span class="params">(<span class="keyword">boolean</span> toFront, String reason)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获取当前的Top Stack</span></span><br><span class="line">    ArrayList&lt;ActivityStack&gt; stacks = mHomeStack.mStacks;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> topNdx = stacks.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (topNdx &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ActivityStack topStack = stacks.get(topNdx);</span><br><span class="line">    <span class="comment">// 2. 判定HomeStack是否需要挪动</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> homeInFront = topStack == mHomeStack;</span><br><span class="line">    <span class="keyword">if</span> (homeInFront != toFront) &#123;</span><br><span class="line">        mLastFocusedStack = topStack;</span><br><span class="line">        stacks.remove(mHomeStack);</span><br><span class="line">        stacks.add(toFront ? topNdx : <span class="number">0</span>, mHomeStack);</span><br><span class="line">        mFocusedStack = stacks.get(topNdx);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 3. 判定当前AMS是否完成启动</span></span><br><span class="line">    <span class="keyword">if</span> (mService.mBooting || !mService.mBooted) &#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityRecord r = topRunningActivityLocked();</span><br><span class="line">        <span class="keyword">if</span> (r != <span class="keyword">null</span> &amp;&amp; r.idle) &#123;</span><br><span class="line">            checkFinishBootingLocked();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.获取当前的Top Stack，其实就是获取mStacks这个数组最后的元素。mStacks这个属性在ActivityStack和ActivityDisplay中都见过，它们是同一个东西，ActivityStackSupervisor要管理的就是这个东西;</p><p>2.判定当前HomeStack是否需要挪动。有四种情况：</p><ul><li>homeInFront = true, toFront = false： 表示HomeStack在前台，要将其挪到后台，则需要将HomeStack挪到mStacks的0号位置;</li><li>homeInFront = true, toFront = true： 表示HomeStack在前台，要将其挪到前台，则不需要对mStacks进行调整;</li><li>homeInFront = false, toFront = true： 表示HomeStack在后台，要将其挪到前台，则需要将HomeStack挪到mStacks的末尾;</li><li>homeInFront = false, toFront = false： 表示HomeStack在后台，要将其挪到后台，则不需要对mStacks进行调整。</li></ul><p>3.判断当前AMS是否完成启动。如果当前是刚开机，AMS都还未启动完成，需要显示的Activity还处于idle状态，则需要发起一次是否启动完成的检查</p><h1 id="ProcessRecord"><a href="#ProcessRecord" class="headerlink" title="ProcessRecord"></a>ProcessRecord</h1><p>AMS采用ProcessRecord这个数据结构来维护进程运行时的状态信息，当创建系统进程(system_process)或应用进程的时候，就会通过AMS初始化一个ProcessRecord。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Full information about a particular process that</span></span><br><span class="line"><span class="comment"> * is currently running.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessRecord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = TAG_WITH_CLASS_NAME ? <span class="string">&quot;ProcessRecord&quot;</span> : TAG_AM;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ActivityManagerService mService; <span class="comment">// where we came from</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BatteryStatsImpl mBatteryStats; <span class="comment">// where to collect runtime statistics</span></span><br><span class="line">    <span class="keyword">final</span> ApplicationInfo info; <span class="comment">// all about the first app in the process</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isolated;     <span class="comment">// true if this is a special isolated process</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> uid;              <span class="comment">// uid of process; may be different from &#x27;info&#x27; if isolated</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> userId;           <span class="comment">// user of process.</span></span><br><span class="line">    <span class="keyword">final</span> String processName;   <span class="comment">// name of the process</span></span><br><span class="line">    <span class="comment">// List of packages running in the process</span></span><br><span class="line">    <span class="keyword">final</span> ArrayMap&lt;String, ProcessStats.ProcessStateHolder&gt; pkgList = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">final</span> ProcessList.ProcStateMemTracker procStateMemTracker</span><br><span class="line">            = <span class="keyword">new</span> ProcessList.ProcStateMemTracker();</span><br><span class="line">    UidRecord uidRecord;        <span class="comment">// overall state of process&#x27;s uid.</span></span><br><span class="line">    ArraySet&lt;String&gt; pkgDeps;   <span class="comment">// additional packages we have a dependency on</span></span><br><span class="line">    IApplicationThread thread;  <span class="comment">// the actual proc...  may be null only if</span></span><br><span class="line">                                <span class="comment">// &#x27;persistent&#x27; is true (in which case we</span></span><br><span class="line">                                <span class="comment">// are in the process of launching the app)</span></span><br><span class="line">    ProcessState baseProcessTracker;</span><br><span class="line">    BatteryStatsImpl.Uid.Proc curProcBatteryStats;</span><br><span class="line">    <span class="keyword">int</span> pid;                    <span class="comment">// The process of this application; 0 if none</span></span><br><span class="line">    String procStatFile;        <span class="comment">// path to /proc/&lt;pid&gt;/stat</span></span><br><span class="line">    <span class="keyword">int</span>[] gids;                 <span class="comment">// The gids this process was launched with</span></span><br><span class="line">    String requiredAbi;         <span class="comment">// The ABI this process was launched with</span></span><br><span class="line">    String instructionSet;      <span class="comment">// The instruction set this process was launched with</span></span><br><span class="line">    <span class="keyword">boolean</span> starting;           <span class="comment">// True if the process is being started</span></span><br><span class="line">    <span class="keyword">long</span> lastActivityTime;      <span class="comment">// For managing the LRU list</span></span><br><span class="line">    <span class="keyword">long</span> lastPssTime;           <span class="comment">// Last time we retrieved PSS data</span></span><br><span class="line">    <span class="keyword">long</span> nextPssTime;           <span class="comment">// Next time we want to request PSS data</span></span><br><span class="line">    <span class="keyword">long</span> lastStateTime;         <span class="comment">// Last time setProcState changed</span></span><br><span class="line">    <span class="keyword">long</span> initialIdlePss;        <span class="comment">// Initial memory pss of process for idle maintenance.</span></span><br><span class="line">    <span class="keyword">long</span> lastPss;               <span class="comment">// Last computed memory pss.</span></span><br><span class="line">    <span class="keyword">long</span> lastSwapPss;           <span class="comment">// Last computed SwapPss.</span></span><br><span class="line">    <span class="keyword">long</span> lastCachedPss;         <span class="comment">// Last computed pss when in cached state.</span></span><br><span class="line">    <span class="keyword">long</span> lastCachedSwapPss;     <span class="comment">// Last computed SwapPss when in cached state.</span></span><br><span class="line">    <span class="keyword">int</span> maxAdj;                 <span class="comment">// Maximum OOM adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> curRawAdj;              <span class="comment">// Current OOM unlimited adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> setRawAdj;              <span class="comment">// Last set OOM unlimited adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> curAdj;                 <span class="comment">// Current OOM adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> setAdj;                 <span class="comment">// Last set OOM adjustment for this process</span></span><br><span class="line">    <span class="keyword">int</span> verifiedAdj;            <span class="comment">// The last adjustment that was verified as actually being set</span></span><br><span class="line">    <span class="keyword">int</span> curSchedGroup;          <span class="comment">// Currently desired scheduling class</span></span><br><span class="line">    <span class="keyword">int</span> setSchedGroup;          <span class="comment">// Last set to background scheduling class</span></span><br><span class="line">    <span class="keyword">int</span> vrThreadTid;            <span class="comment">// Thread currently set for VR scheduling</span></span><br><span class="line">    <span class="keyword">int</span> trimMemoryLevel;        <span class="comment">// Last selected memory trimming level</span></span><br><span class="line">    <span class="keyword">int</span> curProcState = PROCESS_STATE_NONEXISTENT; <span class="comment">// Currently computed process state</span></span><br><span class="line">    <span class="keyword">int</span> repProcState = PROCESS_STATE_NONEXISTENT; <span class="comment">// Last reported process state</span></span><br><span class="line">    <span class="keyword">int</span> setProcState = PROCESS_STATE_NONEXISTENT; <span class="comment">// Last set process state in process tracker</span></span><br><span class="line">    <span class="keyword">int</span> pssProcState = PROCESS_STATE_NONEXISTENT; <span class="comment">// Currently requesting pss for</span></span><br><span class="line">    <span class="keyword">int</span> pssStatType;            <span class="comment">// The type of stat collection that we are currently requesting</span></span><br><span class="line">    <span class="keyword">int</span> savedPriority;          <span class="comment">// Previous priority value if we&#x27;re switching to non-SCHED_OTHER</span></span><br><span class="line">    <span class="keyword">int</span> renderThreadTid;        <span class="comment">// TID for RenderThread</span></span><br><span class="line">    <span class="keyword">boolean</span> serviceb;           <span class="comment">// Process currently is on the service B list</span></span><br><span class="line">    <span class="keyword">boolean</span> serviceHighRam;     <span class="comment">// We are forcing to service B list due to its RAM use</span></span><br><span class="line">    <span class="keyword">boolean</span> notCachedSinceIdle; <span class="comment">// Has this process not been in a cached state since last idle?</span></span><br><span class="line">    <span class="keyword">boolean</span> hasClientActivities;  <span class="comment">// Are there any client services with activities?</span></span><br><span class="line">    <span class="keyword">boolean</span> hasStartedServices; <span class="comment">// Are there any started services running in this process?</span></span><br><span class="line">    <span class="keyword">boolean</span> foregroundServices; <span class="comment">// Running any services that are foreground?</span></span><br><span class="line">    <span class="keyword">boolean</span> foregroundActivities; <span class="comment">// Running any activities that are foreground?</span></span><br><span class="line">    <span class="keyword">boolean</span> repForegroundActivities; <span class="comment">// Last reported foreground activities.</span></span><br><span class="line">    <span class="keyword">boolean</span> systemNoUi;         <span class="comment">// This is a system process, but not currently showing UI.</span></span><br><span class="line">    <span class="keyword">boolean</span> hasShownUi;         <span class="comment">// Has UI been shown in this process since it was started?</span></span><br><span class="line">    <span class="keyword">boolean</span> hasTopUi;           <span class="comment">// Is this process currently showing a non-activity UI that the user</span></span><br><span class="line">                                <span class="comment">// is interacting with? E.g. The status bar when it is expanded, but</span></span><br><span class="line">                                <span class="comment">// not when it is minimized. When true the</span></span><br><span class="line">                                <span class="comment">// process will be set to use the ProcessList#SCHED_GROUP_TOP_APP</span></span><br><span class="line">                                <span class="comment">// scheduling group to boost performance.</span></span><br><span class="line">    <span class="keyword">boolean</span> hasOverlayUi;       <span class="comment">// Is the process currently showing a non-activity UI that</span></span><br><span class="line">                                <span class="comment">// overlays on-top of activity UIs on screen. E.g. display a window</span></span><br><span class="line">                                <span class="comment">// of type</span></span><br><span class="line">                                <span class="comment">// android.view.WindowManager.LayoutParams#TYPE_APPLICATION_OVERLAY</span></span><br><span class="line">                                <span class="comment">// When true the process will oom adj score will be set to</span></span><br><span class="line">                                <span class="comment">// ProcessList#PERCEPTIBLE_APP_ADJ at minimum to reduce the chance</span></span><br><span class="line">                                <span class="comment">// of the process getting killed.</span></span><br><span class="line">    <span class="keyword">boolean</span> runningRemoteAnimation; <span class="comment">// Is the process currently running a RemoteAnimation? When true</span></span><br><span class="line">                                <span class="comment">// the process will be set to use the</span></span><br><span class="line">                                <span class="comment">// ProcessList#SCHED_GROUP_TOP_APP scheduling group to boost</span></span><br><span class="line">                                <span class="comment">// performance, as well as oom adj score will be set to</span></span><br><span class="line">                                <span class="comment">// ProcessList#VISIBLE_APP_ADJ at minimum to reduce the chance</span></span><br><span class="line">                                <span class="comment">// of the process getting killed.</span></span><br><span class="line">    <span class="keyword">boolean</span> pendingUiClean;     <span class="comment">// Want to clean up resources from showing UI?</span></span><br><span class="line">    <span class="keyword">boolean</span> hasAboveClient;     <span class="comment">// Bound using BIND_ABOVE_CLIENT, so want to be lower</span></span><br><span class="line">    <span class="keyword">boolean</span> treatLikeActivity;  <span class="comment">// Bound using BIND_TREAT_LIKE_ACTIVITY</span></span><br><span class="line">    <span class="keyword">boolean</span> bad;                <span class="comment">// True if disabled in the bad process list</span></span><br><span class="line">    <span class="keyword">boolean</span> killedByAm;         <span class="comment">// True when proc has been killed by activity manager, not for RAM</span></span><br><span class="line">    <span class="keyword">boolean</span> killed;             <span class="comment">// True once we know the process has been killed</span></span><br><span class="line">    <span class="keyword">boolean</span> procStateChanged;   <span class="comment">// Keep track of whether we changed &#x27;setAdj&#x27;.</span></span><br><span class="line">    <span class="keyword">boolean</span> reportedInteraction;<span class="comment">// Whether we have told usage stats about it being an interaction</span></span><br><span class="line">    <span class="keyword">boolean</span> unlocked;           <span class="comment">// True when proc was started in user unlocked state</span></span><br><span class="line">    <span class="keyword">long</span> interactionEventTime;  <span class="comment">// The time we sent the last interaction event</span></span><br><span class="line">    <span class="keyword">long</span> fgInteractionTime;     <span class="comment">// When we became foreground for interaction purposes</span></span><br><span class="line">    String waitingToKill;       <span class="comment">// Process is waiting to be killed when in the bg, and reason</span></span><br><span class="line">    Object forcingToImportant;  <span class="comment">// Token that is forcing this process to be important</span></span><br><span class="line">    <span class="keyword">int</span> adjSeq;                 <span class="comment">// Sequence id for identifying oom_adj assignment cycles</span></span><br><span class="line">    <span class="keyword">int</span> completedAdjSeq;        <span class="comment">// Sequence id for identifying oom_adj assignment cycles</span></span><br><span class="line">    <span class="keyword">boolean</span> containsCycle;      <span class="comment">// Whether this app has encountered a cycle in the most recent update</span></span><br><span class="line">    <span class="keyword">int</span> lruSeq;                 <span class="comment">// Sequence id for identifying LRU update cycles</span></span><br><span class="line">    CompatibilityInfo compat;   <span class="comment">// last used compatibility mode</span></span><br><span class="line">    IBinder.DeathRecipient deathRecipient; <span class="comment">// Who is watching for the death.</span></span><br><span class="line">    ActiveInstrumentation instr;<span class="comment">// Set to currently active instrumentation running in process</span></span><br><span class="line">    <span class="keyword">boolean</span> usingWrapper;       <span class="comment">// Set to true when process was launched with a wrapper attached</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;BroadcastRecord&gt; curReceivers = <span class="keyword">new</span> ArraySet&lt;BroadcastRecord&gt;();<span class="comment">// receivers currently running in the app</span></span><br><span class="line">    <span class="keyword">long</span> whenUnimportant;       <span class="comment">// When (uptime) the process last became unimportant</span></span><br><span class="line">    <span class="keyword">long</span> lastCpuTime;           <span class="comment">// How long proc has run CPU at last check</span></span><br><span class="line">    <span class="keyword">long</span> curCpuTime;            <span class="comment">// How long proc has run CPU most recently</span></span><br><span class="line">    <span class="keyword">long</span> lastRequestedGc;       <span class="comment">// When we last asked the app to do a gc</span></span><br><span class="line">    <span class="keyword">long</span> lastLowMemory;         <span class="comment">// When we last told the app that memory is low</span></span><br><span class="line">    <span class="keyword">long</span> lastProviderTime;      <span class="comment">// The last time someone else was using a provider in this process.</span></span><br><span class="line">    <span class="keyword">long</span> lastTopTime;           <span class="comment">// The last time the process was in the TOP state or greater.</span></span><br><span class="line">    <span class="keyword">boolean</span> reportLowMemory;    <span class="comment">// Set to true when waiting to report low mem</span></span><br><span class="line">    <span class="keyword">boolean</span> empty;              <span class="comment">// Is this an empty background process?</span></span><br><span class="line">    <span class="keyword">boolean</span> cached;             <span class="comment">// Is this a cached process?</span></span><br><span class="line">    String adjType;             <span class="comment">// Debugging: primary thing impacting oom_adj.</span></span><br><span class="line">    <span class="keyword">int</span> adjTypeCode;            <span class="comment">// Debugging: adj code to report to app.</span></span><br><span class="line">    Object adjSource;           <span class="comment">// Debugging: option dependent object.</span></span><br><span class="line">    <span class="keyword">int</span> adjSourceProcState;     <span class="comment">// Debugging: proc state of adjSource&#x27;s process.</span></span><br><span class="line">    Object adjTarget;           <span class="comment">// Debugging: target component impacting oom_adj.</span></span><br><span class="line">    Runnable crashHandler;      <span class="comment">// Optional local handler to be invoked in the process crash.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// all activities running in the process</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;ActivityRecord&gt; activities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// any tasks this process had run root activities in</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;TaskRecord&gt; recentTasks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// all ServiceRecord running in this process</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;ServiceRecord&gt; services = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    <span class="comment">// services that are currently executing code (need to remain foreground).</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;ServiceRecord&gt; executingServices = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    <span class="comment">// All ConnectionRecord this process holds</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;ConnectionRecord&gt; connections = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    <span class="comment">// all IIntentReceivers that are registered from this process.</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;ReceiverList&gt; receivers = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    <span class="comment">// class (String) -&gt; ContentProviderRecord</span></span><br><span class="line">    <span class="keyword">final</span> ArrayMap&lt;String, ContentProviderRecord&gt; pubProviders = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// All ContentProviderRecord process is using</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;ContentProviderConnection&gt; conProviders = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    String isolatedEntryPoint;  <span class="comment">// Class to run on start if this is a special isolated process.</span></span><br><span class="line">    String[] isolatedEntryPointArgs; <span class="comment">// Arguments to pass to isolatedEntryPoint&#x27;s main().</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> execServicesFg;     <span class="comment">// do we need to be executing services in the foreground?</span></span><br><span class="line">    <span class="keyword">boolean</span> persistent;         <span class="comment">// always keep this application running?</span></span><br><span class="line">    <span class="keyword">boolean</span> crashing;           <span class="comment">// are we in the process of crashing?</span></span><br><span class="line">    Dialog crashDialog;         <span class="comment">// dialog being displayed due to crash.</span></span><br><span class="line">    <span class="keyword">boolean</span> forceCrashReport;   <span class="comment">// suppress normal auto-dismiss of crash dialog &amp; report UI?</span></span><br><span class="line">    <span class="keyword">boolean</span> notResponding;      <span class="comment">// does the app have a not responding dialog?</span></span><br><span class="line">    Dialog anrDialog;           <span class="comment">// dialog being displayed due to app not resp.</span></span><br><span class="line">    <span class="keyword">boolean</span> removed;            <span class="comment">// has app package been removed from device?</span></span><br><span class="line">    <span class="keyword">boolean</span> debugging;          <span class="comment">// was app launched for debugging?</span></span><br><span class="line">    <span class="keyword">boolean</span> waitedForDebugger;  <span class="comment">// has process show wait for debugger dialog?</span></span><br><span class="line">    Dialog waitDialog;          <span class="comment">// current wait for debugger dialog</span></span><br><span class="line"></span><br><span class="line">    String shortStringName;     <span class="comment">// caching of toShortString() result.</span></span><br><span class="line">    String stringName;          <span class="comment">// caching of toString() result.</span></span><br><span class="line">    <span class="keyword">boolean</span> pendingStart;       <span class="comment">// Process start is pending.</span></span><br><span class="line">    <span class="keyword">long</span> startSeq;              <span class="comment">// Seq no. indicating the latest process start associated with</span></span><br><span class="line">                                <span class="comment">// this process record.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// These reports are generated &amp; stored when an app gets into an error condition.</span></span><br><span class="line">    <span class="comment">// They will be &quot;null&quot; when all is OK.</span></span><br><span class="line">    ActivityManager.ProcessErrorStateInfo crashingReport;</span><br><span class="line">    ActivityManager.ProcessErrorStateInfo notRespondingReport;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Who will be notified of the error. This is usually an activity in the</span></span><br><span class="line">    <span class="comment">// app that installed the package.</span></span><br><span class="line">    ComponentName errorReportReceiver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process is currently hosting a backup agent for backup or restore</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> inFullBackup;</span><br><span class="line">    <span class="comment">// App is allowed to manage whitelists such as temporary Power Save mode whitelist.</span></span><br><span class="line">    <span class="keyword">boolean</span> whitelistManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Params used in starting this process.</span></span><br><span class="line">    String hostingType;</span><br><span class="line">    String hostingNameStr;</span><br><span class="line">    String seInfo;</span><br><span class="line">    <span class="keyword">long</span> startTime;</span><br><span class="line">    <span class="comment">// This will be same as &#123;@link #uid&#125; usually except for some apps used during factory testing.</span></span><br><span class="line">    <span class="keyword">int</span> startUid;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>BatteryStats</td><td>电量统计的接口</td></tr><tr><td>ApplicationInfo</td><td>系统进程的ApplicationInfo是从android包中解析出来的数据; 应用程序的ApplicationInfo是从AndroidManifest.xml中解析出来的数据</td></tr><tr><td>Process Name</td><td>进程名称</td></tr><tr><td>UID</td><td>进程的UID。系统进程的UID是1000(Process.SYSTEM_UID); 应用进程的UID是从10000(Process.FIRST_APPLICATION_UID)开始分配的</td></tr><tr><td>maxAdj, curAdj, setAdj</td><td>各种不同的OOM Adjustment值</td></tr><tr><td>lastPss， lastPssTime</td><td>物理内存(PSS)相关，进程中有对象创建或销毁时，PSS相关的属性会被更新。</td></tr><tr><td>activities, services, receivers</td><td>进程中的Android组件，随着进程的运行，这些信息都可能需要更新。譬如Activity的启动时，ProcessRecord.activies会增加一个实例; 销毁时，对将对应的实例从activities删除</td></tr><tr><td>pkgList</td><td>进程中运行的包</td></tr><tr><td>thread</td><td>该属性是IApplicationThread类型的对象</td></tr></tbody></table><p>ProcessRecord有“激活(Active)”和“非激活(Inactive)”两种状态，只有将ProcessRecord绑定到一个实际进程的时候，才是激活状态。 绑定成功后，thread属性就被赋值，表示ProcessRecord已经激活。 激活后，AMS就可以通过这个接口完成对应用进程的管理，譬如启动Activity、派发广播等</p><table><thead><tr><th>行为</th><th>描述</th></tr></thead><tbody><tr><td>makeActive()</td><td>将ProcessRecord置成激活状态</td></tr><tr><td>makeInactive()</td><td>将ProcessRecord置成非激活状态</td></tr><tr><td>addPackage()</td><td>向ProcessRecord添加包</td></tr></tbody></table><h1 id="整体关系"><a href="#整体关系" class="headerlink" title="整体关系"></a>整体关系</h1><p>MS运行在SystemServer进程中。SystemServer进程启动时，会通过SystemServer.startBootstrapServices()来创建一个AMS的对象;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startBootstrapServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    mActivityManagerService = mSystemServiceManager.startService(</span><br><span class="line">        ActivityManagerService.Lifecycle.class).getService();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AMS通过ActivityStackSupervisor来管理Activity。AMS对象只会存在一个，在初始化的时候，会创建一个唯一的ActivityStackSupervisor对象;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ActivityManagerService</span><span class="params">(Context systemContext)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    mStackSupervisor = createStackSupervisor();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ActivityStackSupervisor <span class="title">createStackSupervisor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityStackSupervisor supervisor = <span class="keyword">new</span> ActivityStackSupervisor(<span class="keyword">this</span>, mHandler.getLooper());</span><br><span class="line">        supervisor.initialize();</span><br><span class="line">        <span class="keyword">return</span> supervisor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>ActivityStackSupervisor中维护了显示设备的信息。当有新的显示设备添加时，会创建一个新的ActivityDisplay对象;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">createStackOnDisplay</span><span class="params">(<span class="keyword">int</span> displayId)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    enforceCallingPermission(MANAGE_ACTIVITY_STACKS, <span class="string">&quot;createStackOnDisplay()&quot;</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityDisplay display =</span><br><span class="line">            mStackSupervisor.getActivityDisplayOrCreateLocked(displayId);</span><br><span class="line">        <span class="keyword">if</span> (display == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> INVALID_STACK_ID;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// TODO(multi-display): Have the caller pass in the windowing mode and activity type.</span></span><br><span class="line">        <span class="keyword">final</span> ActivityStack stack = display.createStack(</span><br><span class="line">            WINDOWING_MODE_FULLSCREEN_OR_SPLIT_SCREEN_SECONDARY, ACTIVITY_TYPE_STANDARD,</span><br><span class="line">            ON_TOP);</span><br><span class="line">        <span class="keyword">return</span> (stack != <span class="keyword">null</span>) ? stack.mStackId : INVALID_STACK_ID;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AMS维护了所有进程的信息ProcessRecord。当需要创建一个新的进程时， 会通过AMS.newProcessRecordLocked()函数来创建一个ProcessRecord对象， ProcessRecord对象都保存在AMS.mPidsSelfLocked这个属性中;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> ProcessRecord <span class="title">newProcessRecordLocked</span><span class="params">(ApplicationInfo info, String customProcess,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> isolated, <span class="keyword">int</span> isolatedUid)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ProcessRecord(stats, info, proc, uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过ActivityStackSupervisor来创建ActivityRecord。当SystemServer进程收到来自应用进程的启动Activity请求时， 会通过ActivityStackSupervisor来创建一个ActivityRecord对象;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityLocked</span><span class="params">(IApplicationThread caller, ...)</span> </span>&#123;</span><br><span class="line">   ...</span><br><span class="line">   ActivityRecord r  = <span class="keyword">new</span> ActivityRecord(mService, callerApp, callingUid, callingPackage,</span><br><span class="line">           intent, resolvedType, aInfo, mService.mConfiguration, resultRecord, resultWho,</span><br><span class="line">           requestCode, componentSpecified, <span class="keyword">this</span>, container, options);</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在ActivityStack上创建TaskRecord。当需要创建新的任务栈时，就会通过ActivityStack对象来创建一个TaskRecord对象， 这样就建立了ActivityStack和TaskRecord的关联;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TaskRecord <span class="title">createTaskRecord</span><span class="params">(<span class="keyword">int</span> taskId, ActivityInfo info, Intent intent,</span></span></span><br><span class="line"><span class="function"><span class="params">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> toTop)</span> </span>&#123;</span><br><span class="line">    TaskRecord task = <span class="keyword">new</span> TaskRecord(mService, taskId, info, intent, voiceSession,</span><br><span class="line">            voiceInteractor);</span><br><span class="line">    addTask(task, toTop, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">return</span> task;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ActivityRecord的宿主TaskRecord。每一个ActivityRecord都需要找到自己的宿主TaskRecord，通过ActivityRecord.setTask()函数 就能建立ActivityRecord和TaskRecord的关联;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTask</span><span class="params">(TaskRecord newTask, TaskRecord taskToAffiliateWith)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    task = newTask;</span><br><span class="line">    setTaskToAffiliateWith(taskToAffiliateWith);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进程中运行的Activity信息。Activity在应用进程中运行，AMS中记录了进程中所有运行的Activity的信息，在ActivityRecord创建后， 会通过ProcessRecord.addPackage()函数，在ProcessRecord中登记ActivityRecord的信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startSpecificActivityLocked</span><span class="params">(ActivityRecord r,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> andResume, <span class="keyword">boolean</span> checkConfig)</span> </span>&#123;</span><br><span class="line">    ProcessRecord app = mService.getProcessRecordLocked(r.processName,</span><br><span class="line">            r.info.applicationInfo.uid, <span class="keyword">true</span>);</span><br><span class="line">    ...</span><br><span class="line">    app.addPackage(r.info.packageName, r.info.applicationInfo.versionCode,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p><a href="https://www.cnblogs.com/krislight1105/tag/ActivityStackSupervisor/">https://www.cnblogs.com/krislight1105/tag/ActivityStackSupervisor/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/AMS-ActivityStack/v2-86a554a0bbecdf13fa70feaa373bf164_720w.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/AMS-ActivityStack/1</summary>
      
    
    
    
    <category term="AMS" scheme="http://example.com/categories/AMS/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>log框架总述</title>
    <link href="http://example.com/2020/12/11/log%E6%A1%86%E6%9E%B6%E6%80%BB%E8%BF%B0/"/>
    <id>http://example.com/2020/12/11/log%E6%A1%86%E6%9E%B6%E6%80%BB%E8%BF%B0/</id>
    <published>2020-12-11T02:29:17.000Z</published>
    <updated>2020-12-15T09:15:39.093Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/log%E6%A1%86%E6%9E%B6%E6%80%BB%E8%BF%B0/image-20201211111818579.png" alt="image-20201211111818579"></p><p><img src="/images/log%E6%A1%86%E6%9E%B6%E6%80%BB%E8%BF%B0/Android-logging-kmc-kobayashi.png" alt="File:Android-logging-kmc-kobayashi.png"></p><p><img src="/images/log%E6%A1%86%E6%9E%B6%E6%80%BB%E8%BF%B0/20200210103856594.png" alt="img"></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://elinux.org/Android_Logging_System">https://elinux.org/Android_Logging_System</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/log%E6%A1%86%E6%9E%B6%E6%80%BB%E8%BF%B0/image-20201211111818579.png&quot; alt=&quot;image-20201211111818579&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/i</summary>
      
    
    
    
    <category term="logd进程" scheme="http://example.com/categories/logd%E8%BF%9B%E7%A8%8B/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>logd-01</title>
    <link href="http://example.com/2020/12/11/logd-01-1/"/>
    <id>http://example.com/2020/12/11/logd-01-1/</id>
    <published>2020-12-11T02:27:36.000Z</published>
    <updated>2020-12-11T02:27:36.362Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>logd-adb-wifi</title>
    <link href="http://example.com/2020/12/10/logd-adb-wifi/"/>
    <id>http://example.com/2020/12/10/logd-adb-wifi/</id>
    <published>2020-12-10T05:31:19.000Z</published>
    <updated>2020-12-15T09:15:52.940Z</updated>
    
    
    
    
    <category term="logd进程" scheme="http://example.com/categories/logd%E8%BF%9B%E7%A8%8B/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>logd-adb</title>
    <link href="http://example.com/2020/12/09/logd-adb/"/>
    <id>http://example.com/2020/12/09/logd-adb/</id>
    <published>2020-12-09T08:51:34.000Z</published>
    <updated>2020-12-15T09:16:06.331Z</updated>
    
    
    
    
    <category term="logd进程" scheme="http://example.com/categories/logd%E8%BF%9B%E7%A8%8B/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>logd-logcat</title>
    <link href="http://example.com/2020/12/09/logd-logcat/"/>
    <id>http://example.com/2020/12/09/logd-logcat/</id>
    <published>2020-12-09T01:25:03.000Z</published>
    <updated>2020-12-15T09:15:20.738Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">log_device_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* device;</span><br><span class="line">    <span class="keyword">bool</span> binary;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">logger</span>* <span class="title">logger</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">logger_list</span>* <span class="title">logger_list</span>;</span></span><br><span class="line">    <span class="keyword">bool</span> printed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">log_device_t</span>* next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">log_device_t</span>(<span class="keyword">const</span> <span class="keyword">char</span>* d, <span class="keyword">bool</span> b) &#123;</span><br><span class="line">        device = d;</span><br><span class="line">        binary = b;</span><br><span class="line">        next = <span class="literal">nullptr</span>;</span><br><span class="line">        printed = <span class="literal">false</span>;</span><br><span class="line">        logger = <span class="literal">nullptr</span>;</span><br><span class="line">        logger_list = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//logger_list会被强制转换成android_log_logger_list</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">android_log_logger_list</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">listnode</span> <span class="title">node</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">listnode</span> <span class="title">logger</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">listnode</span> <span class="title">transport</span>;</span></span><br><span class="line">  <span class="keyword">int</span> mode; <span class="comment">// 这里有阻塞和非阻塞模式 </span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> tail; </span><br><span class="line">  log_time start; <span class="comment">// 打印从start time 开始 到当前的log</span></span><br><span class="line">  <span class="keyword">pid_t</span> pid; <span class="comment">//打印指定pid 的log</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/images/logd-logcat/logd-1607664746820.bmp" alt="logd"></p><h1 id="1-CommandListener"><a href="#1-CommandListener" class="headerlink" title="1.CommandListener"></a>1.CommandListener</h1><p>整体流程大概如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">........</span><br><span class="line"><span class="comment">// Command listener listens on /dev/socket/logd for incoming logd</span></span><br><span class="line">    <span class="comment">// administrative commands.</span></span><br><span class="line"></span><br><span class="line">    CommandListener* cl = <span class="keyword">new</span> CommandListener(logBuf, reader, swl);</span><br><span class="line">    <span class="keyword">if</span> (cl-&gt;startListener()) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在logd进程启动的时候会创建出CommandListener对象，构建时打开设备节点/dev/socket/logd,并监听Client的请求，同时通过registerCmd设置能够处理的请求。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">CommandListener::CommandListener(LogBuffer* buf, LogReader* <span class="comment">/*reader*/</span>,</span><br><span class="line">                               LogListener* <span class="comment">/*swl*/</span>)</span><br><span class="line">  : FrameworkListener(getLogSocket()) &#123;</span><br><span class="line">  <span class="comment">// registerCmd(new ShutdownCmd(buf, writer, swl));</span></span><br><span class="line">  registerCmd(<span class="keyword">new</span> ClearCmd(buf));</span><br><span class="line">  registerCmd(<span class="keyword">new</span> GetBufSizeCmd(buf));</span><br><span class="line">  registerCmd(<span class="keyword">new</span> SetBufSizeCmd(buf));</span><br><span class="line">  registerCmd(<span class="keyword">new</span> GetBufSizeUsedCmd(buf));</span><br><span class="line">  registerCmd(<span class="keyword">new</span> GetStatisticsCmd(buf));</span><br><span class="line">  registerCmd(<span class="keyword">new</span> SetPruneListCmd(buf));</span><br><span class="line">  registerCmd(<span class="keyword">new</span> GetPruneListCmd(buf));</span><br><span class="line">  registerCmd(<span class="keyword">new</span> GetEventTagCmd(buf));</span><br><span class="line">  registerCmd(<span class="keyword">new</span> ReinitCmd());</span><br><span class="line">  registerCmd(<span class="keyword">new</span> ExitCmd(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数会获取到socketName，这里是logd，所以CommandListener会启动对logd端口进行监听</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CommandListener::getLogSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> socketName[] = <span class="string">&quot;logd&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> sock = android_get_control_socket(socketName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        sock = socket_local_server(</span><br><span class="line">            socketName, ANDROID_SOCKET_NAMESPACE_RESERVED, SOCK_STREAM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>registerCmd的操作是将Server能处理的请求加入到mCommands队列中。<br>当接收到Client请求时，构造一个SocketClient并加入到队列mClients中。<br>同时CommandListener对Client发送来的Command请求，到mCommands队列中去查找，当查找到相应的FrameworkCommnad时，使用其runCommand函数执行请求。<br>在CommandListener的构造函数中可以看到其设置并可以处理的Command。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SocketListener.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SocketListener::startListener</span><span class="params">(<span class="keyword">int</span> backlog)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!mSocketName &amp;&amp; mSock == <span class="number">-1</span>) &#123;</span><br><span class="line">        SLOGE(<span class="string">&quot;Failed to start unbound listener&quot;</span>);</span><br><span class="line">        errno = EINVAL;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mSocketName) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((mSock = android_get_control_socket(mSocketName)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            SLOGE(<span class="string">&quot;Obtaining file descriptor socket &#x27;%s&#x27; failed: %s&quot;</span>,</span><br><span class="line">                 mSocketName, strerror(errno));</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SLOGV(<span class="string">&quot;got mSock = %d for %s&quot;</span>, mSock, mSocketName);</span><br><span class="line">        fcntl(mSock, F_SETFD, FD_CLOEXEC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mListen &amp;&amp; listen(mSock, backlog) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        SLOGE(<span class="string">&quot;Unable to listen on socket (%s)&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!mListen)</span><br><span class="line">        <span class="comment">//log can print to buffer</span></span><br><span class="line">        SLOGV(<span class="string">&quot;got mSock = %d for %s&quot;</span>, mSock, mSocketName);</span><br><span class="line">        mClients-&gt;push_back(<span class="keyword">new</span> SocketClient(mSock, <span class="literal">false</span>, mUseCmdNum));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pipe(mCtrlPipe)) &#123;</span><br><span class="line">        SLOGE(<span class="string">&quot;pipe failed (%s)&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pthread_create(&amp;mThread, <span class="literal">NULL</span>, SocketListener::threadStart, <span class="keyword">this</span>)) &#123;</span><br><span class="line">        SLOGE(<span class="string">&quot;pthread_create (%s)&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FrameworkCommand.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __FRAMEWORK_CMD_HANDLER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __FRAMEWORK_CMD_HANDLER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;List.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocketClient</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrameworkCommand</span> &#123;</span> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *mCommand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    FrameworkCommand(<span class="keyword">const</span> <span class="keyword">char</span> *cmd);</span><br><span class="line">    <span class="keyword">virtual</span> ~FrameworkCommand() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">runCommand</span><span class="params">(SocketClient *c, <span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">getCommand</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> mCommand; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> android::sysutils::List&lt;FrameworkCommand *&gt; FrameworkCommandCollection;<span class="comment">//定义了一个FrameworkCommand的list指针</span></span><br></pre></td></tr></table></figure><h1 id="2-LogBuffer"><a href="#2-LogBuffer" class="headerlink" title="2.LogBuffer"></a>2.LogBuffer</h1><p>logd中通过LogBuffer缓存log消息。Android9.0 logbuffer一共有8种类型：</p><p><img src="/images/logd-logcat/image-20201211092532390.png" alt="image-20201211092532390"></p><p>LogBuffer总体结构如下：</p><p><img src="/images/logd-logcat/image-20201211092649846.png" alt="image-20201211092649846"></p><p>所有发送到logd的log信息都构建成了LogBufferElement元素存储在列表mLogElements中</p><p>LogBufferElement</p><h1 id="3-log写入logd"><a href="#3-log写入logd" class="headerlink" title="3.log写入logd"></a>3.log写入logd</h1><p>logd中接收Client传递过来的log数据后执行onDataAvilable()，并将其写入到LogBuffer中。</p><p>在logd启动的时候，会创建出LogListener的对象，并启动对logdw的监听。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"> .........</span><br><span class="line"> <span class="comment">// LogListener listens on /dev/socket/logdw for client</span></span><br><span class="line">    <span class="comment">// initiated log messages. New log entries are added to LogBuffer</span></span><br><span class="line">    <span class="comment">// and LogReader is notified to send updates to connected clients.</span></span><br><span class="line"></span><br><span class="line">    LogListener* swl = <span class="keyword">new</span> LogListener(logBuf, reader);</span><br><span class="line">    <span class="comment">// Backlog and /proc/sys/net/unix/max_dgram_qlen set to large value</span></span><br><span class="line">    <span class="keyword">if</span> (swl-&gt;startListener(<span class="number">600</span>)) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在LogListener的构造函数会获取到logdwsocket端口</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">LogListener::LogListener(LogBufferInterface* buf, LogReader* reader)</span><br><span class="line">    : SocketListener(getLogSocket(), <span class="literal">false</span>), logbuf(buf), reader(reader) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LogListener::getLogSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> socketName[] = <span class="string">&quot;logdw&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> sock = android_get_control_socket(socketName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;  <span class="comment">// logd started up in init.sh</span></span><br><span class="line">        sock = socket_local_server(</span><br><span class="line">            socketName, ANDROID_SOCKET_NAMESPACE_RESERVED, SOCK_DGRAM);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> on = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (setsockopt(sock, SOL_SOCKET, SO_PASSCRED, &amp;on, <span class="keyword">sizeof</span>(on))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当客户端有log需要写入logd时，会调用onDataAvailable将log写入logBuffer</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LogListener.cpp</span></span><br><span class="line">liblog/include/<span class="built_in">log</span>/uio.h</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> &#123;</span></span><br><span class="line">  <span class="keyword">void</span>* iov_base;</span><br><span class="line">  <span class="keyword">size_t</span> iov_len;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//liblog/include/private/android_logger.h</span></span><br><span class="line"><span class="comment">/* Header Structure to logd, and second header for pstore */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span>((__<span class="title">packed__</span>)) &#123;</span></span><br><span class="line">  <span class="keyword">typeof_log_id_t</span> id;</span><br><span class="line">  <span class="keyword">uint16_t</span> tid;</span><br><span class="line">  log_time realtime;</span><br><span class="line">&#125; <span class="keyword">android_log_header_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Event Header Structure to logd */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span>((__<span class="title">packed__</span>)) &#123;</span></span><br><span class="line">  <span class="keyword">int32_t</span> tag;  <span class="comment">// Little Endian Order</span></span><br><span class="line">&#125; <span class="keyword">android_event_header_t</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">LogListener::onDataAvailable</span><span class="params">(SocketClient* cli)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> name_set;</span><br><span class="line">    <span class="keyword">if</span> (!name_set) &#123;</span><br><span class="line">        prctl(PR_SET_NAME, <span class="string">&quot;logd.writer&quot;</span>);</span><br><span class="line">        name_set = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// + 1 to ensure null terminator if MAX_PAYLOAD buffer is received</span></span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="keyword">sizeof_log_id_t</span> + <span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>) + <span class="keyword">sizeof</span>(log_time) +</span><br><span class="line">                LOGGER_ENTRY_MAX_PAYLOAD + <span class="number">1</span>];<span class="comment">//#define LOGGER_ENTRY_MAX_PAYLOAD 4068</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> <span class="title">iov</span> = &#123;</span> buffer, <span class="keyword">sizeof</span>(buffer) - <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">alignas</span>(<span class="number">4</span>) <span class="keyword">char</span> control[CMSG_SPACE(<span class="keyword">sizeof</span>(struct ucred))];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">msghdr</span> <span class="title">hdr</span> = &#123;</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="number">0</span>, &amp;iov, <span class="number">1</span>, control, <span class="keyword">sizeof</span>(control), <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> socket = cli-&gt;getSocket();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// To clear the entire buffer is secure/safe, but this contributes to 1.68%</span></span><br><span class="line">    <span class="comment">// overhead under logging load. We are safe because we check counts, but</span></span><br><span class="line">    <span class="comment">// still need to clear null terminator</span></span><br><span class="line">    <span class="comment">// memset(buffer, 0, sizeof(buffer));</span></span><br><span class="line">    <span class="keyword">ssize_t</span> n = recvmsg(socket, &amp;hdr, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= (<span class="keyword">ssize_t</span>)(<span class="keyword">sizeof</span>(<span class="keyword">android_log_header_t</span>))) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buffer[n] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucred</span>* <span class="title">cred</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cmsghdr</span>* <span class="title">cmsg</span> = <span class="title">CMSG_FIRSTHDR</span>(&amp;<span class="title">hdr</span>);</span></span><br><span class="line">    <span class="keyword">while</span> (cmsg != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cmsg-&gt;cmsg_level == SOL_SOCKET &amp;&amp;</span><br><span class="line">            cmsg-&gt;cmsg_type == SCM_CREDENTIALS) &#123;</span><br><span class="line">            cred = (struct ucred*)CMSG_DATA(cmsg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cmsg = CMSG_NXTHDR(&amp;hdr, cmsg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucred</span> <span class="title">fake_cred</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (cred == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cred = &amp;fake_cred;</span><br><span class="line">        cred-&gt;pid = <span class="number">0</span>;</span><br><span class="line">        cred-&gt;uid = DEFAULT_OVERFLOWUID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cred-&gt;uid == AID_LOGD) &#123;</span><br><span class="line">        <span class="comment">// ignore log messages we send to ourself.</span></span><br><span class="line">        <span class="comment">// Such log messages are often generated by libraries we depend on</span></span><br><span class="line">        <span class="comment">// which use standard Android logging.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">android_log_header_t</span>* header =</span><br><span class="line">        <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">android_log_header_t</span>*&gt;(buffer);</span><br><span class="line">    <span class="keyword">log_id_t</span> logId = <span class="keyword">static_cast</span>&lt;<span class="keyword">log_id_t</span>&gt;(header-&gt;id);</span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/* logId &lt; LOG_ID_MIN || */</span> logId &gt;= LOG_ID_MAX ||</span><br><span class="line">        logId == LOG_ID_KERNEL) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((logId == LOG_ID_SECURITY) &amp;&amp;</span><br><span class="line">        (!__android_log_security() ||</span><br><span class="line">         !clientHasLogCredentials(cred-&gt;uid, cred-&gt;gid, cred-&gt;pid))) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check credential validity, acquire corrected details if not supplied.</span></span><br><span class="line">    <span class="keyword">if</span> (cred-&gt;pid == <span class="number">0</span>) &#123;</span><br><span class="line">        cred-&gt;pid = logbuf ? logbuf-&gt;tidToPid(header-&gt;tid)</span><br><span class="line">                           : android::tidToPid(header-&gt;tid);</span><br><span class="line">        <span class="keyword">if</span> (cred-&gt;pid == getpid()) &#123;</span><br><span class="line">            <span class="comment">// We expect that /proc/&lt;tid&gt;/ is accessible to self even without</span></span><br><span class="line">            <span class="comment">// readproc group, so that we will always drop messages that come</span></span><br><span class="line">            <span class="comment">// from any of our logd threads and their library calls.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// ignore self</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cred-&gt;uid == DEFAULT_OVERFLOWUID) &#123;</span><br><span class="line">        <span class="keyword">uid_t</span> uid =</span><br><span class="line">            logbuf ? logbuf-&gt;pidToUid(cred-&gt;pid) : android::pidToUid(cred-&gt;pid);</span><br><span class="line">        <span class="keyword">if</span> (uid == AID_LOGD) &#123;</span><br><span class="line">            uid = logbuf ? logbuf-&gt;pidToUid(header-&gt;tid)</span><br><span class="line">                         : android::pidToUid(cred-&gt;pid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (uid != AID_LOGD) cred-&gt;uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>* msg = ((<span class="keyword">char</span>*)buffer) + <span class="keyword">sizeof</span>(<span class="keyword">android_log_header_t</span>);</span><br><span class="line">    n -= <span class="keyword">sizeof</span>(<span class="keyword">android_log_header_t</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// NB: hdr.msg_flags &amp; MSG_TRUNC is not tested, silently passing a</span></span><br><span class="line">    <span class="comment">// truncated message to the logs.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logbuf != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> res = logbuf-&gt;<span class="built_in">log</span>(</span><br><span class="line">            logId, header-&gt;realtime, cred-&gt;uid, cred-&gt;pid, header-&gt;tid, msg,</span><br><span class="line">            ((<span class="keyword">size_t</span>)n &lt;= USHRT_MAX) ? (<span class="keyword">unsigned</span> <span class="keyword">short</span>)n : USHRT_MAX);</span><br><span class="line">        <span class="keyword">if</span> (res &gt; <span class="number">0</span> &amp;&amp; reader != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            reader-&gt;notifyNewLog(<span class="keyword">static_cast</span>&lt;<span class="keyword">log_mask_t</span>&gt;(<span class="number">1</span> &lt;&lt; logId));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-从logd读log"><a href="#4-从logd读log" class="headerlink" title="4.从logd读log"></a>4.从logd读log</h1><p>客户端如logcat通过/dev/sock/logdr socket文件和logd交互读取log</p><p><img src="/images/logd-logcat/image-20201211104222770.png" alt="image-20201211104222770"></p><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p>LogReader构建时开始监听socket /dev/sock/logdr的数据，当接收到读取log的请求时，调用onDataAvailable()函数处理请求。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">.........</span><br><span class="line"><span class="comment">// LogReader listens on /dev/socket/logdr. When a client</span></span><br><span class="line">    <span class="comment">// connects, log entries in the LogBuffer are written to the client.</span></span><br><span class="line"></span><br><span class="line">    LogReader* reader = <span class="keyword">new</span> LogReader(logBuf);</span><br><span class="line">    <span class="keyword">if</span> (reader-&gt;startListener()) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">.........</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LogReader::LogReader(LogBuffer* logbuf)</span><br><span class="line">    : SocketListener(getLogSocket(), <span class="literal">true</span>), mLogbuf(*logbuf) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LogReader::getLogSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> socketName[] = <span class="string">&quot;logdr&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> sock = android_get_control_socket(socketName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        sock = socket_local_server(</span><br><span class="line">            socketName, ANDROID_SOCKET_NAMESPACE_RESERVED, SOCK_SEQPACKET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在onDataAvailable()函数中会构造FlushCommand对象并通过runSocketCommand()函数向Client发送其需要的log。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">LogReader::onDataAvailable</span><span class="params">(SocketClient* cli)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> name_set;</span><br><span class="line">    <span class="keyword">if</span> (!name_set) &#123;</span><br><span class="line">        prctl(PR_SET_NAME, <span class="string">&quot;logd.reader&quot;</span>);</span><br><span class="line">        name_set = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">255</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = read(cli-&gt;getSocket(), buffer, <span class="keyword">sizeof</span>(buffer) - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        doSocketDelete(cli);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    buffer[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> tail = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> _tail[] = <span class="string">&quot; tail=&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span>* cp = <span class="built_in">strstr</span>(buffer, _tail);</span><br><span class="line">    <span class="keyword">if</span> (cp) &#123;</span><br><span class="line">        tail = atol(cp + <span class="keyword">sizeof</span>(_tail) - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">log_time <span class="title">start</span><span class="params">(log_time::EPOCH)</span></span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> _start[] = <span class="string">&quot; start=&quot;</span>;</span><br><span class="line">    cp = <span class="built_in">strstr</span>(buffer, _start);</span><br><span class="line">    <span class="keyword">if</span> (cp) &#123;</span><br><span class="line">        <span class="comment">// Parse errors will result in current time</span></span><br><span class="line">        start.strptime(cp + <span class="keyword">sizeof</span>(_start) - <span class="number">1</span>, <span class="string">&quot;%s.%q&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint64_t</span> timeout = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> _timeout[] = <span class="string">&quot; timeout=&quot;</span>;</span><br><span class="line">    cp = <span class="built_in">strstr</span>(buffer, _timeout);</span><br><span class="line">    <span class="keyword">if</span> (cp) &#123;</span><br><span class="line">        timeout = atol(cp + <span class="keyword">sizeof</span>(_timeout) - <span class="number">1</span>) * NS_PER_SEC +</span><br><span class="line">                  log_time(CLOCK_REALTIME).nsec();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> logMask = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> _logIds[] = <span class="string">&quot; lids=&quot;</span>;</span><br><span class="line">    cp = <span class="built_in">strstr</span>(buffer, _logIds);</span><br><span class="line">    <span class="keyword">if</span> (cp) &#123;</span><br><span class="line">        logMask = <span class="number">0</span>;</span><br><span class="line">        cp += <span class="keyword">sizeof</span>(_logIds) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (*cp &amp;&amp; *cp != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">isdigit</span>(*cp)) &#123;</span><br><span class="line">                val = val * <span class="number">10</span> + *cp - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                ++cp;</span><br><span class="line">            &#125;</span><br><span class="line">            logMask |= <span class="number">1</span> &lt;&lt; val;</span><br><span class="line">            <span class="keyword">if</span> (*cp != <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ++cp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pid_t</span> pid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> _pid[] = <span class="string">&quot; pid=&quot;</span>;</span><br><span class="line">    cp = <span class="built_in">strstr</span>(buffer, _pid);</span><br><span class="line">    <span class="keyword">if</span> (cp) &#123;</span><br><span class="line">        pid = atol(cp + <span class="keyword">sizeof</span>(_pid) - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> nonBlock = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!fastcmp&lt;<span class="built_in">strncmp</span>&gt;(buffer, <span class="string">&quot;dumpAndClose&quot;</span>, <span class="number">12</span>)) &#123;</span><br><span class="line">        <span class="comment">// Allow writer to get some cycles, and wait for pending notifications</span></span><br><span class="line">        sched_yield();</span><br><span class="line">        LogTimeEntry::wrlock();</span><br><span class="line">        LogTimeEntry::unlock();</span><br><span class="line">        sched_yield();</span><br><span class="line">        nonBlock = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log_time sequence = start;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This somewhat expensive data validation operation is required</span></span><br><span class="line">    <span class="comment">// for non-blocking, with timeout.  The incoming timestamp must be</span></span><br><span class="line">    <span class="comment">// in range of the list, if not, return immediately.  This is</span></span><br><span class="line">    <span class="comment">// used to prevent us from from getting stuck in timeout processing</span></span><br><span class="line">    <span class="comment">// with an invalid time.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Find if time is really present in the logs, monotonic or real, implicit</span></span><br><span class="line">    <span class="comment">// conversion from monotonic or real as necessary to perform the check.</span></span><br><span class="line">    <span class="comment">// Exit in the check loop ASAP as you find a transition from older to</span></span><br><span class="line">    <span class="comment">// newer, but use the last entry found to ensure overlap.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (nonBlock &amp;&amp; (sequence != log_time::EPOCH) &amp;&amp; timeout) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">LogFindStart</span> &#123;</span>  <span class="comment">// A lambda by another name</span></span><br><span class="line">           <span class="keyword">private</span>:</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">pid_t</span> mPid;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">unsigned</span> mLogMask;</span><br><span class="line">            <span class="keyword">bool</span> mStartTimeSet;</span><br><span class="line">            log_time mStart;</span><br><span class="line">            log_time&amp; mSequence;</span><br><span class="line">            log_time mLast;</span><br><span class="line">            <span class="keyword">bool</span> mIsMonotonic;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">public</span>:</span><br><span class="line">            LogFindStart(<span class="keyword">pid_t</span> pid, <span class="keyword">unsigned</span> logMask, log_time&amp; sequence,</span><br><span class="line">                         <span class="keyword">bool</span> isMonotonic)</span><br><span class="line">                : mPid(pid),</span><br><span class="line">                  mLogMask(logMask),</span><br><span class="line">                  mStartTimeSet(<span class="literal">false</span>),</span><br><span class="line">                  mStart(sequence),</span><br><span class="line">                  mSequence(sequence),</span><br><span class="line">                  mLast(sequence),</span><br><span class="line">                  mIsMonotonic(isMonotonic) &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">callback</span><span class="params">(<span class="keyword">const</span> LogBufferElement* element, <span class="keyword">void</span>* obj)</span> </span>&#123;</span><br><span class="line">                LogFindStart* me = <span class="keyword">reinterpret_cast</span>&lt;LogFindStart*&gt;(obj);</span><br><span class="line">                <span class="keyword">if</span> ((!me-&gt;mPid || (me-&gt;mPid == element-&gt;getPid())) &amp;&amp;</span><br><span class="line">                    (me-&gt;mLogMask &amp; (<span class="number">1</span> &lt;&lt; element-&gt;getLogId()))) &#123;</span><br><span class="line">                    log_time real = element-&gt;getRealTime();</span><br><span class="line">                    <span class="keyword">if</span> (me-&gt;mStart == real) &#123;</span><br><span class="line">                        me-&gt;mSequence = real;</span><br><span class="line">                        me-&gt;mStartTimeSet = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!me-&gt;mIsMonotonic || android::isMonotonic(real)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (me-&gt;mStart &lt; real) &#123;</span><br><span class="line">                            me-&gt;mSequence = me-&gt;mLast;</span><br><span class="line">                            me-&gt;mStartTimeSet = <span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        me-&gt;mLast = real;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        me-&gt;mLast = real;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">bool</span> <span class="title">found</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> mStartTimeSet;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; logFindStart(pid, logMask, sequence,</span><br><span class="line">                       logbuf().isMonotonic() &amp;&amp; android::isMonotonic(start));</span><br><span class="line"></span><br><span class="line">        logbuf().flushTo(cli, sequence, <span class="literal">nullptr</span>, FlushCommand::hasReadLogs(cli),</span><br><span class="line">                         FlushCommand::hasSecurityLogs(cli),</span><br><span class="line">                         logFindStart.callback, &amp;logFindStart);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!logFindStart.found()) &#123;</span><br><span class="line">            doSocketDelete(cli);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    android::prdebug(</span><br><span class="line">        <span class="string">&quot;logdr-slj: UID=%d GID=%d PID=%d %c tail=%lu logMask=%x pid=%d &quot;</span></span><br><span class="line">        <span class="string">&quot;start=%&quot;</span> PRIu64 <span class="string">&quot;ns timeout=%&quot;</span> PRIu64 <span class="string">&quot;ns\n&quot;</span>,</span><br><span class="line">        cli-&gt;getUid(), cli-&gt;getGid(), cli-&gt;getPid(), nonBlock ? <span class="string">&#x27;n&#x27;</span> : <span class="string">&#x27;b&#x27;</span>, tail,</span><br><span class="line">        logMask, (<span class="keyword">int</span>)pid, sequence.nsec(), timeout);</span><br><span class="line"></span><br><span class="line">    <span class="function">FlushCommand <span class="title">command</span><span class="params">(*<span class="keyword">this</span>, nonBlock, tail, logMask, pid, sequence, timeout)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set acceptable upper limit to wait for slow reader processing b/27242723</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">t</span> = &#123;</span> LOGD_SNDTIMEO, <span class="number">0</span> &#125;;</span><br><span class="line">    setsockopt(cli-&gt;getSocket(), SOL_SOCKET, SO_SNDTIMEO, (<span class="keyword">const</span> <span class="keyword">char</span>*)&amp;t,</span><br><span class="line">               <span class="keyword">sizeof</span>(t));</span><br><span class="line"></span><br><span class="line">    command.runSocketCommand(cli);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在runSocketCommand中其构造了LogTimeEntry，并用startReader_Locked()函数启动了一个线程，将LogBuffer中的数据发送到Client中。在这之后其他的Client能再次通过/dev/sock/logdr请求log数据。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FlushCommand::runSocketCommand</span><span class="params">(SocketClient* client)</span> </span>&#123;</span><br><span class="line">    LogTimeEntry* entry = <span class="literal">NULL</span>;</span><br><span class="line">    LastLogTimes&amp; times = mReader.logbuf().mTimes;</span><br><span class="line"></span><br><span class="line">    LogTimeEntry::wrlock();</span><br><span class="line">    LastLogTimes::iterator it = times.begin();</span><br><span class="line">    <span class="keyword">while</span> (it != times.end()) &#123;</span><br><span class="line">        entry = (*it);</span><br><span class="line">        <span class="keyword">if</span> (entry-&gt;mClient == client) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!entry-&gt;isWatchingMultiple(mLogMask)) &#123;</span><br><span class="line">                LogTimeEntry::unlock();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (entry-&gt;mTimeout.tv_sec || entry-&gt;mTimeout.tv_nsec) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mReader.logbuf().isMonotonic()) &#123;</span><br><span class="line">                    LogTimeEntry::unlock();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// If the user changes the time in a gross manner that</span></span><br><span class="line">                <span class="comment">// invalidates the timeout, fall through and trigger.</span></span><br><span class="line">                <span class="function">log_time <span class="title">now</span><span class="params">(CLOCK_REALTIME)</span></span>;</span><br><span class="line">                <span class="keyword">if</span> (((entry-&gt;mEnd + entry-&gt;mTimeout) &gt; now) &amp;&amp;</span><br><span class="line">                    (now &gt; entry-&gt;mEnd)) &#123;</span><br><span class="line">                    LogTimeEntry::unlock();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            entry-&gt;triggerReader_Locked();</span><br><span class="line">            <span class="keyword">if</span> (entry-&gt;runningReader_Locked()) &#123;</span><br><span class="line">                LogTimeEntry::unlock();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            entry-&gt;incRef_Locked();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        it++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (it == times.end()) &#123;</span><br><span class="line">        <span class="comment">// Create LogTimeEntry in notifyNewLog() ?</span></span><br><span class="line">        <span class="keyword">if</span> (mTail == (<span class="keyword">unsigned</span> <span class="keyword">long</span>)<span class="number">-1</span>) &#123;</span><br><span class="line">            LogTimeEntry::unlock();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        entry = <span class="keyword">new</span> LogTimeEntry(mReader, client, mNonBlock, mTail, mLogMask,</span><br><span class="line">                                 mPid, mStart, mTimeout);</span><br><span class="line">        times.push_front(entry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    client-&gt;incRef();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// release client and entry reference counts once done</span></span><br><span class="line">    entry-&gt;startReader_Locked();</span><br><span class="line">    LogTimeEntry::unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启线程读取log</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">LogTimeEntry::threadStart</span><span class="params">(<span class="keyword">void</span>* obj)</span> </span>&#123;</span><br><span class="line">    prctl(PR_SET_NAME, <span class="string">&quot;logd.reader.per&quot;</span>);</span><br><span class="line"></span><br><span class="line">    LogTimeEntry* me = <span class="keyword">reinterpret_cast</span>&lt;LogTimeEntry*&gt;(obj);</span><br><span class="line"></span><br><span class="line">    pthread_cleanup_push(threadStop, obj);</span><br><span class="line"></span><br><span class="line">    SocketClient* client = me-&gt;mClient;</span><br><span class="line">    <span class="keyword">if</span> (!client) &#123;</span><br><span class="line">        me-&gt;error();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LogBuffer&amp; logbuf = me-&gt;mReader.logbuf();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> privileged = FlushCommand::hasReadLogs(client);</span><br><span class="line">    <span class="keyword">bool</span> security = FlushCommand::hasSecurityLogs(client);</span><br><span class="line"></span><br><span class="line">    me-&gt;leadingDropped = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    wrlock();</span><br><span class="line"></span><br><span class="line">    log_time start = me-&gt;mStart;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (me-&gt;threadRunning &amp;&amp; !me-&gt;isError_Locked()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (me-&gt;mTimeout.tv_sec || me-&gt;mTimeout.tv_nsec) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pthread_cond_timedwait(&amp;me-&gt;threadTriggeredCondition,</span><br><span class="line">                                       &amp;timesLock, &amp;me-&gt;mTimeout) == ETIMEDOUT) &#123;</span><br><span class="line">                me-&gt;mTimeout.tv_sec = <span class="number">0</span>;</span><br><span class="line">                me-&gt;mTimeout.tv_nsec = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!me-&gt;threadRunning || me-&gt;isError_Locked()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        unlock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (me-&gt;mTail) &#123;</span><br><span class="line">            logbuf.flushTo(client, start, <span class="literal">nullptr</span>, privileged, security,</span><br><span class="line">                           FilterFirstPass, me);</span><br><span class="line">            me-&gt;leadingDropped = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        start = logbuf.flushTo(client, start, me-&gt;mLastTid, privileged,</span><br><span class="line">                               security, FilterSecondPass, me);</span><br><span class="line"></span><br><span class="line">        wrlock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (start == LogBufferElement::FLUSH_ERROR) &#123;</span><br><span class="line">            me-&gt;error_Locked();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        me-&gt;mStart = start + log_time(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (me-&gt;mNonBlock || !me-&gt;threadRunning || me-&gt;isError_Locked()) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        me-&gt;cleanSkip_Locked();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!me-&gt;mTimeout.tv_sec &amp;&amp; !me-&gt;mTimeout.tv_nsec) &#123;</span><br><span class="line">            pthread_cond_wait(&amp;me-&gt;threadTriggeredCondition, &amp;timesLock);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    unlock();</span><br><span class="line"></span><br><span class="line">    pthread_cleanup_pop(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考博客-1"><a href="#参考博客-1" class="headerlink" title="参考博客"></a>参考博客</h1><p><a href="https://www.dazhuanlan.com/2020/03/11/5e6828e390db9/">https://www.dazhuanlan.com/2020/03/11/5e6828e390db9/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="logd进程" scheme="http://example.com/categories/logd%E8%BF%9B%E7%A8%8B/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>trace分析</title>
    <link href="http://example.com/2020/11/23/trace%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2020/11/23/trace%E5%88%86%E6%9E%90/</id>
    <published>2020-11-23T01:33:36.000Z</published>
    <updated>2020-12-01T08:44:59.484Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&quot;main&quot; prio=<span class="number">5</span> tid=<span class="number">1</span> Native</span><br><span class="line">  | group=&quot;main&quot; sCount=<span class="number">1</span> dsCount=<span class="number">0</span> flags=<span class="number">1</span> obj=<span class="number">0</span>x73e11b38 self=<span class="number">0</span>x7ebc614c00</span><br><span class="line">  | sysTid=<span class="number">26053</span> nice=-<span class="number">10</span> cgrp=default sched=<span class="number">0</span>/<span class="number">0</span> handle=<span class="number">0</span>x7f42033548</span><br><span class="line">  | state=S schedstat=( <span class="number">455228046</span> <span class="number">191645585</span> <span class="number">857</span> ) utm=<span class="number">36</span> stm=<span class="number">9</span> core=<span class="number">1</span> HZ=<span class="number">100</span></span><br><span class="line">  | stack=<span class="number">0</span>x7fcdbca000-<span class="number">0</span>x7fcdbcc000 stackSize=<span class="number">8</span>MB</span><br><span class="line">  | held mutexes=</span><br><span class="line"><span class="function">  kernel: (<span class="title">couldn</span>&#x27;<span class="title">t</span> <span class="title">read</span> /<span class="title">proc</span>/<span class="title">self</span>/<span class="title">task</span>/26053/<span class="title">stack</span>)</span></span><br><span class="line"><span class="function">  <span class="title">native</span>: #00 <span class="title">pc</span> 000000000001<span class="title">f02c</span>  /<span class="title">system</span>/<span class="title">lib64</span>/<span class="title">libc.so</span> (<span class="title">syscall</span>+28)</span></span><br><span class="line"><span class="function">  <span class="title">native</span>: #01 <span class="title">pc</span> 000000000002217<span class="title">c</span>  /<span class="title">system</span>/<span class="title">lib64</span>/<span class="title">libc.so</span> (<span class="title">__futex_wait_ex</span>(<span class="title">void</span> <span class="title">volatile</span>*, <span class="title">bool</span>, <span class="title">int</span>, <span class="title">bool</span>, <span class="title">timespec</span> <span class="title">const</span>*)+140)</span></span><br><span class="line"><span class="function">  <span class="title">native</span>: #02 <span class="title">pc</span> 0000000000080<span class="title">ef8</span>  /<span class="title">system</span>/<span class="title">lib64</span>/<span class="title">libc.so</span> (<span class="title">pthread_cond_wait</span>+60)</span></span><br><span class="line"><span class="function">  <span class="title">native</span>: #03 <span class="title">pc</span> 0000000000009178  /<span class="title">system</span>/<span class="title">lib64</span>/<span class="title">libsoundpool.so</span> (<span class="title">android</span>::<span class="title">SoundPoolThread</span>::<span class="title">quit</span>()+104)</span></span><br><span class="line"><span class="function">  <span class="title">native</span>: #04 <span class="title">pc</span> 0000000000006058  /<span class="title">system</span>/<span class="title">lib64</span>/<span class="title">libsoundpool.so</span> (<span class="title">android</span>::<span class="title">SoundPool</span>::~<span class="title">SoundPool</span>()+28)</span></span><br><span class="line"><span class="function">  <span class="title">native</span>: #05 <span class="title">pc</span> 0000000000005<span class="title">ba8</span>  /<span class="title">system</span>/<span class="title">lib64</span>/<span class="title">libsoundpool.so</span> (<span class="title">android_media_SoundPool_release</span>(<span class="title">_JNIEnv</span>*, <span class="title">_jobject</span>*)+132)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.media.SoundPool.native_release</span>(<span class="title">Native</span> <span class="title">method</span>)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.media.SoundPool.release</span>(<span class="title">SoundPool.java</span>:177)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">com.ts.app.drivemode.view.fragment.DriveModeDisplayFragment.onDestroy</span>(<span class="title">DriveModeDisplayFragment.java</span>:125)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.support.v4.app.Fragment.performDestroy</span>(<span class="title">Fragment.java</span>:2687)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.support.v4.app.FragmentManagerImpl.moveToState</span>(<span class="title">FragmentManager.java</span>:1602)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.support.v4.app.FragmentManagerImpl.moveFragmentToExpectedState</span>(<span class="title">FragmentManager.java</span>:1795)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.support.v4.app.FragmentManagerImpl.moveToState</span>(<span class="title">FragmentManager.java</span>:1863)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.support.v4.app.FragmentManagerImpl.dispatchStateChange</span>(<span class="title">FragmentManager.java</span>:3282)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.support.v4.app.FragmentManagerImpl.dispatchDestroy</span>(<span class="title">FragmentManager.java</span>:3273)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.support.v4.app.FragmentController.dispatchDestroy</span>(<span class="title">FragmentController.java</span>:271)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.support.v4.app.FragmentActivity.onDestroy</span>(<span class="title">FragmentActivity.java</span>:419)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.support.v7.app.AppCompatActivity.onDestroy</span>(<span class="title">AppCompatActivity.java</span>:210)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">com.ts.app.drivemode.view.activity.DriveModeMainActivity.onDestroy</span>(<span class="title">DriveModeMainActivity.java</span>:73)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.app.Activity.performDestroy</span>(<span class="title">Activity.java</span>:7403)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.app.Instrumentation.callActivityOnDestroy</span>(<span class="title">Instrumentation.java</span>:1306)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.app.ActivityThread.performDestroyActivity</span>(<span class="title">ActivityThread.java</span>:4481)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.app.ActivityThread.handleDestroyActivity</span>(<span class="title">ActivityThread.java</span>:4515)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.app.servertransaction.DestroyActivityItem.execute</span>(<span class="title">DestroyActivityItem.java</span>:39)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.app.servertransaction.TransactionExecutor.executeLifecycleState</span>(<span class="title">TransactionExecutor.java</span>:145)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.app.servertransaction.TransactionExecutor.execute</span>(<span class="title">TransactionExecutor.java</span>:70)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.app.ActivityThread</span>$<span class="title">H.handleMessage</span>(<span class="title">ActivityThread.java</span>:1816)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.os.Handler.dispatchMessage</span>(<span class="title">Handler.java</span>:106)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.os.Looper.loop</span>(<span class="title">Looper.java</span>:193)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">android.app.ActivityThread.main</span>(<span class="title">ActivityThread.java</span>:6718)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">java.lang.reflect.Method.invoke</span>(<span class="title">Native</span> <span class="title">method</span>)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">com.android.internal.os.RuntimeInit</span>$<span class="title">MethodAndArgsCaller.run</span>(<span class="title">RuntimeInit.java</span>:493)</span></span><br><span class="line"><span class="function">  <span class="title">at</span> <span class="title">com.android.internal.os.ZygoteInit.main</span>(<span class="title">ZygoteInit.java</span>:858)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&quot;<span class="title">Jit</span> <span class="title">thread</span> <span class="title">pool</span> <span class="title">worker</span> <span class="title">thread</span> 0&quot; <span class="title">daemon</span> <span class="title">prio</span>=5 <span class="title">tid</span>=2 <span class="title">Native</span></span></span><br><span class="line"><span class="function">  | <span class="title">group</span>=&quot;<span class="title">main</span>&quot; <span class="title">sCount</span>=1 <span class="title">dsCount</span>=0 <span class="title">flags</span>=1 <span class="title">obj</span>=0<span class="title">x12ec0198</span> <span class="title">self</span>=0<span class="title">x7eb5612000</span></span></span><br><span class="line"><span class="function">  | <span class="title">sysTid</span>=26059 <span class="title">nice</span>=9 <span class="title">cgrp</span>=<span class="title">default</span> <span class="title">sched</span>=0/0 <span class="title">handle</span>=0<span class="title">x7eb5bd24f0</span></span></span><br><span class="line"><span class="function">  | <span class="title">state</span>=<span class="title">S</span> <span class="title">schedstat</span>=( 106080523 173652394 145 ) <span class="title">utm</span>=9 <span class="title">stm</span>=1 <span class="title">core</span>=2 <span class="title">HZ</span>=100</span></span><br><span class="line"><span class="function">  | <span class="title">stack</span>=0<span class="title">x7eb5ad4000</span>-0<span class="title">x7eb5ad6000</span> <span class="title">stackSize</span>=1021<span class="title">KB</span></span></span><br><span class="line"><span class="function">  | <span class="title">held</span> <span class="title">mutexes</span>=</span></span><br><span class="line"><span class="function">  <span class="title">kernel</span>: (<span class="title">couldn</span>&#x27;<span class="title">t</span> <span class="title">read</span> /<span class="title">proc</span>/<span class="title">self</span>/<span class="title">task</span>/26059/<span class="title">stack</span>)</span></span><br><span class="line"><span class="function">  <span class="title">native</span>: #00 <span class="title">pc</span> 000000000001<span class="title">f02c</span>  /<span class="title">system</span>/<span class="title">lib64</span>/<span class="title">libc.so</span> (<span class="title">syscall</span>+28)</span></span><br><span class="line"><span class="function">  <span class="title">native</span>: #01 <span class="title">pc</span> 00000000000<span class="title">d724c</span>  /<span class="title">system</span>/<span class="title">lib64</span>/<span class="title">libart.so</span> (<span class="title">art</span>::<span class="title">ConditionVariable</span>::<span class="title">WaitHoldingLocks</span>(<span class="title">art</span>::<span class="title">Thread</span>*)+148)</span></span><br><span class="line"><span class="function">  <span class="title">native</span>: #02 <span class="title">pc</span> 00000000004<span class="title">aa010</span>  /<span class="title">system</span>/<span class="title">lib64</span>/<span class="title">libart.so</span> (<span class="title">art</span>::<span class="title">ThreadPool</span>::<span class="title">GetTask</span>(<span class="title">art</span>::<span class="title">Thread</span>*)+260)</span></span><br><span class="line"><span class="function">  <span class="title">native</span>: #03 <span class="title">pc</span> 00000000004<span class="title">a9578</span>  /<span class="title">system</span>/<span class="title">lib64</span>/<span class="title">libart.so</span> (<span class="title">art</span>::<span class="title">ThreadPoolWorker</span>::<span class="title">Run</span>()+124)</span></span><br><span class="line"><span class="function">  <span class="title">native</span>: #04 <span class="title">pc</span> 00000000004<span class="title">a9038</span>  /<span class="title">system</span>/<span class="title">lib64</span>/<span class="title">libart.so</span> (<span class="title">art</span>::<span class="title">ThreadPoolWorker</span>::<span class="title">Callback</span>(<span class="title">void</span>*)+148)</span></span><br><span class="line"><span class="function">  <span class="title">native</span>: #05 <span class="title">pc</span> 00000000000819<span class="title">b4</span>  /<span class="title">system</span>/<span class="title">lib64</span>/<span class="title">libc.so</span> (<span class="title">__pthread_start</span>(<span class="title">void</span>*)+36)</span></span><br><span class="line"><span class="function">  <span class="title">native</span>: #06 <span class="title">pc</span> 0000000000023478  /<span class="title">system</span>/<span class="title">lib64</span>/<span class="title">libc.so</span> (<span class="title">__start_thread</span>+68)</span></span><br><span class="line"><span class="function">  (<span class="title">no</span> <span class="title">managed</span> <span class="title">stack</span> <span class="title">frames</span>)</span></span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;main&quot; prio=<span class="number">5</span> tid=<span class="number">1</span> Native</span><br><span class="line">  | group=&quot;main&quot; sCount=<span class="number">1</span> dsCount=<span class="number">0</span> flags=<span class="number">1</span> obj=<span class="number">0</span>x73e11b38 self=<span class="number">0</span>x7ebc614c00</span><br><span class="line">  | sysTid=<span class="number">26053</span> nice=-<span class="number">10</span> cgrp=default sched=<span class="number">0</span>/<span class="number">0</span> handle=<span class="number">0</span>x7f42033548</span><br><span class="line">  | state=S schedstat=( <span class="number">455228046</span> <span class="number">191645585</span> <span class="number">857</span> ) utm=<span class="number">36</span> stm=<span class="number">9</span> core=<span class="number">1</span> HZ=<span class="number">100</span></span><br><span class="line">  | stack=<span class="number">0</span>x7fcdbca000-<span class="number">0</span>x7fcdbcc000 stackSize=<span class="number">8</span>MB</span><br><span class="line">  | held mutexes=</span><br><span class="line"><span class="function">  kernel: (<span class="title">couldn</span>&#x27;<span class="title">t</span> <span class="title">read</span> /<span class="title">proc</span>/<span class="title">self</span>/<span class="title">task</span>/26053/<span class="title">stack</span>)</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>“main”</th><th>prio=5</th><th>tid=1</th><th>Native</th></tr></thead><tbody><tr><td>线程名: main</td><td>prio: 线程优先级</td><td>tid: 线程内部id</td><td>线程状态: NATIVE</td></tr></tbody></table><table><thead><tr><th>group=”main”</th><th>sCount=1</th><th>dsCount=0</th><th>flags=1</th><th>obj=0x73e11b38</th><th>self=0x7ebc614c00</th></tr></thead><tbody><tr><td>线程所属的线程组</td><td>线程挂起次数</td><td>用于调试的线程挂起次数</td><td></td><td>当前线程关联的java线程对象</td><td>当前线程地址</td></tr></tbody></table><table><thead><tr><th>sysTid=26053</th><th>nice=-10</th><th>cgrp=default</th><th>sched=0/0</th><th>handle=0x7f42033548</th></tr></thead><tbody><tr><td>线程真正意义上的tid</td><td>调度有优先级</td><td>进程所属的进程调度组</td><td>调度策略</td><td>函数处理地址</td></tr></tbody></table><table><thead><tr><th>state=S</th><th>schedstat=( 455228046 191645585 857 )</th><th>utm=36</th><th>stm=9</th><th>core=1</th><th>HZ=100</th></tr></thead><tbody><tr><td>线程状态</td><td>CPU调度时间统计, 见<code>proc/[pid]/task/[tid]/schedstat</code></td><td>用户态/内核态的CPU时间(单位是jiffies), 见<code>proc/[pid]/task/[tid]/stat</code></td><td></td><td>该线程的最后运行所在核</td><td>时钟频率</td></tr></tbody></table><table><thead><tr><th>stack=0x7fcdbca000-0x7fcdbcc000</th><th>stackSize=8MB</th></tr></thead><tbody><tr><td>线程栈的地址区间</td><td>栈的大小</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>android wifiadb 调试</title>
    <link href="http://example.com/2020/11/17/android-wifiadb-%E8%B0%83%E8%AF%95/"/>
    <id>http://example.com/2020/11/17/android-wifiadb-%E8%B0%83%E8%AF%95/</id>
    <published>2020-11-17T03:23:39.000Z</published>
    <updated>2020-11-17T07:33:28.167Z</updated>
    
    <content type="html"><![CDATA[<p>车机端的地址：192.168.43.183</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">msmnile_gvmq:/ $ <span class="title">ifconfig</span></span></span><br><span class="line"><span class="function"><span class="title">dummy0</span>    <span class="title">Link</span> <span class="title">encap:Ethernet</span>  <span class="title">HWaddr</span> <span class="title">ea</span>:82:4<span class="title">a:a1</span>:<span class="title">c2:ba</span></span></span><br><span class="line"><span class="function">          <span class="title">inet6</span> <span class="title">addr</span>: <span class="title">fe80</span>::<span class="title">e882</span>:4<span class="title">aff:fea1</span>:<span class="title">c2ba</span>/64 <span class="title">Scope</span>: <span class="title">Link</span></span></span><br><span class="line"><span class="function">          <span class="title">UP</span> <span class="title">BROADCAST</span> <span class="title">RUNNING</span> <span class="title">NOARP</span>  <span class="title">MTU</span>:1500  <span class="title">Metric</span>:1</span></span><br><span class="line"><span class="function">          <span class="title">RX</span> <span class="title">packets</span>:0 <span class="title">errors</span>:0 <span class="title">dropped</span>:0 <span class="title">overruns</span>:0 <span class="title">frame</span>:0</span></span><br><span class="line"><span class="function">          <span class="title">TX</span> <span class="title">packets</span>:81 <span class="title">errors</span>:0 <span class="title">dropped</span>:0 <span class="title">overruns</span>:0 <span class="title">carrier</span>:0</span></span><br><span class="line"><span class="function">          <span class="title">collisions</span>:0 <span class="title">txqueuelen</span>:1000</span></span><br><span class="line"><span class="function">          <span class="title">RX</span> <span class="title">bytes</span>:0 <span class="title">TX</span> <span class="title">bytes</span>:13297</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">wlan0</span>     <span class="title">Link</span> <span class="title">encap:Ethernet</span>  <span class="title">HWaddr</span> <span class="title">a4</span>:04:50:<span class="title">a8</span>:1<span class="title">d</span>:24  <span class="title">Driver</span> <span class="title">cnss_pci</span></span></span><br><span class="line"><span class="function">          <span class="title">inet</span> <span class="title">addr</span>:192.168.43.183  <span class="title">Bcast</span>:192.168.43.255  <span class="title">Mask</span>:255.255.255.0</span></span><br><span class="line"><span class="function">          <span class="title">inet6</span> <span class="title">addr</span>: <span class="title">fe80</span>::<span class="title">a604</span>:50<span class="title">ff:fea8</span>:1<span class="title">d24</span>/64 <span class="title">Scope</span>: <span class="title">Link</span></span></span><br><span class="line"><span class="function">          <span class="title">UP</span> <span class="title">BROADCAST</span> <span class="title">RUNNING</span> <span class="title">MULTICAST</span>  <span class="title">MTU</span>:1500  <span class="title">Metric</span>:1</span></span><br><span class="line"><span class="function">          <span class="title">RX</span> <span class="title">packets</span>:1266 <span class="title">errors</span>:0 <span class="title">dropped</span>:0 <span class="title">overruns</span>:0 <span class="title">frame</span>:0</span></span><br><span class="line"><span class="function">          <span class="title">TX</span> <span class="title">packets</span>:1596 <span class="title">errors</span>:0 <span class="title">dropped</span>:0 <span class="title">overruns</span>:0 <span class="title">carrier</span>:0</span></span><br><span class="line"><span class="function">          <span class="title">collisions</span>:0 <span class="title">txqueuelen</span>:3000</span></span><br><span class="line"><span class="function">          <span class="title">RX</span> <span class="title">bytes</span>:411409 <span class="title">TX</span> <span class="title">bytes</span>:232831</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">lo</span>        <span class="title">Link</span> <span class="title">encap:Local</span> <span class="title">Loopback</span></span></span><br><span class="line"><span class="function">          <span class="title">inet</span> <span class="title">addr</span>:127.0.0.1  <span class="title">Mask</span>:255.0.0.0</span></span><br><span class="line"><span class="function">          <span class="title">inet6</span> <span class="title">addr</span>: ::1/128 <span class="title">Scope</span>: <span class="title">Host</span></span></span><br><span class="line"><span class="function">          <span class="title">UP</span> <span class="title">LOOPBACK</span> <span class="title">RUNNING</span>  <span class="title">MTU</span>:65536  <span class="title">Metric</span>:1</span></span><br><span class="line"><span class="function">          <span class="title">RX</span> <span class="title">packets</span>:3307 <span class="title">errors</span>:0 <span class="title">dropped</span>:0 <span class="title">overruns</span>:0 <span class="title">frame</span>:0</span></span><br><span class="line"><span class="function">          <span class="title">TX</span> <span class="title">packets</span>:3307 <span class="title">errors</span>:0 <span class="title">dropped</span>:0 <span class="title">overruns</span>:0 <span class="title">carrier</span>:0</span></span><br><span class="line"><span class="function">          <span class="title">collisions</span>:0 <span class="title">txqueuelen</span>:1000</span></span><br><span class="line"><span class="function">          <span class="title">RX</span> <span class="title">bytes</span>:643185 <span class="title">TX</span> <span class="title">bytes</span>:643185</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">eth0</span>      <span class="title">Link</span> <span class="title">encap:Ethernet</span>  <span class="title">HWaddr</span> <span class="title">aa:aa</span>:<span class="title">aa:aa</span>:<span class="title">aa:b0</span>  <span class="title">Driver</span> <span class="title">virtio_net</span></span></span><br><span class="line"><span class="function">          <span class="title">inet</span> <span class="title">addr</span>:192.168.1.2  <span class="title">Bcast</span>:192.168.1.255  <span class="title">Mask</span>:255.255.255.0</span></span><br><span class="line"><span class="function">          <span class="title">UP</span> <span class="title">BROADCAST</span> <span class="title">RUNNING</span> <span class="title">MULTICAST</span>  <span class="title">MTU</span>:1500  <span class="title">Metric</span>:1</span></span><br><span class="line"><span class="function">          <span class="title">RX</span> <span class="title">packets</span>:240783 <span class="title">errors</span>:0 <span class="title">dropped</span>:0 <span class="title">overruns</span>:0 <span class="title">frame</span>:0</span></span><br><span class="line"><span class="function">          <span class="title">TX</span> <span class="title">packets</span>:235521 <span class="title">errors</span>:0 <span class="title">dropped</span>:0 <span class="title">overruns</span>:0 <span class="title">carrier</span>:0</span></span><br><span class="line"><span class="function">          <span class="title">collisions</span>:0 <span class="title">txqueuelen</span>:1000</span></span><br><span class="line"><span class="function">          <span class="title">RX</span> <span class="title">bytes</span>:21227377 <span class="title">TX</span> <span class="title">bytes</span>:15586453</span></span><br></pre></td></tr></table></figure><p>电脑端的地址为：192.168.43.94</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">以太网适配器 VMware Network Adapter VMnet8:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::<span class="number">8</span>b1:<span class="number">46</span>fd:<span class="number">9072</span>:f92%<span class="number">19</span></span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : <span class="number">192</span>.<span class="number">168</span>.<span class="number">146</span>.<span class="number">1</span></span><br><span class="line">   子网掩码  . . . . . . . . . . . . : <span class="number">255</span>.<span class="number">255</span>.<span class="number">255</span>.<span class="number">0</span></span><br><span class="line">   默认网关. . . . . . . . . . . . . :</span><br><span class="line"></span><br><span class="line">无线局域网适配器 WLAN:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::<span class="number">75</span>f7:a982:e467:e738%<span class="number">16</span></span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : <span class="number">192</span>.<span class="number">168</span>.<span class="number">43</span>.<span class="number">94</span></span><br><span class="line">   子网掩码  . . . . . . . . . . . . : <span class="number">255</span>.<span class="number">255</span>.<span class="number">255</span>.<span class="number">0</span></span><br><span class="line">   默认网关. . . . . . . . . . . . . : <span class="number">192</span>.<span class="number">168</span>.<span class="number">43</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">以太网适配器 蓝牙网络连接:</span><br><span class="line"></span><br><span class="line">   媒体状态  . . . . . . . . . . . . : 媒体已断开连接</span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br></pre></td></tr></table></figure><p>电脑ping车机：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ping</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">43</span>.<span class="number">183</span></span><br><span class="line"></span><br><span class="line">正在 <span class="built_in">Ping</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">43</span>.<span class="number">183</span> 具有 <span class="number">32</span> 字节的数据:</span><br><span class="line">来自 <span class="number">192</span>.<span class="number">168</span>.<span class="number">43</span>.<span class="number">183</span> 的回复: 字节=<span class="number">32</span> 时间=<span class="number">108</span>ms TTL=<span class="number">64</span></span><br><span class="line">来自 <span class="number">192</span>.<span class="number">168</span>.<span class="number">43</span>.<span class="number">183</span> 的回复: 字节=<span class="number">32</span> 时间=<span class="number">331</span>ms TTL=<span class="number">64</span></span><br><span class="line">来自 <span class="number">192</span>.<span class="number">168</span>.<span class="number">43</span>.<span class="number">183</span> 的回复: 字节=<span class="number">32</span> 时间=<span class="number">6</span>ms TTL=<span class="number">64</span></span><br><span class="line">来自 <span class="number">192</span>.<span class="number">168</span>.<span class="number">43</span>.<span class="number">183</span> 的回复: 字节=<span class="number">32</span> 时间=<span class="number">9</span>ms TTL=<span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="number">192</span>.<span class="number">168</span>.<span class="number">43</span>.<span class="number">183</span> 的 <span class="built_in">Ping</span> 统计信息:</span><br><span class="line">    数据包: 已发送 = <span class="number">4</span>，已接收 = <span class="number">4</span>，丢失 = <span class="number">0</span> (<span class="number">0</span>% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = <span class="number">6</span>ms，最长 = <span class="number">331</span>ms，平均 = <span class="number">113</span>ms</span><br></pre></td></tr></table></figure><p>车机ping电脑</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">msmnile_gvmq:/ $ <span class="title">ping</span> 192.168.43.94</span></span><br><span class="line"><span class="function"><span class="title">PING</span> 192.168.43.94 (192.168.43.94) 56(84) <span class="title">bytes</span> <span class="title">of</span> <span class="title">data</span>.</span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 192.168.43.94: <span class="title">icmp_seq</span>=1 <span class="title">ttl</span>=128 <span class="title">time</span>=159 <span class="title">ms</span></span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 192.168.43.94: <span class="title">icmp_seq</span>=2 <span class="title">ttl</span>=128 <span class="title">time</span>=180 <span class="title">ms</span></span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 192.168.43.94: <span class="title">icmp_seq</span>=3 <span class="title">ttl</span>=128 <span class="title">time</span>=205 <span class="title">ms</span></span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 192.168.43.94: <span class="title">icmp_seq</span>=4 <span class="title">ttl</span>=128 <span class="title">time</span>=425 <span class="title">ms</span></span></span><br><span class="line"><span class="function">64 <span class="title">bytes</span> <span class="title">from</span> 192.168.43.94: <span class="title">icmp_seq</span>=5 <span class="title">ttl</span>=128 <span class="title">time</span>=42.2 <span class="title">ms</span></span></span><br></pre></td></tr></table></figure><p>配置端口号并重启adb：adb tcpip 5555</p><p>之后就可以无线连接adb了：adb connect 192.168.43.183:5555</p><p>可以在手机端看IP地址：</p><p><img src="../images/android-wifiadb-%E8%B0%83%E8%AF%95/image-20201117153253437.png" alt="image-20201117153253437"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;车机端的地址：192.168.43.183&lt;/p&gt;
&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AndroidP 自定义开机动画</title>
    <link href="http://example.com/2020/11/13/AndroidP-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%80%E6%9C%BA%E5%8A%A8%E7%94%BB/"/>
    <id>http://example.com/2020/11/13/AndroidP-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%80%E6%9C%BA%E5%8A%A8%E7%94%BB/</id>
    <published>2020-11-13T09:12:33.000Z</published>
    <updated>2020-11-13T09:12:33.531Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>WMS-02-启动流程</title>
    <link href="http://example.com/2020/11/13/WMS-02-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>http://example.com/2020/11/13/WMS-02-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</id>
    <published>2020-11-13T09:09:34.000Z</published>
    <updated>2020-11-13T13:11:48.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-startOtherServices"><a href="#1-startOtherServices" class="headerlink" title="1.startOtherServices"></a>1.startOtherServices</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startOtherServices</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    ...........</span><br><span class="line">    traceBeginAndSlog(<span class="string">&quot;StartInputManagerService&quot;</span>);</span><br><span class="line">    inputManager = <span class="keyword">new</span> InputManagerService(context);</span><br><span class="line">    traceEnd();</span><br><span class="line"></span><br><span class="line">    traceBeginAndSlog(<span class="string">&quot;StartWindowManagerService&quot;</span>);</span><br><span class="line">    <span class="comment">// WMS needs sensor service ready</span></span><br><span class="line">    ConcurrentUtils.waitForFutureNoInterrupt(mSensorServiceStart, START_SENSOR_SERVICE);</span><br><span class="line">    mSensorServiceStart = <span class="keyword">null</span>;</span><br><span class="line">    wm = WindowManagerService.main(context, inputManager,</span><br><span class="line">                                   mFactoryTestMode != FactoryTest.FACTORY_TEST_LOW_LEVEL,</span><br><span class="line">                                   !mFirstBoot, mOnlyCore, <span class="keyword">new</span> PhoneWindowManager());</span><br><span class="line">    ServiceManager.addService(Context.WINDOW_SERVICE, wm, <span class="comment">/* allowIsolated= */</span> <span class="keyword">false</span>,</span><br><span class="line">                              DUMP_FLAG_PRIORITY_CRITICAL | DUMP_FLAG_PROTO);</span><br><span class="line">    ServiceManager.addService(Context.INPUT_SERVICE, inputManager,</span><br><span class="line">                              <span class="comment">/* allowIsolated= */</span> <span class="keyword">false</span>, DUMP_FLAG_PRIORITY_CRITICAL);</span><br><span class="line">    traceEnd();</span><br><span class="line"></span><br><span class="line">    traceBeginAndSlog(<span class="string">&quot;SetWindowManagerService&quot;</span>);</span><br><span class="line">    mActivityManagerService.setWindowManager(wm);</span><br><span class="line">    traceEnd();</span><br><span class="line"></span><br><span class="line">    traceBeginAndSlog(<span class="string">&quot;WindowManagerServiceOnInitReady&quot;</span>);</span><br><span class="line">    wm.onInitReady();</span><br><span class="line">    traceEnd();</span><br><span class="line">    ...........</span><br><span class="line">    </span><br><span class="line">    traceBeginAndSlog(<span class="string">&quot;MakeDisplayReady&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        wm.displayReady();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        reportWtf(<span class="string">&quot;making display ready&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    traceEnd();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    ........</span><br><span class="line">    traceBeginAndSlog(<span class="string">&quot;MakeWindowManagerServiceReady&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        wm.systemReady();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        reportWtf(<span class="string">&quot;making Window Manager Service ready&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    traceEnd();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码主要是完成了以下几件事：</p><p>1）创建了InputManagerService的实例</p><p>2）调用WindowManagerService.main方法</p><p>3）将WindowManagerService添加到ServiceManager中</p><p>4）将InputManagerService添加到ServiceManager中</p><p>5）调用WindowManagerService的onInitReady方法</p><p>6）显示ready，初始化显示尺寸信息，结束后WMS会根据AMS进行一次configure</p><p>7）wms ready，直接调用mPolicy的systemready方法</p><h2 id="1-1-WindowManagerService-main"><a href="#1-1-WindowManagerService-main" class="headerlink" title="1.1 WindowManagerService.main"></a>1.1 WindowManagerService.main</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">wm = WindowManagerService.main(context, </span><br><span class="line">                               inputManager,</span><br><span class="line">                       mFactoryTestMode != FactoryTest.FACTORY_TEST_LOW_LEVEL,</span><br><span class="line">                       !mFirstBoot, </span><br><span class="line">                               mOnlyCore, </span><br><span class="line">                               <span class="keyword">new</span> PhoneWindowManager());<span class="comment">//创建出PhoneWindowManager的实例</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WindowManagerService <span class="title">main</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> InputManagerService im,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> <span class="keyword">boolean</span> haveInputMethods, <span class="keyword">final</span> <span class="keyword">boolean</span> showBootMsgs, <span class="keyword">final</span> <span class="keyword">boolean</span> onlyCore,</span></span></span><br><span class="line"><span class="function"><span class="params">            WindowManagerPolicy policy)</span> </span>&#123;</span><br><span class="line">        DisplayThread.getHandler().runWithScissors(() -&gt;</span><br><span class="line">                sInstance = <span class="keyword">new</span> WindowManagerService(context, im, haveInputMethods, showBootMsgs,</span><br><span class="line">                        onlyCore, policy), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> sInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DisplayThread 线程是一个系统前台线程，用于执行一些延时要非常小的关于显示的操作，一般只会在 WindowManager、DisplayManager 和 InputManager 中使用，代码也比较简单。通过在DisplayThread线程中，创建出WindowManagerService的实例。</p><p>runWithScissors是Handler的一个方法，这个方法是一个同步方法，需要等到方法内的函数执行完毕再往后执行，因此这里会先阻塞，等待创建出WindowManagerService实例后，返回WindowManagerService的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">WindowManagerService</span><span class="params">(Context context, </span></span></span><br><span class="line"><span class="function"><span class="params">                               InputManagerService inputManager,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">boolean</span> haveInputMethods, </span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">boolean</span> showBootMsgs, </span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">boolean</span> onlyCore,</span></span></span><br><span class="line"><span class="function"><span class="params">           WindowManagerPolicy policy)</span> </span>&#123;<span class="comment">//传入的是PhoneWindowManager对象</span></span><br><span class="line">      installLock(<span class="keyword">this</span>, INDEX_WINDOW);</span><br><span class="line">      mContext = context;</span><br><span class="line">      mHaveInputMethods = haveInputMethods;</span><br><span class="line">      mAllowBootMessages = showBootMsgs;</span><br><span class="line">      mOnlyCore = onlyCore;</span><br><span class="line">      mLimitedAlphaCompositing = context.getResources().getBoolean(</span><br><span class="line">              com.android.internal.R.bool.config_sf_limitedAlpha);</span><br><span class="line">      mHasPermanentDpad = context.getResources().getBoolean(</span><br><span class="line">              com.android.internal.R.bool.config_hasPermanentDpad);</span><br><span class="line">      mInTouchMode = context.getResources().getBoolean(</span><br><span class="line">              com.android.internal.R.bool.config_defaultInTouchMode);</span><br><span class="line">      mDrawLockTimeoutMillis = context.getResources().getInteger(</span><br><span class="line">              com.android.internal.R.integer.config_drawLockTimeoutMillis);</span><br><span class="line">      mAllowAnimationsInLowPowerMode = context.getResources().getBoolean(</span><br><span class="line">              com.android.internal.R.bool.config_allowAnimationsInLowPowerMode);</span><br><span class="line">      mMaxUiWidth = context.getResources().getInteger(</span><br><span class="line">              com.android.internal.R.integer.config_maxUiWidth);</span><br><span class="line">      mDisableTransitionAnimation = context.getResources().getBoolean(</span><br><span class="line">              com.android.internal.R.bool.config_disableTransitionAnimation);</span><br><span class="line">      <span class="comment">//保存 SystemServer 中传入的 InputManagerService 实例对象，输入事件最终要分发给具有焦点的窗口，而 WMS 是窗口的管理者。mInputManager 用于管理每个窗口的输入事件通道，并向通道上派发事件。</span></span><br><span class="line">      mInputManager = inputManager; <span class="comment">// Must be before createDisplayContentLocked.</span></span><br><span class="line">      mDisplayManagerInternal = LocalServices.getService(DisplayManagerInternal.class);</span><br><span class="line">      mDisplaySettings = <span class="keyword">new</span> DisplaySettings();</span><br><span class="line">      mDisplaySettings.readSettingsLocked();</span><br><span class="line">      </span><br><span class="line"><span class="comment">//mPolicy 对象是 WMS 中非常重要的一个对象，是 WindowManagerPolicy 类型的，WindowManagerPolicy（简称 WMP） 是一个接口，具体的实现类是 PhoneWindowManager。mPolicy 对象可以说是 WMS 的首席顾问，WMS 的许多操作都是需要 WMP 规定的，比如：多个窗口的上下顺序，监听屏幕旋转的状态，预处理一些系统按键事件（例如HOME、BACK键等的默认行为就是在这里实现的）</span></span><br><span class="line">      mPolicy = policy;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//创建一个 WindowAnimator 对象，用于管理所有窗口的动画</span></span><br><span class="line">      mAnimator = <span class="keyword">new</span> WindowAnimator(<span class="keyword">this</span>);</span><br><span class="line">      mRoot = <span class="keyword">new</span> RootWindowContainer(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">      mWindowPlacerLocked = <span class="keyword">new</span> WindowSurfacePlacer(<span class="keyword">this</span>);</span><br><span class="line">      mTaskSnapshotController = <span class="keyword">new</span> TaskSnapshotController(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">      mWindowTracing = WindowTracing.createDefaultAndStartLooper(context);</span><br><span class="line"></span><br><span class="line">      LocalServices.addService(WindowManagerPolicy.class, mPolicy);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(mInputManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">final</span> InputChannel inputChannel = mInputManager.monitorInput(TAG_WM);</span><br><span class="line">          mPointerEventDispatcher = inputChannel != <span class="keyword">null</span></span><br><span class="line">                  ? <span class="keyword">new</span> PointerEventDispatcher(inputChannel) : <span class="keyword">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          mPointerEventDispatcher = <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//获取DisplayManager对象</span></span><br><span class="line">      mDisplayManager = (DisplayManager)context.getSystemService(Context.DISPLAY_SERVICE);</span><br><span class="line"></span><br><span class="line">      mKeyguardDisableHandler = <span class="keyword">new</span> KeyguardDisableHandler(mContext, mPolicy);</span><br><span class="line"></span><br><span class="line">      mPowerManager = (PowerManager)context.getSystemService(Context.POWER_SERVICE);</span><br><span class="line">      mPowerManagerInternal = LocalServices.getService(PowerManagerInternal.class);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (mPowerManagerInternal != <span class="keyword">null</span>) &#123;</span><br><span class="line">          mPowerManagerInternal.registerLowPowerModeObserver(</span><br><span class="line">                  <span class="keyword">new</span> PowerManagerInternal.LowPowerModeListener() &#123;</span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getServiceType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  <span class="keyword">return</span> ServiceType.ANIMATION;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLowPowerModeChanged</span><span class="params">(PowerSaveState result)</span> </span>&#123;</span><br><span class="line">                  <span class="keyword">synchronized</span> (mWindowMap) &#123;</span><br><span class="line">                      <span class="keyword">final</span> <span class="keyword">boolean</span> enabled = result.batterySaverEnabled;</span><br><span class="line">                      <span class="keyword">if</span> (mAnimationsDisabled != enabled &amp;&amp; !mAllowAnimationsInLowPowerMode) &#123;</span><br><span class="line">                          mAnimationsDisabled = enabled;</span><br><span class="line">                          dispatchNewAnimatorScaleLocked(<span class="keyword">null</span>);</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">          mAnimationsDisabled = mPowerManagerInternal</span><br><span class="line">                  .getLowPowerState(ServiceType.ANIMATION).batterySaverEnabled;</span><br><span class="line">      &#125;</span><br><span class="line">      mScreenFrozenLock = mPowerManager.newWakeLock(</span><br><span class="line">              PowerManager.PARTIAL_WAKE_LOCK, <span class="string">&quot;SCREEN_FROZEN&quot;</span>);</span><br><span class="line">      mScreenFrozenLock.setReferenceCounted(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">      mAppTransition = <span class="keyword">new</span> AppTransition(context, <span class="keyword">this</span>);</span><br><span class="line">      mAppTransition.registerListenerLocked(mActivityManagerAppTransitionNotifier);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> AnimationHandler animationHandler = <span class="keyword">new</span> AnimationHandler();</span><br><span class="line">      mBoundsAnimationController = <span class="keyword">new</span> BoundsAnimationController(context, mAppTransition,</span><br><span class="line">              AnimationThread.getHandler(), animationHandler);</span><br><span class="line"><span class="comment">//ActivityManager对象</span></span><br><span class="line">      mActivityManager = ActivityManager.getService();</span><br><span class="line">      mAmInternal = LocalServices.getService(ActivityManagerInternal.class);</span><br><span class="line">      mAppOps = (AppOpsManager)context.getSystemService(Context.APP_OPS_SERVICE);</span><br><span class="line">      AppOpsManager.OnOpChangedInternalListener opListener =</span><br><span class="line">              <span class="keyword">new</span> AppOpsManager.OnOpChangedInternalListener() &#123;</span><br><span class="line">                  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpChanged</span><span class="params">(<span class="keyword">int</span> op, String packageName)</span> </span>&#123;</span><br><span class="line">                      updateAppOpsState();</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;;</span><br><span class="line">      </span><br><span class="line">      mAppOps.startWatchingMode(OP_SYSTEM_ALERT_WINDOW, <span class="keyword">null</span>, opListener);</span><br><span class="line">      mAppOps.startWatchingMode(AppOpsManager.OP_TOAST_WINDOW, <span class="keyword">null</span>, opListener);</span><br><span class="line"></span><br><span class="line">      mPmInternal = LocalServices.getService(PackageManagerInternal.class);</span><br><span class="line">      <span class="keyword">final</span> IntentFilter suspendPackagesFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">      suspendPackagesFilter.addAction(Intent.ACTION_PACKAGES_SUSPENDED);</span><br><span class="line">      suspendPackagesFilter.addAction(Intent.ACTION_PACKAGES_UNSUSPENDED);</span><br><span class="line">      context.registerReceiverAsUser(<span class="keyword">new</span> BroadcastReceiver() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">final</span> String[] affectedPackages =</span><br><span class="line">                      intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);</span><br><span class="line">              <span class="keyword">final</span> <span class="keyword">boolean</span> suspended =</span><br><span class="line">                      Intent.ACTION_PACKAGES_SUSPENDED.equals(intent.getAction());</span><br><span class="line">              updateHiddenWhileSuspendedState(<span class="keyword">new</span> ArraySet&lt;&gt;(Arrays.asList(affectedPackages)),</span><br><span class="line">                      suspended);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;, UserHandle.ALL, suspendPackagesFilter, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Get persisted window scale setting</span></span><br><span class="line">      mWindowAnimationScaleSetting = Settings.Global.getFloat(context.getContentResolver(),</span><br><span class="line">              Settings.Global.WINDOW_ANIMATION_SCALE, mWindowAnimationScaleSetting);</span><br><span class="line">      mTransitionAnimationScaleSetting = Settings.Global.getFloat(context.getContentResolver(),</span><br><span class="line">              Settings.Global.TRANSITION_ANIMATION_SCALE,</span><br><span class="line">              context.getResources().getFloat(</span><br><span class="line">                      R.dimen.config_appTransitionAnimationDurationScaleDefault));</span><br><span class="line"></span><br><span class="line">      setAnimatorDurationScale(Settings.Global.getFloat(context.getContentResolver(),</span><br><span class="line">              Settings.Global.ANIMATOR_DURATION_SCALE, mAnimatorDurationScaleSetting));</span><br><span class="line"></span><br><span class="line">      IntentFilter filter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">      <span class="comment">// Track changes to DevicePolicyManager state so we can enable/disable keyguard.</span></span><br><span class="line">      filter.addAction(ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED);</span><br><span class="line">      mContext.registerReceiver(mBroadcastReceiver, filter);</span><br><span class="line"></span><br><span class="line">      mLatencyTracker = LatencyTracker.getInstance(context);</span><br><span class="line"></span><br><span class="line">      mSettingsObserver = <span class="keyword">new</span> SettingsObserver();</span><br><span class="line"></span><br><span class="line">      mHoldingScreenWakeLock = mPowerManager.newWakeLock(</span><br><span class="line">              PowerManager.SCREEN_BRIGHT_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE, TAG_WM);</span><br><span class="line">      mHoldingScreenWakeLock.setReferenceCounted(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">      mSurfaceAnimationRunner = <span class="keyword">new</span> SurfaceAnimationRunner(mPowerManagerInternal);</span><br><span class="line"></span><br><span class="line">      mAllowTheaterModeWakeFromLayout = context.getResources().getBoolean(</span><br><span class="line">              com.android.internal.R.bool.config_allowTheaterModeWakeFromWindowLayout);</span><br><span class="line"></span><br><span class="line">      mTaskPositioningController = <span class="keyword">new</span> TaskPositioningController(</span><br><span class="line">              <span class="keyword">this</span>, mInputManager, mInputMonitor, mActivityManager, mH.getLooper());</span><br><span class="line">      mDragDropController = <span class="keyword">new</span> DragDropController(<span class="keyword">this</span>, mH.getLooper());</span><br><span class="line"></span><br><span class="line">      LocalServices.addService(WindowManagerInternal.class, <span class="keyword">new</span> LocalService());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-WindowManagerService的onInitReady方法"><a href="#1-2-WindowManagerService的onInitReady方法" class="headerlink" title="1.2 WindowManagerService的onInitReady方法"></a>1.2 WindowManagerService的onInitReady方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Called after all entities (such as the &#123;<span class="doctag">@link</span> ActivityManagerService&#125;) have been set up and</span></span><br><span class="line"><span class="comment">    * associated with the &#123;<span class="doctag">@link</span> WindowManagerService&#125;.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInitReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       initPolicy();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Add ourself to the Watchdog monitors.</span></span><br><span class="line">       <span class="comment">//将 WMS 实例对象本身添加到 Watchdog 中，WMS 类实现了 Watchdog.Monitor 接口。Watchdog 用于监控系统的一些关键服务</span></span><br><span class="line">       Watchdog.getInstance().addMonitor(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">       openSurfaceTransaction();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           createWatermarkInTransaction();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           closeSurfaceTransaction(<span class="string">&quot;createWatermarkInTransaction&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       showEmulatorDisplayOverlayIfNeeded();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>主要做了以下几件事：</p><p>1）初始化Policy</p><p>2）将自身添加到Watchdog中</p><p>3）打开surfaceTransaction</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initPolicy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UiThread.getHandler().runWithScissors(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                WindowManagerPolicyThread.set(Thread.currentThread(), Looper.myLooper());</span><br><span class="line">                mPolicy.init(mContext, WindowManagerService.<span class="keyword">this</span>, WindowManagerService.<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在UiThread中调用mPolicy.init方法，其实就是调用PhoneWindowManager的init方法。对PhoneWindowManager进行初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** &#123;<span class="doctag">@inheritDoc</span>&#125; */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context, IWindowManager windowManager,</span></span></span><br><span class="line"><span class="function"><span class="params">        WindowManagerFuncs windowManagerFuncs)</span> </span>&#123;</span><br><span class="line">    mContext = context;</span><br><span class="line">    mWindowManager = windowManager;</span><br><span class="line">    mWindowManagerFuncs = windowManagerFuncs;</span><br><span class="line">    mWindowManagerInternal = LocalServices.getService(WindowManagerInternal.class);</span><br><span class="line">    mActivityManagerInternal = LocalServices.getService(ActivityManagerInternal.class);</span><br><span class="line">    mInputManagerInternal = LocalServices.getService(InputManagerInternal.class);</span><br><span class="line">    mDreamManagerInternal = LocalServices.getService(DreamManagerInternal.class);</span><br><span class="line">    mPowerManagerInternal = LocalServices.getService(PowerManagerInternal.class);</span><br><span class="line">    mAppOpsManager = (AppOpsManager) mContext.getSystemService(Context.APP_OPS_SERVICE);</span><br><span class="line">    mHasFeatureWatch = mContext.getPackageManager().hasSystemFeature(FEATURE_WATCH);</span><br><span class="line">    mHasFeatureLeanback = mContext.getPackageManager().hasSystemFeature(FEATURE_LEANBACK);</span><br><span class="line">    mAccessibilityShortcutController =</span><br><span class="line">            <span class="keyword">new</span> AccessibilityShortcutController(mContext, <span class="keyword">new</span> Handler(), mCurrentUserId);</span><br><span class="line">    mLogger = <span class="keyword">new</span> MetricsLogger();</span><br><span class="line">    <span class="comment">// Init display burn-in protection</span></span><br><span class="line">    <span class="keyword">boolean</span> burnInProtectionEnabled = context.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_enableBurnInProtection);</span><br><span class="line">    <span class="comment">// Allow a system property to override this. Used by developer settings.</span></span><br><span class="line">    <span class="keyword">boolean</span> burnInProtectionDevMode =</span><br><span class="line">            SystemProperties.getBoolean(<span class="string">&quot;persist.debug.force_burn_in&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (burnInProtectionEnabled || burnInProtectionDevMode) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> minHorizontal;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> maxHorizontal;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> minVertical;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> maxVertical;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> maxRadius;</span><br><span class="line">        <span class="keyword">if</span> (burnInProtectionDevMode) &#123;</span><br><span class="line">            minHorizontal = -<span class="number">8</span>;</span><br><span class="line">            maxHorizontal = <span class="number">8</span>;</span><br><span class="line">            minVertical = -<span class="number">8</span>;</span><br><span class="line">            maxVertical = -<span class="number">4</span>;</span><br><span class="line">            maxRadius = (isRoundWindow()) ? <span class="number">6</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Resources resources = context.getResources();</span><br><span class="line">            minHorizontal = resources.getInteger(</span><br><span class="line">                    com.android.internal.R.integer.config_burnInProtectionMinHorizontalOffset);</span><br><span class="line">            maxHorizontal = resources.getInteger(</span><br><span class="line">                    com.android.internal.R.integer.config_burnInProtectionMaxHorizontalOffset);</span><br><span class="line">            minVertical = resources.getInteger(</span><br><span class="line">                    com.android.internal.R.integer.config_burnInProtectionMinVerticalOffset);</span><br><span class="line">            maxVertical = resources.getInteger(</span><br><span class="line">                    com.android.internal.R.integer.config_burnInProtectionMaxVerticalOffset);</span><br><span class="line">            maxRadius = resources.getInteger(</span><br><span class="line">                    com.android.internal.R.integer.config_burnInProtectionMaxRadius);</span><br><span class="line">        &#125;</span><br><span class="line">        mBurnInProtectionHelper = <span class="keyword">new</span> BurnInProtectionHelper(</span><br><span class="line">                context, minHorizontal, maxHorizontal, minVertical, maxVertical, maxRadius);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mHandler = <span class="keyword">new</span> PolicyHandler();</span><br><span class="line">    mWakeGestureListener = <span class="keyword">new</span> MyWakeGestureListener(mContext, mHandler);</span><br><span class="line">    mOrientationListener = <span class="keyword">new</span> MyOrientationListener(mContext, mHandler);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mOrientationListener.setCurrentRotation(windowManager.getDefaultDisplayRotation());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException ex) &#123; &#125;</span><br><span class="line">    mSettingsObserver = <span class="keyword">new</span> SettingsObserver(mHandler);</span><br><span class="line">    mSettingsObserver.observe();</span><br><span class="line">    mShortcutManager = <span class="keyword">new</span> ShortcutManager(context);</span><br><span class="line">    mUiMode = context.getResources().getInteger(</span><br><span class="line">            com.android.internal.R.integer.config_defaultUiModeType);</span><br><span class="line">    mHomeIntent =  <span class="keyword">new</span> Intent(Intent.ACTION_MAIN, <span class="keyword">null</span>);</span><br><span class="line">    mHomeIntent.addCategory(Intent.CATEGORY_HOME);</span><br><span class="line">    mHomeIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK</span><br><span class="line">            | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);</span><br><span class="line">    mEnableCarDockHomeCapture = context.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_enableCarDockHomeLaunch);</span><br><span class="line">    mCarDockIntent =  <span class="keyword">new</span> Intent(Intent.ACTION_MAIN, <span class="keyword">null</span>);</span><br><span class="line">    mCarDockIntent.addCategory(Intent.CATEGORY_CAR_DOCK);</span><br><span class="line">    mCarDockIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK</span><br><span class="line">            | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);</span><br><span class="line">    mDeskDockIntent =  <span class="keyword">new</span> Intent(Intent.ACTION_MAIN, <span class="keyword">null</span>);</span><br><span class="line">    mDeskDockIntent.addCategory(Intent.CATEGORY_DESK_DOCK);</span><br><span class="line">    mDeskDockIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK</span><br><span class="line">            | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);</span><br><span class="line">    mVrHeadsetHomeIntent =  <span class="keyword">new</span> Intent(Intent.ACTION_MAIN, <span class="keyword">null</span>);</span><br><span class="line">    mVrHeadsetHomeIntent.addCategory(Intent.CATEGORY_VR_HOME);</span><br><span class="line">    mVrHeadsetHomeIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK</span><br><span class="line">            | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);</span><br><span class="line"></span><br><span class="line">    mPowerManager = (PowerManager)context.getSystemService(Context.POWER_SERVICE);</span><br><span class="line">    mBroadcastWakeLock = mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,</span><br><span class="line">            <span class="string">&quot;PhoneWindowManager.mBroadcastWakeLock&quot;</span>);</span><br><span class="line">    mPowerKeyWakeLock = mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,</span><br><span class="line">            <span class="string">&quot;PhoneWindowManager.mPowerKeyWakeLock&quot;</span>);</span><br><span class="line">    mEnableShiftMenuBugReports = <span class="string">&quot;1&quot;</span>.equals(SystemProperties.get(<span class="string">&quot;ro.debuggable&quot;</span>));</span><br><span class="line">    mSupportAutoRotation = mContext.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_supportAutoRotation);</span><br><span class="line">    mLidOpenRotation = readRotation(</span><br><span class="line">            com.android.internal.R.integer.config_lidOpenRotation);</span><br><span class="line">    mCarDockRotation = readRotation(</span><br><span class="line">            com.android.internal.R.integer.config_carDockRotation);</span><br><span class="line">    mDeskDockRotation = readRotation(</span><br><span class="line">            com.android.internal.R.integer.config_deskDockRotation);</span><br><span class="line">    mUndockedHdmiRotation = readRotation(</span><br><span class="line">            com.android.internal.R.integer.config_undockedHdmiRotation);</span><br><span class="line">    mCarDockEnablesAccelerometer = mContext.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_carDockEnablesAccelerometer);</span><br><span class="line">    mDeskDockEnablesAccelerometer = mContext.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_deskDockEnablesAccelerometer);</span><br><span class="line">    mLidKeyboardAccessibility = mContext.getResources().getInteger(</span><br><span class="line">            com.android.internal.R.integer.config_lidKeyboardAccessibility);</span><br><span class="line">    mLidNavigationAccessibility = mContext.getResources().getInteger(</span><br><span class="line">            com.android.internal.R.integer.config_lidNavigationAccessibility);</span><br><span class="line">    mLidControlsScreenLock = mContext.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_lidControlsScreenLock);</span><br><span class="line">    mLidControlsSleep = mContext.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_lidControlsSleep);</span><br><span class="line">    mTranslucentDecorEnabled = mContext.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_enableTranslucentDecor);</span><br><span class="line"></span><br><span class="line">    mAllowTheaterModeWakeFromKey = mContext.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_allowTheaterModeWakeFromKey);</span><br><span class="line">    mAllowTheaterModeWakeFromPowerKey = mAllowTheaterModeWakeFromKey</span><br><span class="line">            || mContext.getResources().getBoolean(</span><br><span class="line">                com.android.internal.R.bool.config_allowTheaterModeWakeFromPowerKey);</span><br><span class="line">    mAllowTheaterModeWakeFromMotion = mContext.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_allowTheaterModeWakeFromMotion);</span><br><span class="line">    mAllowTheaterModeWakeFromMotionWhenNotDreaming = mContext.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_allowTheaterModeWakeFromMotionWhenNotDreaming);</span><br><span class="line">    mAllowTheaterModeWakeFromCameraLens = mContext.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_allowTheaterModeWakeFromCameraLens);</span><br><span class="line">    mAllowTheaterModeWakeFromLidSwitch = mContext.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_allowTheaterModeWakeFromLidSwitch);</span><br><span class="line">    mAllowTheaterModeWakeFromWakeGesture = mContext.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_allowTheaterModeWakeFromGesture);</span><br><span class="line"></span><br><span class="line">    mGoToSleepOnButtonPressTheaterMode = mContext.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_goToSleepOnButtonPressTheaterMode);</span><br><span class="line"></span><br><span class="line">    mSupportLongPressPowerWhenNonInteractive = mContext.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_supportLongPressPowerWhenNonInteractive);</span><br><span class="line"></span><br><span class="line">    mLongPressOnBackBehavior = mContext.getResources().getInteger(</span><br><span class="line">            com.android.internal.R.integer.config_longPressOnBackBehavior);</span><br><span class="line"></span><br><span class="line">    mShortPressOnPowerBehavior = mContext.getResources().getInteger(</span><br><span class="line">            com.android.internal.R.integer.config_shortPressOnPowerBehavior);</span><br><span class="line">    mLongPressOnPowerBehavior = mContext.getResources().getInteger(</span><br><span class="line">            com.android.internal.R.integer.config_longPressOnPowerBehavior);</span><br><span class="line">    mVeryLongPressOnPowerBehavior = mContext.getResources().getInteger(</span><br><span class="line">            com.android.internal.R.integer.config_veryLongPressOnPowerBehavior);</span><br><span class="line">    mDoublePressOnPowerBehavior = mContext.getResources().getInteger(</span><br><span class="line">            com.android.internal.R.integer.config_doublePressOnPowerBehavior);</span><br><span class="line">    mTriplePressOnPowerBehavior = mContext.getResources().getInteger(</span><br><span class="line">            com.android.internal.R.integer.config_triplePressOnPowerBehavior);</span><br><span class="line">    mShortPressOnSleepBehavior = mContext.getResources().getInteger(</span><br><span class="line">            com.android.internal.R.integer.config_shortPressOnSleepBehavior);</span><br><span class="line">    mVeryLongPressTimeout = mContext.getResources().getInteger(</span><br><span class="line">            com.android.internal.R.integer.config_veryLongPressTimeout);</span><br><span class="line">    mAllowStartActivityForLongPressOnPowerDuringSetup = mContext.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_allowStartActivityForLongPressOnPowerInSetup);</span><br><span class="line"></span><br><span class="line">    mUseTvRouting = AudioSystem.getPlatformType(mContext) == AudioSystem.PLATFORM_TELEVISION;</span><br><span class="line"></span><br><span class="line">    mHandleVolumeKeysInWM = mContext.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_handleVolumeKeysInWindowManager);</span><br><span class="line"></span><br><span class="line">    readConfigurationDependentBehaviors();</span><br><span class="line"></span><br><span class="line">    mAccessibilityManager = (AccessibilityManager) context.getSystemService(</span><br><span class="line">            Context.ACCESSIBILITY_SERVICE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// register for dock events</span></span><br><span class="line">    IntentFilter filter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">    filter.addAction(UiModeManager.ACTION_ENTER_CAR_MODE);</span><br><span class="line">    filter.addAction(UiModeManager.ACTION_EXIT_CAR_MODE);</span><br><span class="line">    filter.addAction(UiModeManager.ACTION_ENTER_DESK_MODE);</span><br><span class="line">    filter.addAction(UiModeManager.ACTION_EXIT_DESK_MODE);</span><br><span class="line">    filter.addAction(Intent.ACTION_DOCK_EVENT);</span><br><span class="line">    Intent intent = context.registerReceiver(mDockReceiver, filter);</span><br><span class="line">    <span class="keyword">if</span> (intent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Retrieve current sticky dock event broadcast.</span></span><br><span class="line">        mDockMode = intent.getIntExtra(Intent.EXTRA_DOCK_STATE,</span><br><span class="line">                Intent.EXTRA_DOCK_STATE_UNDOCKED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// register for dream-related broadcasts</span></span><br><span class="line">    filter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">    filter.addAction(Intent.ACTION_DREAMING_STARTED);</span><br><span class="line">    filter.addAction(Intent.ACTION_DREAMING_STOPPED);</span><br><span class="line">    context.registerReceiver(mDreamReceiver, filter);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// register for multiuser-relevant broadcasts</span></span><br><span class="line">    filter = <span class="keyword">new</span> IntentFilter(Intent.ACTION_USER_SWITCHED);</span><br><span class="line">    context.registerReceiver(mMultiuserReceiver, filter);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// monitor for system gestures</span></span><br><span class="line">    <span class="comment">// TODO(multi-display): Needs to be display specific.</span></span><br><span class="line">    mSystemGestures = <span class="keyword">new</span> SystemGesturesPointerEventListener(context,</span><br><span class="line">            <span class="keyword">new</span> SystemGesturesPointerEventListener.Callbacks() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwipeFromTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (mStatusBar != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        requestTransientBars(mStatusBar);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwipeFromBottom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (mNavigationBar != <span class="keyword">null</span> &amp;&amp; mNavigationBarPosition == NAV_BAR_BOTTOM) &#123;</span><br><span class="line">                        requestTransientBars(mNavigationBar);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwipeFromRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (mNavigationBar != <span class="keyword">null</span> &amp;&amp; mNavigationBarPosition == NAV_BAR_RIGHT) &#123;</span><br><span class="line">                        requestTransientBars(mNavigationBar);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwipeFromLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (mNavigationBar != <span class="keyword">null</span> &amp;&amp; mNavigationBarPosition == NAV_BAR_LEFT) &#123;</span><br><span class="line">                        requestTransientBars(mNavigationBar);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFling</span><span class="params">(<span class="keyword">int</span> duration)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (mPowerManagerInternal != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        mPowerManagerInternal.powerHint(</span><br><span class="line">                                PowerHint.INTERACTION, duration);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDebug</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// no-op</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    mOrientationListener.onTouchStart();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpOrCancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    mOrientationListener.onTouchEnd();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMouseHoverAtTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    mHandler.removeMessages(MSG_REQUEST_TRANSIENT_BARS);</span><br><span class="line">                    Message msg = mHandler.obtainMessage(MSG_REQUEST_TRANSIENT_BARS);</span><br><span class="line">                    msg.arg1 = MSG_REQUEST_TRANSIENT_BARS_ARG_STATUS;</span><br><span class="line">                    mHandler.sendMessageDelayed(msg, <span class="number">500</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMouseHoverAtBottom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    mHandler.removeMessages(MSG_REQUEST_TRANSIENT_BARS);</span><br><span class="line">                    Message msg = mHandler.obtainMessage(MSG_REQUEST_TRANSIENT_BARS);</span><br><span class="line">                    msg.arg1 = MSG_REQUEST_TRANSIENT_BARS_ARG_NAVIGATION;</span><br><span class="line">                    mHandler.sendMessageDelayed(msg, <span class="number">500</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMouseLeaveFromEdge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    mHandler.removeMessages(MSG_REQUEST_TRANSIENT_BARS);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    mImmersiveModeConfirmation = <span class="keyword">new</span> ImmersiveModeConfirmation(mContext);</span><br><span class="line">    mWindowManagerFuncs.registerPointerEventListener(mSystemGestures);</span><br><span class="line"></span><br><span class="line">    mVibrator = (Vibrator)context.getSystemService(Context.VIBRATOR_SERVICE);</span><br><span class="line">    mLongPressVibePattern = getLongIntArray(mContext.getResources(),</span><br><span class="line">            com.android.internal.R.array.config_longPressVibePattern);</span><br><span class="line">    mCalendarDateVibePattern = getLongIntArray(mContext.getResources(),</span><br><span class="line">            com.android.internal.R.array.config_calendarDateVibePattern);</span><br><span class="line">    mSafeModeEnabledVibePattern = getLongIntArray(mContext.getResources(),</span><br><span class="line">            com.android.internal.R.array.config_safeModeEnabledVibePattern);</span><br><span class="line"></span><br><span class="line">    mScreenshotChordEnabled = mContext.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_enableScreenshotChord);</span><br><span class="line"></span><br><span class="line">    mGlobalKeyManager = <span class="keyword">new</span> GlobalKeyManager(mContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Controls rotation and the like.</span></span><br><span class="line">    initializeHdmiState();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Match current screen state.</span></span><br><span class="line">    <span class="keyword">if</span> (!mPowerManager.isInteractive()) &#123;</span><br><span class="line">        startedGoingToSleep(WindowManagerPolicy.OFF_BECAUSE_OF_USER);</span><br><span class="line">        finishedGoingToSleep(WindowManagerPolicy.OFF_BECAUSE_OF_USER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mWindowManagerInternal.registerAppTransitionListener(</span><br><span class="line">            mStatusBarController.getAppTransitionListener());</span><br><span class="line">    mWindowManagerInternal.registerAppTransitionListener(<span class="keyword">new</span> AppTransitionListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onAppTransitionStartingLocked</span><span class="params">(<span class="keyword">int</span> transit, IBinder openToken,</span></span></span><br><span class="line"><span class="function"><span class="params">                IBinder closeToken, <span class="keyword">long</span> duration, <span class="keyword">long</span> statusBarAnimationStartTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">long</span> statusBarAnimationDuration)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> handleStartTransitionForKeyguardLw(transit, duration);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAppTransitionCancelledLocked</span><span class="params">(<span class="keyword">int</span> transit)</span> </span>&#123;</span><br><span class="line">            handleStartTransitionForKeyguardLw(transit, <span class="number">0</span> <span class="comment">/* duration */</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    mKeyguardDelegate = <span class="keyword">new</span> KeyguardServiceDelegate(mContext,</span><br><span class="line">            <span class="keyword">new</span> StateCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTrustedChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    mWindowManagerFuncs.notifyKeyguardTrustedChanged();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onShowingChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    mWindowManagerFuncs.onKeyguardShowingAndNotOccludedChanged();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    mScreenshotHelper = <span class="keyword">new</span> ScreenshotHelper(mContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）建立与surface的联系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">openSurfaceTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Trace.traceBegin(TRACE_TAG_WINDOW_MANAGER, <span class="string">&quot;openSurfaceTransaction&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (mWindowMap) &#123;</span><br><span class="line">                SurfaceControl.openTransaction();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Trace.traceEnd(TRACE_TAG_WINDOW_MANAGER);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** start a transaction */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">openTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SurfaceControl.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sGlobalTransaction == <span class="keyword">null</span>) &#123;</span><br><span class="line">                sGlobalTransaction = <span class="keyword">new</span> Transaction();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span>(SurfaceControl.class) &#123;</span><br><span class="line">                sTransactionNestCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Transaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mNativeObject = nativeCreateTransaction();</span><br><span class="line">            mFreeNativeResources</span><br><span class="line">                = sRegistry.registerNativeAllocation(<span class="keyword">this</span>, mNativeObject);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-WMS的ready函数"><a href="#1-3-WMS的ready函数" class="headerlink" title="1.3 WMS的ready函数"></a>1.3 WMS的ready函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">systemReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mPolicy.systemReady();<span class="comment">//调用PhoneWindowManager的systemReady函数</span></span><br><span class="line">    mTaskSnapshotController.systemReady();</span><br><span class="line">    mHasWideColorGamutSupport = queryWideColorGamutSupport();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">systemReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// In normal flow, systemReady is called before other system services are ready.</span></span><br><span class="line">    <span class="comment">// So it is better not to bind keyguard here.</span></span><br><span class="line">    mKeyguardDelegate.onSystemReady();</span><br><span class="line"></span><br><span class="line">    mVrManagerInternal = LocalServices.getService(VrManagerInternal.class);</span><br><span class="line">    <span class="keyword">if</span> (mVrManagerInternal != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mVrManagerInternal.addPersistentVrModeStateListener(mPersistentVrModeListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    readCameraLensCoverState();</span><br><span class="line">    updateUiMode();</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        updateOrientationListenerLp();</span><br><span class="line">        mSystemReady = <span class="keyword">true</span>;</span><br><span class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                updateSettings();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// If this happens, for whatever reason, systemReady came later than systemBooted.</span></span><br><span class="line">        <span class="comment">// And keyguard should be already bound from systemBooted</span></span><br><span class="line">        <span class="keyword">if</span> (mSystemBooted) &#123;</span><br><span class="line">            mKeyguardDelegate.onBootCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mSystemGestures.systemReady();</span><br><span class="line">    mImmersiveModeConfirmation.systemReady();</span><br><span class="line"></span><br><span class="line">    mAutofillManagerInternal = LocalServices.getService(AutofillManagerInternal.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-startOtherServices&quot;&gt;&lt;a href=&quot;#1-startOtherServices&quot; class=&quot;headerlink&quot; title=&quot;1.startOtherServices&quot;&gt;&lt;/a&gt;1.startOtherServices&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="WMS" scheme="http://example.com/categories/WMS/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>WMS-01-预览</title>
    <link href="http://example.com/2020/11/13/WMS-01-%E9%A2%84%E8%A7%88/"/>
    <id>http://example.com/2020/11/13/WMS-01-%E9%A2%84%E8%A7%88/</id>
    <published>2020-11-13T06:40:36.000Z</published>
    <updated>2020-11-19T01:14:21.816Z</updated>
    
    <content type="html"><![CDATA[<p>window：手机上一块显示区域，添加一个Window的过程，也就是申请分配一块Surface的过程，一个顶级窗口查看和行为的一个抽象基类。这个类的实例作为一个顶级View添加到Window Manager。可以看到，Window是一个抽象基类，它提供了一系列窗口的方法，比如设置背景，标题等等，而它的唯一实现类则是PhoneWindow。</p><p><img src="/images/WMS-01-%E9%A2%84%E8%A7%88/image-20201113144941074.png" alt="image-20201113144941074"></p><p>PhoneWindow：它是抽象类window的唯一实现类，PhoneWindow有成员变量DecorView，DecorView则是PhoneWindow里面的一个内部类，它是继承与FrameLayout</p><p><img src="/images/WMS-01-%E9%A2%84%E8%A7%88/image-20201113145736848.png" alt="image-20201113145736848"></p><p>根据对PhoneWindow类的分析，其结构如下：</p><p><img src="/images/WMS-01-%E9%A2%84%E8%A7%88/image-20201113145926506.png" alt="image-20201113145926506"></p><p> WindowManager：可以看到WindowManager是一个接口，而且它继承自ViewManager。WindowManager字面理解就是窗口管理器，每一个窗口管理器都与一个的窗口显示绑定。获取实例可以通过<br> Context.getSystemService(Context.WINDOW_SERVICE)获取。既然继承了ViewManager，那么它也就可以进行添加删除View的操作了，不过它的操作放在它的实现类WindowManagerImpl里面。</p><p><img src="/images/WMS-01-%E9%A2%84%E8%A7%88/image-20201113153209320.png" alt="image-20201113153209320"></p><p>而WindowManagerImpl又是通过调用WindowManagerGlobal类的方法去执行真正的View操作，而通过对WindowManagerGlobal类的分析，可知，WindowManagerGlobal是一个单例，因此整个系统也就只有一个WindowManagerGlobal实例。</p><p><img src="/images/WMS-01-%E9%A2%84%E8%A7%88/WMS-%E7%B1%BB%E5%88%86%E6%9E%90.bmp" alt="WMS-类分析"></p><p>这样DecorView与ViewRootImpl，PhoneWindow与WindowManager之间建立起绑定关系。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;window：手机上一块显示区域，添加一个Window的过程，也就是申请分配一块Surface的过程，一个顶级窗口查看和行为的一个抽象基类。这个类的实例作为一个顶级View添加到Window Manager。可以看到，Window是一个抽象基类，它提供了一系列窗口的方法，比</summary>
      
    
    
    
    <category term="WMS" scheme="http://example.com/categories/WMS/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>PMS-01-PKMS系统需求分析</title>
    <link href="http://example.com/2020/11/12/PMS-01-PKMS%E7%B3%BB%E7%BB%9F%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2020/11/12/PMS-01-PKMS%E7%B3%BB%E7%BB%9F%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/</id>
    <published>2020-11-12T08:32:31.000Z</published>
    <updated>2020-11-12T08:32:31.919Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>PMS-01-PKMS启动流程分析</title>
    <link href="http://example.com/2020/11/12/PMS-01-PKMS%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2020/11/12/PMS-01-PKMS%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</id>
    <published>2020-11-12T08:01:59.000Z</published>
    <updated>2020-11-13T12:22:50.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-startBootstrapServices"><a href="#1-startBootstrapServices" class="headerlink" title="1.startBootstrapServices"></a>1.startBootstrapServices</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startBootstrapServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">...........</span><br><span class="line">        <span class="comment">// 启动Installer</span></span><br><span class="line">        traceBeginAndSlog(<span class="string">&quot;StartInstaller&quot;</span>);</span><br><span class="line">        Installer installer = mSystemServiceManager.startService(Installer.class);</span><br><span class="line">        traceEnd();</span><br><span class="line">        ...........</span><br><span class="line">        <span class="comment">// Start the package manager.</span></span><br><span class="line">        <span class="keyword">if</span> (!mRuntimeRestart) &#123;</span><br><span class="line">            MetricsLogger.histogram(<span class="keyword">null</span>, <span class="string">&quot;boot_package_manager_init_start&quot;</span>,</span><br><span class="line">                    (<span class="keyword">int</span>) SystemClock.elapsedRealtime());</span><br><span class="line">        &#125;</span><br><span class="line">        traceBeginAndSlog(<span class="string">&quot;StartPackageManagerService&quot;</span>);</span><br><span class="line">    <span class="comment">//创建出PKMS</span></span><br><span class="line">        mPackageManagerService = PackageManagerService.main(mSystemContext, installer,</span><br><span class="line">                mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF, mOnlyCore);</span><br><span class="line">    <span class="comment">// 判断PKMS是否是第一次启动</span></span><br><span class="line">        mFirstBoot = mPackageManagerService.isFirstBoot();</span><br><span class="line">    <span class="comment">// 获取PackageManager</span></span><br><span class="line">        mPackageManager = mSystemContext.getPackageManager();</span><br><span class="line">        traceEnd();</span><br><span class="line">        <span class="keyword">if</span> (!mRuntimeRestart &amp;&amp; !isFirstBootOrUpgrade()) &#123;</span><br><span class="line">            MetricsLogger.histogram(<span class="keyword">null</span>, <span class="string">&quot;boot_package_manager_init_ready&quot;</span>,</span><br><span class="line">                    (<span class="keyword">int</span>) SystemClock.elapsedRealtime());</span><br><span class="line">        &#125;</span><br><span class="line">   ...........</span><br><span class="line">       ...........</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>startBootstrapServices中，针对PKMS主要做了以下几件事：</p><p>1）启动Installer</p><p>2）调用PackageManagerService.main</p><p>3）获取mSystemContext.getPackageManager</p><p>PackageManagerService的main方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PackageManagerService <span class="title">main</span><span class="params">(Context context, Installer installer,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> factoryTest, <span class="keyword">boolean</span> onlyCore)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Self-check for initial settings.</span></span><br><span class="line">        PackageManagerServiceCompilerMapping.checkProperties();</span><br><span class="line"></span><br><span class="line">        PackageManagerService m = <span class="keyword">new</span> PackageManagerService(context, installer,</span><br><span class="line">                factoryTest, onlyCore);</span><br><span class="line">    <span class="comment">// enable系统用户的APP</span></span><br><span class="line">        m.enableSystemUserPackages();</span><br><span class="line">     <span class="comment">// 将PackageManagerService添加到ServiceManager中，service名为package</span></span><br><span class="line">        ServiceManager.addService(<span class="string">&quot;package&quot;</span>, m);</span><br><span class="line">    <span class="comment">// 添加package_native service到ServiceManager</span></span><br><span class="line">        <span class="keyword">final</span> PackageManagerNative pmn = m.<span class="function">new <span class="title">PackageManagerNative</span><span class="params">()</span></span>;</span><br><span class="line">        ServiceManager.addService(<span class="string">&quot;package_native&quot;</span>, pmn);</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>main函数主要做了四件事：</p><p>1）检查系统属性</p><p>2）创建出PackageManagerService实例</p><p>3）将PackageManagerService注册到ServiceManager中</p><p>4）创建出PackageManagerNative对象，并添加到ServiceManager中</p><h1 id="PackageManagerService的构造函数"><a href="#PackageManagerService的构造函数" class="headerlink" title="PackageManagerService的构造函数"></a>PackageManagerService的构造函数</h1><p>在PKMS的构造函数中主要分为5个阶段：</p><p>1）第一阶段BOOT_PROGRESS_PMS_START</p><p>2）第一阶段BOOT_PROGRESS_PMS_SYSTEM_SCAN_START</p><p>3）第一阶段BOOT_PROGRESS_PMS_START</p><p>4）第一阶段BOOT_PROGRESS_PMS_START</p><p>5）第一阶段BOOT_PROGRESS_PMS_START</p><h2 id="第一阶段：BOOT-PROGRESS-PMS-START"><a href="#第一阶段：BOOT-PROGRESS-PMS-START" class="headerlink" title="第一阶段：BOOT_PROGRESS_PMS_START"></a>第一阶段：BOOT_PROGRESS_PMS_START</h2><p>第一阶段BOOT_PROGRESS_PMS_START主要做了以下几件事：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PackageManagerService</span><span class="params">(Context context, Installer installer,<span class="keyword">boolean</span> factoryTest, <span class="keyword">boolean</span> onlyCore)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//第一阶段BOOT_PROGRESS_PMS_START</span></span><br><span class="line">    EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_START,</span><br><span class="line">                SystemClock.uptimeMillis());</span><br><span class="line">    mContext = context;</span><br><span class="line"></span><br><span class="line">    mFactoryTest = factoryTest;</span><br><span class="line">    mOnlyCore = onlyCore;</span><br><span class="line">    mMetrics = <span class="keyword">new</span> DisplayMetrics();<span class="comment">//创建一个显示分辨率实例</span></span><br><span class="line">    mInstaller = installer;<span class="comment">//初始化安装器</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Create sub-components that provide services / data. Order here is important.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mInstallLock) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="comment">// Expose private service for system components to use.</span></span><br><span class="line">            LocalServices.addService(</span><br><span class="line">                    PackageManagerInternal.class, <span class="keyword">new</span> PackageManagerInternalImpl());</span><br><span class="line">            sUserManager = <span class="keyword">new</span> UserManagerService(context, <span class="keyword">this</span>,</span><br><span class="line">                    <span class="keyword">new</span> UserDataPreparer(mInstaller, mInstallLock, mContext, mOnlyCore), mPackages);</span><br><span class="line">            <span class="comment">//权限管理</span></span><br><span class="line">            mPermissionManager = PermissionManagerService.create(context,</span><br><span class="line">                    <span class="keyword">new</span> DefaultPermissionGrantedCallback() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDefaultRuntimePermissionsGranted</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">synchronized</span>(mPackages) &#123;</span><br><span class="line">                                mSettings.onDefaultRuntimePermissionsGrantedLPr(userId);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, mPackages <span class="comment">/*externalLock*/</span>);</span><br><span class="line">            mDefaultPermissionPolicy = mPermissionManager.getDefaultPermissionGrantPolicy();</span><br><span class="line">            <span class="comment">//创建一个Settings的对象，用于保存安装包的信息</span></span><br><span class="line">            mSettings = <span class="keyword">new</span> Settings(mPermissionManager.getPermissionSettings(), mPackages);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//可以通过在AndroidManifest.xml文件中设置sharedUserId属性来设置多个APK运行在同一个进程中，例如是运行在system进程，耗时radio进程。</span></span><br><span class="line">    <span class="comment">//在mSettings中添加sharedUserId属性</span></span><br><span class="line">    mSettings.addSharedUserLPw(<span class="string">&quot;android.uid.system&quot;</span>, Process.SYSTEM_UID,</span><br><span class="line">                ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</span><br><span class="line">        mSettings.addSharedUserLPw(<span class="string">&quot;android.uid.phone&quot;</span>, RADIO_UID,</span><br><span class="line">                ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</span><br><span class="line">        mSettings.addSharedUserLPw(<span class="string">&quot;android.uid.log&quot;</span>, LOG_UID,</span><br><span class="line">                ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</span><br><span class="line">        mSettings.addSharedUserLPw(<span class="string">&quot;android.uid.nfc&quot;</span>, NFC_UID,</span><br><span class="line">                ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</span><br><span class="line">        mSettings.addSharedUserLPw(<span class="string">&quot;android.uid.bluetooth&quot;</span>, BLUETOOTH_UID,</span><br><span class="line">                ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</span><br><span class="line">        mSettings.addSharedUserLPw(<span class="string">&quot;android.uid.shell&quot;</span>, SHELL_UID,</span><br><span class="line">                ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</span><br><span class="line">        mSettings.addSharedUserLPw(<span class="string">&quot;android.uid.se&quot;</span>, SE_UID,</span><br><span class="line">                ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//包做dex优化</span></span><br><span class="line">   mPackageDexOptimizer = <span class="keyword">new</span> PackageDexOptimizer(installer, mInstallLock, context,</span><br><span class="line">                <span class="string">&quot;*dexopt*&quot;</span>);</span><br><span class="line">        DexManager.Listener dexManagerListener = DexLogger.getListener(<span class="keyword">this</span>,</span><br><span class="line">                installer, mInstallLock);</span><br><span class="line">        mDexManager = <span class="keyword">new</span> DexManager(mContext, <span class="keyword">this</span>, mPackageDexOptimizer, installer, mInstallLock,</span><br><span class="line">                dexManagerListener);</span><br><span class="line">        mArtManagerService = <span class="keyword">new</span> ArtManagerService(mContext, <span class="keyword">this</span>, installer, mInstallLock);</span><br><span class="line">        mMoveCallbacks = <span class="keyword">new</span> MoveCallbacks(FgThread.get().getLooper());</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在PKMS的构造函数中主要分为5个阶段：</p><p>1）第一阶段BOOT_PROGRESS_PMS_START</p><p>2）第一阶段BOOT_PROGRESS_PMS_START</p><p>3）第一阶段BOOT_PROGRESS_PMS_START</p><p>4）第一阶段BOOT_PROGRESS_PMS_START</p><p>5）第一阶段BOOT_PROGRESS_PMS_START</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Settings(File dataDir, PermissionSettings permission, Object lock) &#123;</span><br><span class="line">        mLock = lock;</span><br><span class="line">        mPermissions = permission;</span><br><span class="line">        mRuntimePermissionsPersistence = <span class="keyword">new</span> RuntimePermissionPersistence(mLock);</span><br><span class="line"></span><br><span class="line">        mSystemDir = <span class="keyword">new</span> File(dataDir, <span class="string">&quot;system&quot;</span>);<span class="comment">//创建/data/system目录</span></span><br><span class="line">        mSystemDir.mkdirs();</span><br><span class="line">        FileUtils.setPermissions(mSystemDir.toString(),</span><br><span class="line">                FileUtils.S_IRWXU|FileUtils.S_IRWXG</span><br><span class="line">                |FileUtils.S_IROTH|FileUtils.S_IXOTH,</span><br><span class="line">                -<span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line">        mSettingsFilename = <span class="keyword">new</span> File(mSystemDir, <span class="string">&quot;packages.xml&quot;</span>);</span><br><span class="line">        mBackupSettingsFilename = <span class="keyword">new</span> File(mSystemDir, <span class="string">&quot;packages-backup.xml&quot;</span>);</span><br><span class="line">        mPackageListFilename = <span class="keyword">new</span> File(mSystemDir, <span class="string">&quot;packages.list&quot;</span>);</span><br><span class="line">        FileUtils.setPermissions(mPackageListFilename, <span class="number">0640</span>, SYSTEM_UID, PACKAGE_INFO_GID);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> File kernelDir = <span class="keyword">new</span> File(<span class="string">&quot;/config/sdcardfs&quot;</span>);</span><br><span class="line">        mKernelMappingFilename = kernelDir.exists() ? kernelDir : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Deprecated: Needed for migration</span></span><br><span class="line">        mStoppedPackagesFilename = <span class="keyword">new</span> File(mSystemDir, <span class="string">&quot;packages-stopped.xml&quot;</span>);</span><br><span class="line">        mBackupStoppedPackagesFilename = <span class="keyword">new</span> File(mSystemDir, <span class="string">&quot;packages-stopped-backup.xml&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="packages-xml与packages-list"><a href="#packages-xml与packages-list" class="headerlink" title="packages.xml与packages.list"></a>packages.xml与packages.list</h3><p>会创建data/system目录，用于保存应用的安装信息文件：</p><p><img src="/images/PMS-01-PKMS%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20201113101118367.png" alt="image-20201113101118367"></p><p>packages.xml与packages.list文件的内容：</p><h4 id="packages-xml"><a href="#packages-xml" class="headerlink" title="packages.xml"></a>packages.xml</h4><p>packages.xml文件用于保存应用信息，且在系统中的Apk安装、删除、升级时，packages.xml文件也会被更新。</p><p><img src="/images/PMS-01-PKMS%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/image-20201113102445614.png" alt="image-20201113102445614"></p><ul><li><permissions>标签定义了目前系统中的所以权限，并分为两类：系统定义的(package属性为Android)和Apk定义的(package属性为Apk的包名),如下所示。</permissions></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">permissions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.REAL_GET_TASKS&quot;</span> <span class="attr">package</span>=<span class="string">&quot;android&quot;</span> <span class="attr">protection</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.ACCESS_CACHE_FILESYSTEM&quot;</span> <span class="attr">package</span>=<span class="string">&quot;android&quot;</span> <span class="attr">protection</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.REMOTE_AUDIO_PLAYBACK&quot;</span> <span class="attr">package</span>=<span class="string">&quot;android&quot;</span> <span class="attr">protection</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.DOWNLOAD_WITHOUT_NOTIFICATION&quot;</span> <span class="attr">package</span>=<span class="string">&quot;com.android.providers.downloads&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.REGISTER_WINDOW_MANAGER_LISTENERS&quot;</span> <span class="attr">package</span>=<span class="string">&quot;android&quot;</span> <span class="attr">protection</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.INTENT_FILTER_VERIFICATION_AGENT&quot;</span> <span class="attr">package</span>=<span class="string">&quot;android&quot;</span> <span class="attr">protection</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.BIND_INCALL_SERVICE&quot;</span> <span class="attr">package</span>=<span class="string">&quot;android&quot;</span> <span class="attr">protection</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.PROVIDE_RESOLVER_RANKER_SERVICE&quot;</span> <span class="attr">package</span>=<span class="string">&quot;android&quot;</span> <span class="attr">protection</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">permissions</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><package>标签代表了一个Apk的属性。</package></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;com.android.car.radio&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">codePath</span>=<span class="string">&quot;/system/priv-app/CarRadioApp&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">nativeLibraryPath</span>=<span class="string">&quot;/system/priv-app/CarRadioApp/lib&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">publicFlags</span>=<span class="string">&quot;940097093&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">privateFlags</span>=<span class="string">&quot;8&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">ft</span>=<span class="string">&quot;1759c824b10&quot;</span> //<span class="attr">ft</span> 表示 <span class="attr">apk</span> 文件上次被更改的时间,</span></span><br><span class="line"><span class="tag">    <span class="attr">it</span>=<span class="string">&quot;1759c824b10&quot;</span> //<span class="attr">it</span> 表示 <span class="attr">app</span> 第一次安装的时间,</span></span><br><span class="line"><span class="tag">    <span class="attr">ut</span>=<span class="string">&quot;1759c824b10&quot;</span> //<span class="attr">ut</span> 表示 <span class="attr">app</span> 上次被更新时间</span></span><br><span class="line"><span class="tag">    <span class="attr">version</span>=<span class="string">&quot;28&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">userId</span>=<span class="string">&quot;10035&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">isOrphaned</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sigs</span> <span class="attr">count</span>=<span class="string">&quot;1&quot;</span> <span class="attr">schemeVersion</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cert</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sigs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">perms</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android.car.permission.CAR_CONTROL_AUDIO_VOLUME&quot;</span> <span class="attr">granted</span>=<span class="string">&quot;true&quot;</span> <span class="attr">flags</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.ACCESS_BROADCAST_RADIO&quot;</span> <span class="attr">granted</span>=<span class="string">&quot;true&quot;</span> <span class="attr">flags</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android.car.permission.CAR_CONTROL_AUDIO_SETTINGS&quot;</span> <span class="attr">granted</span>=<span class="string">&quot;true&quot;</span> <span class="attr">flags</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">perms</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">proper-signing-keyset</span> <span class="attr">identifier</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中各个节点信息的含义如下所示。</p><p>​     name：Apk包名。</p><p>​    codePath：Apk安装路径。主要时/system/app和/data/app两种。/system/app存放系统级别的Apk或者时厂商定制的Apk，/data/app存放客户安装的第三方Apk。</p><p>​     userId:用户Id。</p><p>​     version:版本号。</p><ul><li><perms>标签</perms></li></ul><p>​    对应的Apk的AndroidMainifest文件中的<uses-permission>标签，记录Apk的权限信息。</uses-permission></p><h4 id="packages-list"><a href="#packages-list" class="headerlink" title="packages.list"></a>packages.list</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.android.car.media 10029 0 &#x2F;data&#x2F;user&#x2F;0&#x2F;com.android.car.media platform:privapp:targetSdkVersion&#x3D;23 3003</span><br><span class="line">com.android.car.radio 10035 0 &#x2F;data&#x2F;user&#x2F;0&#x2F;com.android.car.radio platform:privapp:targetSdkVersion&#x3D;25 1013</span><br><span class="line">com.android.car.trust 10042 0 &#x2F;data&#x2F;user&#x2F;0&#x2F;com.android.car.trust platform:privapp:targetSdkVersion&#x3D;23 3002,3001</span><br></pre></td></tr></table></figure><p>这里用空格符分了6列，分别包含了6个app相关的信息：</p><ul><li>第一列是app的包名，也就是AndroidManifest.xml文件中的package=”xxx.xxx.xxx”设置的内容</li><li>第二列是app的使用的userid, 如果没有在AndroidManifext.xml里使用android:sharedUserId属性指定UID, 在app安装的时候，系统会给这个app自动分配一uid，以后app运行时，就用这个UID运行</li><li>第三列是app是否处于调试模式，由AndroidManifext.xml里android:debuggable指定</li><li>第四列是app的数据存放路径，一般是”/data/data/${package_name}”这样的文件夹</li><li>第五列是app的seinfo信息，这个好像和SEAndroid机制有关，具体我也不是太清楚，它的值好像有platform, default之分</li><li>第六列是app所属的user group, 如果一个app不属于任何group, 这里的值是None</li></ul><h2 id="第二阶段：BOOT-PROGRESS-PMS-SYSTEM-SCAN-START"><a href="#第二阶段：BOOT-PROGRESS-PMS-SYSTEM-SCAN-START" class="headerlink" title="第二阶段：BOOT_PROGRESS_PMS_SYSTEM_SCAN_START"></a>第二阶段：BOOT_PROGRESS_PMS_SYSTEM_SCAN_START</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PackageManagerService</span><span class="params">(Context context, Installer installer,<span class="keyword">boolean</span> factoryTest, <span class="keyword">boolean</span> onlyCore)</span> </span>&#123;</span><br><span class="line">    .........</span><br><span class="line">    <span class="comment">//第二阶段开始</span></span><br><span class="line">    File frameworkDir = <span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">&quot;framework&quot;</span>);</span><br><span class="line">    ........</span><br><span class="line">    scanDirTracedLI(<span class="keyword">new</span> File(VENDOR_OVERLAY_DIR),</span><br><span class="line">                    mDefParseFlags</span><br><span class="line">                    | PackageParser.PARSE_IS_SYSTEM_DIR,</span><br><span class="line">                    scanFlags</span><br><span class="line">                    | SCAN_AS_SYSTEM</span><br><span class="line">                    | SCAN_AS_VENDOR,</span><br><span class="line">                    <span class="number">0</span>);</span><br><span class="line">    scanDirTracedLI(<span class="keyword">new</span> File(PRODUCT_OVERLAY_DIR),</span><br><span class="line">                    mDefParseFlags</span><br><span class="line">                    | PackageParser.PARSE_IS_SYSTEM_DIR,</span><br><span class="line">                    scanFlags</span><br><span class="line">                    | SCAN_AS_SYSTEM</span><br><span class="line">                    | SCAN_AS_PRODUCT,</span><br><span class="line">                    <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    mParallelPackageParserCallback.findStaticOverlayPackages();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find base frameworks (resource packages without code).</span></span><br><span class="line">    scanDirTracedLI(frameworkDir,</span><br><span class="line">                    mDefParseFlags</span><br><span class="line">                    | PackageParser.PARSE_IS_SYSTEM_DIR,</span><br><span class="line">                    scanFlags</span><br><span class="line">                    | SCAN_NO_DEX</span><br><span class="line">                    | SCAN_AS_SYSTEM</span><br><span class="line">                    | SCAN_AS_PRIVILEGED,</span><br><span class="line">                    <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Collect privileged system packages.</span></span><br><span class="line">    <span class="keyword">final</span> File privilegedAppDir = <span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">&quot;priv-app&quot;</span>);</span><br><span class="line">    scanDirTracedLI(privilegedAppDir,</span><br><span class="line">                    mDefParseFlags</span><br><span class="line">                    | PackageParser.PARSE_IS_SYSTEM_DIR,</span><br><span class="line">                    scanFlags</span><br><span class="line">                    | SCAN_AS_SYSTEM</span><br><span class="line">                    | SCAN_AS_PRIVILEGED,</span><br><span class="line">                    <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Collect ordinary system packages.</span></span><br><span class="line">    <span class="keyword">final</span> File systemAppDir = <span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">&quot;app&quot;</span>);</span><br><span class="line">    scanDirTracedLI(systemAppDir,</span><br><span class="line">                    mDefParseFlags</span><br><span class="line">                    | PackageParser.PARSE_IS_SYSTEM_DIR,</span><br><span class="line">                    scanFlags</span><br><span class="line">                    | SCAN_AS_SYSTEM,</span><br><span class="line">                    <span class="number">0</span>);</span><br><span class="line">    .......</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是对以下目录进行扫描：</p><p>/vendor/overlay</p><p>/product/overlay</p><p>/system/framework</p><p>/system/priv-app</p><p>/system/app</p><p>/system/vendor/priv-app</p><p>/system/vendor/app</p><p>/vendor/priv-app</p><p>/vendor/app</p><p>/odm/priv-app</p><p>/odm/app</p><p>/system/product/priv-app</p><p>/system/product/app</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scanDirTracedLI</span><span class="params">(File scanDir, <span class="keyword">final</span> <span class="keyword">int</span> parseFlags, <span class="keyword">int</span> scanFlags, <span class="keyword">long</span> currentTime)</span> </span>&#123;</span><br><span class="line">        Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">&quot;scanDir [&quot;</span> + scanDir.getAbsolutePath() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            scanDirLI(scanDir, parseFlags, scanFlags, currentTime);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scanDirLI</span><span class="params">(File scanDir, <span class="keyword">int</span> parseFlags, <span class="keyword">int</span> scanFlags, <span class="keyword">long</span> currentTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> File[] files = scanDir.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (ArrayUtils.isEmpty(files)) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;No files in app dir &quot;</span> + scanDir);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DEBUG_PACKAGE_SCANNING) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;Scanning app dir &quot;</span> + scanDir + <span class="string">&quot; scanFlags=&quot;</span> + scanFlags</span><br><span class="line">                    + <span class="string">&quot; flags=0x&quot;</span> + Integer.toHexString(parseFlags));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> (ParallelPackageParser parallelPackageParser = <span class="keyword">new</span> ParallelPackageParser(</span><br><span class="line">                mSeparateProcesses, mOnlyCore, mMetrics, mCacheDir,</span><br><span class="line">                mParallelPackageParserCallback)) &#123;</span><br><span class="line">            <span class="comment">// Submit files for parsing in parallel</span></span><br><span class="line">            <span class="keyword">int</span> fileCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> isPackage = (isApkFile(file) || file.isDirectory())</span><br><span class="line">                        &amp;&amp; !PackageInstallerService.isStageName(file.getName());</span><br><span class="line">                <span class="keyword">if</span> (!isPackage) &#123;</span><br><span class="line">                    <span class="comment">// Ignore entries which are not packages</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                parallelPackageParser.submit(file, parseFlags);</span><br><span class="line">                fileCount++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process results one by one</span></span><br><span class="line">            <span class="keyword">for</span> (; fileCount &gt; <span class="number">0</span>; fileCount--) &#123;</span><br><span class="line">                ParallelPackageParser.ParseResult parseResult = parallelPackageParser.take();</span><br><span class="line">                Throwable throwable = parseResult.throwable;</span><br><span class="line">                <span class="keyword">int</span> errorCode = PackageManager.INSTALL_SUCCEEDED;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (throwable == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// TODO(toddke): move lower in the scan chain</span></span><br><span class="line">                    <span class="comment">// Static shared libraries have synthetic package names</span></span><br><span class="line">                    <span class="keyword">if</span> (parseResult.pkg.applicationInfo.isStaticSharedLibrary()) &#123;</span><br><span class="line">                        renameStaticSharedLibraryPackage(parseResult.pkg);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (errorCode == PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">                            scanPackageChildLI(parseResult.pkg, parseFlags, scanFlags,</span><br><span class="line">                                    currentTime, <span class="keyword">null</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">                        errorCode = e.error;</span><br><span class="line">                        Slog.w(TAG, <span class="string">&quot;Failed to scan &quot;</span> + parseResult.scanFile + <span class="string">&quot;: &quot;</span> + e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> PackageParser.PackageParserException) &#123;</span><br><span class="line">                    PackageParser.PackageParserException e = (PackageParser.PackageParserException)</span><br><span class="line">                            throwable;</span><br><span class="line">                    errorCode = e.error;</span><br><span class="line">                    Slog.w(TAG, <span class="string">&quot;Failed to parse &quot;</span> + parseResult.scanFile + <span class="string">&quot;: &quot;</span> + e.getMessage());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Unexpected exception occurred while parsing &quot;</span></span><br><span class="line">                            + parseResult.scanFile, throwable);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Delete invalid userdata apps</span></span><br><span class="line">                <span class="keyword">if</span> ((scanFlags &amp; SCAN_AS_SYSTEM) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                        errorCode != PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">                    logCriticalInfo(Log.WARN,</span><br><span class="line">                            <span class="string">&quot;Deleting invalid package at &quot;</span> + parseResult.scanFile);</span><br><span class="line">                    removeCodePathLI(parseResult.scanFile);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Submits the file for parsing</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> scanFile file to scan</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> parseFlags parse falgs</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(File scanFile, <span class="keyword">int</span> parseFlags)</span> </span>&#123;</span><br><span class="line">       mService.submit(() -&gt; &#123;</span><br><span class="line">           ParseResult pr = <span class="keyword">new</span> ParseResult();</span><br><span class="line">           Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">&quot;parallel parsePackage [&quot;</span> + scanFile + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               PackageParser pp = <span class="keyword">new</span> PackageParser();</span><br><span class="line">               pp.setSeparateProcesses(mSeparateProcesses);</span><br><span class="line">               pp.setOnlyCoreApps(mOnlyCore);</span><br><span class="line">               pp.setDisplayMetrics(mMetrics);</span><br><span class="line">               pp.setCacheDir(mCacheDir);</span><br><span class="line">               pp.setCallback(mPackageParserCallback);</span><br><span class="line">               pr.scanFile = scanFile;</span><br><span class="line">               pr.pkg = parsePackage(pp, scanFile, parseFlags);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">               pr.throwable = e;</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               mQueue.put(pr);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               Thread.currentThread().interrupt();</span><br><span class="line">               <span class="comment">// Propagate result to callers of take().</span></span><br><span class="line">               <span class="comment">// This is helpful to prevent main thread from getting stuck waiting on</span></span><br><span class="line">               <span class="comment">// ParallelPackageParser to finish in case of interruption</span></span><br><span class="line">               mInterruptedInThread = Thread.currentThread().getName();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line">   <span class="keyword">protected</span> PackageParser.<span class="function">Package <span class="title">parsePackage</span><span class="params">(PackageParser packageParser, File scanFile,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">int</span> parseFlags)</span> <span class="keyword">throws</span> PackageParser.PackageParserException </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> packageParser.parsePackage(scanFile, parseFlags, <span class="keyword">true</span> <span class="comment">/* useCaches */</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> Package <span class="title">parsePackage</span><span class="params">(File packageFile, <span class="keyword">int</span> flags, <span class="keyword">boolean</span> useCaches)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> PackageParserException </span>&#123;</span><br><span class="line">        Package parsed = useCaches ? getCachedResult(packageFile, flags) : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (parsed != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> parsed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> parseTime = LOG_PARSE_TIMINGS ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (packageFile.isDirectory()) &#123;</span><br><span class="line">            parsed = parseClusterPackage(packageFile, flags);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parsed = parseMonolithicPackage(packageFile, flags);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> cacheTime = LOG_PARSE_TIMINGS ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line">        cacheResult(packageFile, flags, parsed);</span><br><span class="line">        <span class="keyword">if</span> (LOG_PARSE_TIMINGS) &#123;</span><br><span class="line">            parseTime = cacheTime - parseTime;</span><br><span class="line">            cacheTime = SystemClock.uptimeMillis() - cacheTime;</span><br><span class="line">            <span class="keyword">if</span> (parseTime + cacheTime &gt; LOG_PARSE_TIMINGS_THRESHOLD_MS) &#123;</span><br><span class="line">                Slog.i(TAG, <span class="string">&quot;Parse times for &#x27;&quot;</span> + packageFile + <span class="string">&quot;&#x27;: parse=&quot;</span> + parseTime</span><br><span class="line">                        + <span class="string">&quot;ms, update_cache=&quot;</span> + cacheTime + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parsed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Parse the given APK file, treating it as as a single monolithic package.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Note that this &lt;em&gt;does not&lt;/em&gt; perform signature verification; that</span></span><br><span class="line"><span class="comment">     * must be done separately in &#123;<span class="doctag">@link</span> #collectCertificates(Package, int)&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@deprecated</span> external callers should move to</span></span><br><span class="line"><span class="comment">     *             &#123;<span class="doctag">@link</span> #parsePackage(File, int)&#125;. Eventually this method will</span></span><br><span class="line"><span class="comment">     *             be marked private.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Package <span class="title">parseMonolithicPackage</span><span class="params">(File apkFile, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> PackageParserException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> PackageLite lite = parseMonolithicPackageLite(apkFile, flags);</span><br><span class="line">        <span class="keyword">if</span> (mOnlyCoreApps) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!lite.coreApp) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> PackageParserException(INSTALL_PARSE_FAILED_MANIFEST_MALFORMED,</span><br><span class="line">                        <span class="string">&quot;Not a coreApp: &quot;</span> + apkFile);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> SplitAssetLoader assetLoader = <span class="keyword">new</span> DefaultSplitAssetLoader(lite, flags);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Package pkg = parseBaseApk(apkFile, assetLoader.getBaseAssetManager(), flags);</span><br><span class="line">            pkg.setCodePath(apkFile.getCanonicalPath());</span><br><span class="line">            pkg.setUse32bitAbi(lite.use32bitAbi);</span><br><span class="line">            <span class="keyword">return</span> pkg;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageParserException(INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION,</span><br><span class="line">                    <span class="string">&quot;Failed to get path: &quot;</span> + apkFile, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IoUtils.closeQuietly(assetLoader);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Parse the manifest of a &lt;em&gt;base APK&lt;/em&gt;. When adding new features you</span></span><br><span class="line"><span class="comment">     * need to consider whether they should be supported by split APKs and child</span></span><br><span class="line"><span class="comment">     * packages.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> apkPath The package apk file path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res The resources from which to resolve values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parser The manifest parser</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> flags Flags how to parse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outError Human readable error message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Parsed package or null on error.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> XmlPullParserException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Package <span class="title">parseBaseApk</span><span class="params">(String apkPath, Resources res, XmlResourceParser parser, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">            String[] outError)</span> <span class="keyword">throws</span> XmlPullParserException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String splitName;</span><br><span class="line">        <span class="keyword">final</span> String pkgName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Pair&lt;String, String&gt; packageSplit = parsePackageSplitNames(parser, parser);</span><br><span class="line">            pkgName = packageSplit.first;</span><br><span class="line">            splitName = packageSplit.second;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(splitName)) &#123;</span><br><span class="line">                outError[<span class="number">0</span>] = <span class="string">&quot;Expected base APK, but found split &quot;</span> + splitName;</span><br><span class="line">                mParseError = PackageManager.INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">            mParseError = PackageManager.INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String[] overlayPaths = mCallback.getOverlayPaths(pkgName, apkPath);</span><br><span class="line">            <span class="keyword">if</span> (overlayPaths != <span class="keyword">null</span> &amp;&amp; overlayPaths.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String overlayPath : overlayPaths) &#123;</span><br><span class="line">                    res.getAssets().addOverlayPath(overlayPath);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Package pkg = <span class="keyword">new</span> Package(pkgName);</span><br><span class="line"></span><br><span class="line">        TypedArray sa = res.obtainAttributes(parser,</span><br><span class="line">                com.android.internal.R.styleable.AndroidManifest);</span><br><span class="line"></span><br><span class="line">        pkg.mVersionCode = sa.getInteger(</span><br><span class="line">                com.android.internal.R.styleable.AndroidManifest_versionCode, <span class="number">0</span>);</span><br><span class="line">        pkg.mVersionCodeMajor = sa.getInteger(</span><br><span class="line">                com.android.internal.R.styleable.AndroidManifest_versionCodeMajor, <span class="number">0</span>);</span><br><span class="line">        pkg.applicationInfo.setVersionCode(pkg.getLongVersionCode());</span><br><span class="line">        pkg.baseRevisionCode = sa.getInteger(</span><br><span class="line">                com.android.internal.R.styleable.AndroidManifest_revisionCode, <span class="number">0</span>);</span><br><span class="line">        pkg.mVersionName = sa.getNonConfigurationString(</span><br><span class="line">                com.android.internal.R.styleable.AndroidManifest_versionName, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (pkg.mVersionName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pkg.mVersionName = pkg.mVersionName.intern();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pkg.coreApp = parser.getAttributeBooleanValue(<span class="keyword">null</span>, <span class="string">&quot;coreApp&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        pkg.mCompileSdkVersion = sa.getInteger(</span><br><span class="line">                com.android.internal.R.styleable.AndroidManifest_compileSdkVersion, <span class="number">0</span>);</span><br><span class="line">        pkg.applicationInfo.compileSdkVersion = pkg.mCompileSdkVersion;</span><br><span class="line">        pkg.mCompileSdkVersionCodename = sa.getNonConfigurationString(</span><br><span class="line">                com.android.internal.R.styleable.AndroidManifest_compileSdkVersionCodename, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (pkg.mCompileSdkVersionCodename != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pkg.mCompileSdkVersionCodename = pkg.mCompileSdkVersionCodename.intern();</span><br><span class="line">        &#125;</span><br><span class="line">        pkg.applicationInfo.compileSdkVersionCodename = pkg.mCompileSdkVersionCodename;</span><br><span class="line"></span><br><span class="line">        sa.recycle();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parseBaseApkCommon(pkg, <span class="keyword">null</span>, res, parser, flags, outError);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最重要的是调用了parseBaseApkCommon(pkg, null, res, parser, flags, outError);parseBaseApkCommon主要是对AndroidManifest.xml中application、permission、packagemanifest等标签进行解析。后续进行Application部分的解析，主要是解析Activity、service、provider、broadcast等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-startBootstrapServices&quot;&gt;&lt;a href=&quot;#1-startBootstrapServices&quot; class=&quot;headerlink&quot; title=&quot;1.startBootstrapServices&quot;&gt;&lt;/a&gt;1.startBootstr</summary>
      
    
    
    
    <category term="PKMS" scheme="http://example.com/categories/PKMS/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>AMS-05-HookActivity</title>
    <link href="http://example.com/2020/11/12/AMS-05-HookActivity/"/>
    <id>http://example.com/2020/11/12/AMS-05-HookActivity/</id>
    <published>2020-11-12T07:20:31.000Z</published>
    <updated>2020-11-12T07:20:31.287Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>AMS-04-应用启动流程（zygotefork出应用进程之后的流程）</title>
    <link href="http://example.com/2020/11/12/AMS-04-%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>http://example.com/2020/11/12/AMS-04-%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</id>
    <published>2020-11-12T01:13:20.000Z</published>
    <updated>2020-11-12T08:11:46.893Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/AMS-04-%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/AMS-startActivity.bmp" alt="AMS-startActivity"></p><h1 id="1-ActivityThread"><a href="#1-ActivityThread" class="headerlink" title="1.ActivityThread"></a>1.ActivityThread</h1><p>当zygotefork出应用进程之后，会调用ActivityThread的main方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">&quot;ActivityThreadMain&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CloseGuard defaults to true and can be quite spammy.  We</span></span><br><span class="line">    <span class="comment">// disable it here, but selectively enable it later (via</span></span><br><span class="line">    <span class="comment">// StrictMode) on debug builds, but using DropBox, not logs.</span></span><br><span class="line">    CloseGuard.setEnabled(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    Environment.initForCurrentUser();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the reporter for event logging in libcore</span></span><br><span class="line">    EventLogger.setReporter(<span class="keyword">new</span> EventLoggingReporter());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></span><br><span class="line">    <span class="keyword">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</span><br><span class="line">    TrustedCertificateStore.setDefaultUserDirectory(configDir);</span><br><span class="line"></span><br><span class="line">    Process.setArgV0(<span class="string">&quot;&lt;pre-initialized&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Looper.prepareMainLooper();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find the value for &#123;@link #PROC_START_SEQ_IDENT&#125; if provided on the command line.</span></span><br><span class="line">    <span class="comment">// It will be in the format &quot;seq=114&quot;</span></span><br><span class="line">    <span class="keyword">long</span> startSeq = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = args.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args[i] != <span class="keyword">null</span> &amp;&amp; args[i].startsWith(PROC_START_SEQ_IDENT)) &#123;</span><br><span class="line">                startSeq = Long.parseLong(</span><br><span class="line">                        args[i].substring(PROC_START_SEQ_IDENT.length()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ActivityThread thread = <span class="keyword">new</span> ActivityThread();</span><br><span class="line">    thread.attach(<span class="keyword">false</span>, startSeq);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">        sMainThreadHandler = thread.getHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</span><br><span class="line">        Looper.myLooper().setMessageLogging(<span class="keyword">new</span></span><br><span class="line">                LogPrinter(Log.DEBUG, <span class="string">&quot;ActivityThread&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// End of event ActivityThreadMain.</span></span><br><span class="line">    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">    Looper.loop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Main thread loop unexpectedly exited&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用ActivityThread的attach进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(<span class="keyword">boolean</span> system, <span class="keyword">long</span> startSeq)</span> </span>&#123;</span><br><span class="line">        sCurrentActivityThread = <span class="keyword">this</span>;</span><br><span class="line">        mSystemThread = system;</span><br><span class="line">        <span class="keyword">if</span> (!system) &#123;</span><br><span class="line">            ViewRootImpl.addFirstDrawHandler(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    ensureJitEnabled();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            android.ddm.DdmHandleAppName.setAppName(<span class="string">&quot;&lt;pre-initialized&gt;&quot;</span>,</span><br><span class="line">                                                    UserHandle.myUserId());</span><br><span class="line">            RuntimeInit.setApplicationObject(mAppThread.asBinder());</span><br><span class="line">            <span class="keyword">final</span> IActivityManager mgr = ActivityManager.getService();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mgr.attachApplication(mAppThread, startSeq);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ex.rethrowFromSystemServer();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Watch for getting close to heap limit.</span></span><br><span class="line">            BinderInternal.addGcWatcher(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!mSomeActivitiesChanged) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    Runtime runtime = Runtime.getRuntime();</span><br><span class="line">                    <span class="keyword">long</span> dalvikMax = runtime.maxMemory();</span><br><span class="line">                    <span class="keyword">long</span> dalvikUsed = runtime.totalMemory() - runtime.freeMemory();</span><br><span class="line">                    <span class="keyword">if</span> (dalvikUsed &gt; ((<span class="number">3</span>*dalvikMax)/<span class="number">4</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG_MEMORY_TRIM) Slog.d(TAG, <span class="string">&quot;Dalvik max=&quot;</span> + (dalvikMax/<span class="number">1024</span>)</span><br><span class="line">                                + <span class="string">&quot; total=&quot;</span> + (runtime.totalMemory()/<span class="number">1024</span>)</span><br><span class="line">                                + <span class="string">&quot; used=&quot;</span> + (dalvikUsed/<span class="number">1024</span>));</span><br><span class="line">                        mSomeActivitiesChanged = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            mgr.releaseSomeActivities(mAppThread);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Don&#x27;t set application object here -- if the system crashes,</span></span><br><span class="line">            <span class="comment">// we can&#x27;t display an alert, we just want to die die die.</span></span><br><span class="line">            android.ddm.DdmHandleAppName.setAppName(<span class="string">&quot;system_process&quot;</span>,</span><br><span class="line">                    UserHandle.myUserId());</span><br><span class="line">            <span class="keyword">try</span> &#123;<span class="comment">//systemServer走的流程</span></span><br><span class="line">                mInstrumentation = <span class="keyword">new</span> Instrumentation();</span><br><span class="line">                mInstrumentation.basicInit(<span class="keyword">this</span>);</span><br><span class="line">                ContextImpl context = ContextImpl.createAppContext(</span><br><span class="line">                        <span class="keyword">this</span>, getSystemContext().mPackageInfo);</span><br><span class="line">                mInitialApplication = context.mPackageInfo.makeApplication(<span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">                mInitialApplication.onCreate();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                        <span class="string">&quot;Unable to instantiate Application():&quot;</span> + e.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// add dropbox logging to libcore</span></span><br><span class="line">        DropBox.setReporter(<span class="keyword">new</span> DropBoxReporter());</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 为 ViewRootImpl 设置配置更新回调，</span></span><br><span class="line">  <span class="comment">//当系统资源配置（如：系统字体）发生变化时，通知系统配置发生变化</span></span><br><span class="line">        ViewRootImpl.ConfigChangedCallback configChangedCallback</span><br><span class="line">                = (Configuration globalConfig) -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mResourcesManager) &#123;</span><br><span class="line">                <span class="comment">// We need to apply this change to the resources immediately, because upon returning</span></span><br><span class="line">                <span class="comment">// the view hierarchy will be informed about it.</span></span><br><span class="line">                <span class="keyword">if</span> (mResourcesManager.applyConfigurationToResourcesLocked(globalConfig,</span><br><span class="line">                        <span class="keyword">null</span> <span class="comment">/* compat */</span>)) &#123;</span><br><span class="line">                    updateLocaleListFromAppContext(mInitialApplication.getApplicationContext(),</span><br><span class="line">                            mResourcesManager.getConfiguration().getLocales());</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// This actually changed the resources! Tell everyone about it.</span></span><br><span class="line">                    <span class="keyword">if</span> (mPendingConfiguration == <span class="keyword">null</span></span><br><span class="line">                            || mPendingConfiguration.isOtherSeqNewer(globalConfig)) &#123;</span><br><span class="line">                        mPendingConfiguration = globalConfig;</span><br><span class="line">                        sendMessage(H.CONFIGURATION_CHANGED, globalConfig);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ViewRootImpl.addConfigCallback(configChangedCallback);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>attach主要做了以下几件事：</p><p>1）获取AMS服务的本地代理，IActivityManager mgr = ActivityManager.getService()，并将应用进程的代理对象传入AMS中，mgr.attachApplication(mAppThread, startSeq);</p><p>2）为 ViewRootImpl 设置配置更新回调，当系统资源配置（如：系统字体）发生变化时，通知系统配置发生变化</p><p>后续调用到AMS中，并执行attachApplication方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attachApplication</span><span class="params">(IApplicationThread thread, <span class="keyword">long</span> startSeq)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">//通过Binder获取传入的pid信息</span></span><br><span class="line">            <span class="keyword">int</span> callingPid = Binder.getCallingPid();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> callingUid = Binder.getCallingUid();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line">            attachApplicationLocked(thread, callingPid, callingUid, startSeq);</span><br><span class="line">            Binder.restoreCallingIdentity(origId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@GuardedBy(&quot;this&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">attachApplicationLocked</span><span class="params">(IApplicationThread thread,</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">int</span> pid, <span class="keyword">int</span> callingUid, <span class="keyword">long</span> startSeq)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Find the application record that is being attached...  either via</span></span><br><span class="line">      <span class="comment">// the pid if we are running in multiple processes, or just pull the</span></span><br><span class="line">      <span class="comment">// next app record if we are emulating process with anonymous threads.</span></span><br><span class="line">      ProcessRecord app;</span><br><span class="line">      <span class="keyword">long</span> startTime = SystemClock.uptimeMillis();</span><br><span class="line">      <span class="keyword">if</span> (pid != MY_PID &amp;&amp; pid &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">synchronized</span> (mPidsSelfLocked) &#123;</span><br><span class="line">              app = mPidsSelfLocked.get(pid);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          app = <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// It&#x27;s possible that process called attachApplication before we got a chance to</span></span><br><span class="line">      <span class="comment">// update the internal state.</span></span><br><span class="line">      <span class="keyword">if</span> (app == <span class="keyword">null</span> &amp;&amp; startSeq &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">final</span> ProcessRecord pending = mPendingStarts.get(startSeq);</span><br><span class="line">          <span class="keyword">if</span> (pending != <span class="keyword">null</span> &amp;&amp; pending.startUid == callingUid</span><br><span class="line">                  &amp;&amp; handleProcessStartedLocked(pending, pid, pending.usingWrapper,</span><br><span class="line">                          startSeq, <span class="keyword">true</span>)) &#123;</span><br><span class="line">              app = pending;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (app == <span class="keyword">null</span>) &#123;</span><br><span class="line">          Slog.w(TAG, <span class="string">&quot;No pending application record for pid &quot;</span> + pid</span><br><span class="line">                  + <span class="string">&quot; (IApplicationThread &quot;</span> + thread + <span class="string">&quot;); dropping process&quot;</span>);</span><br><span class="line">          EventLog.writeEvent(EventLogTags.AM_DROP_PROCESS, pid);</span><br><span class="line">          <span class="keyword">if</span> (pid &gt; <span class="number">0</span> &amp;&amp; pid != MY_PID) &#123;</span><br><span class="line">              killProcessQuiet(pid);</span><br><span class="line">              <span class="comment">//<span class="doctag">TODO:</span> killProcessGroup(app.info.uid, pid);</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  thread.scheduleExit();</span><br><span class="line">              &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                  <span class="comment">// Ignore exceptions.</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// If this application record is still attached to a previous</span></span><br><span class="line">      <span class="comment">// process, clean it up now.</span></span><br><span class="line"><span class="comment">//如果当前的Application记录仍然依附到之前的进程中，则清理掉</span></span><br><span class="line">      <span class="keyword">if</span> (app.thread != <span class="keyword">null</span>) &#123;</span><br><span class="line">          handleAppDiedLocked(app, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Tell the process all about itself.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (DEBUG_ALL) Slog.v(</span><br><span class="line">              TAG, <span class="string">&quot;Binding process pid &quot;</span> + pid + <span class="string">&quot; to record &quot;</span> + app);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> String processName = app.processName;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          AppDeathRecipient adr = <span class="keyword">new</span> AppDeathRecipient(</span><br><span class="line">                  app, pid, thread);</span><br><span class="line">          thread.asBinder().linkToDeath(adr, <span class="number">0</span>);</span><br><span class="line">          app.deathRecipient = adr;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">          app.resetPackageList(mProcessStats);</span><br><span class="line">          startProcessLocked(app, <span class="string">&quot;link fail&quot;</span>, processName);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      EventLog.writeEvent(EventLogTags.AM_PROC_BOUND, app.userId, app.pid, app.processName);</span><br><span class="line"></span><br><span class="line">      app.makeActive(thread, mProcessStats);</span><br><span class="line">      app.curAdj = app.setAdj = app.verifiedAdj = ProcessList.INVALID_ADJ;</span><br><span class="line">      app.curSchedGroup = app.setSchedGroup = ProcessList.SCHED_GROUP_DEFAULT;</span><br><span class="line">      app.forcingToImportant = <span class="keyword">null</span>;</span><br><span class="line">      updateProcessForegroundLocked(app, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">      app.hasShownUi = <span class="keyword">false</span>;</span><br><span class="line">      app.debugging = <span class="keyword">false</span>;</span><br><span class="line">      app.cached = <span class="keyword">false</span>;</span><br><span class="line">      app.killedByAm = <span class="keyword">false</span>;</span><br><span class="line">      app.killed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">// We carefully use the same state that PackageManager uses for</span></span><br><span class="line">      <span class="comment">// filtering, since we use this flag to decide if we need to install</span></span><br><span class="line">      <span class="comment">// providers when user is unlocked later</span></span><br><span class="line">      app.unlocked = StorageManager.isUserKeyUnlocked(app.userId);</span><br><span class="line"></span><br><span class="line">      mHandler.removeMessages(PROC_START_TIMEOUT_MSG, app);</span><br><span class="line"><span class="comment">//mProcessesReady这个变量在AMS的 systemReady 中被赋值为true，</span></span><br><span class="line">  <span class="comment">//所以这里的normalMode也为true</span></span><br><span class="line">      <span class="keyword">boolean</span> normalMode = mProcessesReady || isAllowedWhileBooting(app.info);</span><br><span class="line">      List&lt;ProviderInfo&gt; providers = normalMode ? generateApplicationProvidersLocked(app) : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (providers != <span class="keyword">null</span> &amp;&amp; checkAppInLaunchingProvidersLocked(app)) &#123;</span><br><span class="line">          Message msg = mHandler.obtainMessage(CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG);</span><br><span class="line">          msg.obj = app;</span><br><span class="line">          mHandler.sendMessageDelayed(msg, CONTENT_PROVIDER_PUBLISH_TIMEOUT);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      checkTime(startTime, <span class="string">&quot;attachApplicationLocked: before bindApplication&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!normalMode) &#123;</span><br><span class="line">          Slog.i(TAG, <span class="string">&quot;Launching preboot mode app: &quot;</span> + app);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (DEBUG_ALL) Slog.v(</span><br><span class="line">          TAG, <span class="string">&quot;New app record &quot;</span> + app</span><br><span class="line">          + <span class="string">&quot; thread=&quot;</span> + thread.asBinder() + <span class="string">&quot; pid=&quot;</span> + pid);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">int</span> testMode = ApplicationThreadConstants.DEBUG_OFF;</span><br><span class="line">          <span class="keyword">if</span> (mDebugApp != <span class="keyword">null</span> &amp;&amp; mDebugApp.equals(processName)) &#123;</span><br><span class="line">              testMode = mWaitForDebugger</span><br><span class="line">                  ? ApplicationThreadConstants.DEBUG_WAIT</span><br><span class="line">                  : ApplicationThreadConstants.DEBUG_ON;</span><br><span class="line">              app.debugging = <span class="keyword">true</span>;</span><br><span class="line">              <span class="keyword">if</span> (mDebugTransient) &#123;</span><br><span class="line">                  mDebugApp = mOrigDebugApp;</span><br><span class="line">                  mWaitForDebugger = mOrigWaitForDebugger;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">boolean</span> enableTrackAllocation = <span class="keyword">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (mTrackAllocationApp != <span class="keyword">null</span> &amp;&amp; mTrackAllocationApp.equals(processName)) &#123;</span><br><span class="line">              enableTrackAllocation = <span class="keyword">true</span>;</span><br><span class="line">              mTrackAllocationApp = <span class="keyword">null</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// If the app is being launched for restore or full backup, set it up specially</span></span><br><span class="line">          <span class="keyword">boolean</span> isRestrictedBackupMode = <span class="keyword">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (mBackupTarget != <span class="keyword">null</span> &amp;&amp; mBackupAppName.equals(processName)) &#123;</span><br><span class="line">              isRestrictedBackupMode = mBackupTarget.appInfo.uid &gt;= FIRST_APPLICATION_UID</span><br><span class="line">                      &amp;&amp; ((mBackupTarget.backupMode == BackupRecord.RESTORE)</span><br><span class="line">                              || (mBackupTarget.backupMode == BackupRecord.RESTORE_FULL)</span><br><span class="line">                              || (mBackupTarget.backupMode == BackupRecord.BACKUP_FULL));</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (app.instr != <span class="keyword">null</span>) &#123;</span><br><span class="line">              notifyPackageUse(app.instr.mClass.getPackageName(),</span><br><span class="line">                               PackageManager.NOTIFY_PACKAGE_USE_INSTRUMENTATION);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (DEBUG_CONFIGURATION) Slog.v(TAG_CONFIGURATION, <span class="string">&quot;Binding proc &quot;</span></span><br><span class="line">                  + processName + <span class="string">&quot; with config &quot;</span> + getGlobalConfiguration());</span><br><span class="line">          ApplicationInfo appInfo = app.instr != <span class="keyword">null</span> ? app.instr.mTargetInfo : app.info;</span><br><span class="line">          app.compat = compatibilityInfoForPackageLocked(appInfo);</span><br><span class="line"></span><br><span class="line">          ProfilerInfo profilerInfo = <span class="keyword">null</span>;</span><br><span class="line">          String preBindAgent = <span class="keyword">null</span>;</span><br><span class="line">          <span class="keyword">if</span> (mProfileApp != <span class="keyword">null</span> &amp;&amp; mProfileApp.equals(processName)) &#123;</span><br><span class="line">              mProfileProc = app;</span><br><span class="line">              <span class="keyword">if</span> (mProfilerInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="comment">// Send a profiler info object to the app if either a file is given, or</span></span><br><span class="line">                  <span class="comment">// an agent should be loaded at bind-time.</span></span><br><span class="line">                  <span class="keyword">boolean</span> needsInfo = mProfilerInfo.profileFile != <span class="keyword">null</span></span><br><span class="line">                          || mProfilerInfo.attachAgentDuringBind;</span><br><span class="line">                  profilerInfo = needsInfo ? <span class="keyword">new</span> ProfilerInfo(mProfilerInfo) : <span class="keyword">null</span>;</span><br><span class="line">                  <span class="keyword">if</span> (mProfilerInfo.agent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                      preBindAgent = mProfilerInfo.agent;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (app.instr != <span class="keyword">null</span> &amp;&amp; app.instr.mProfileFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">              profilerInfo = <span class="keyword">new</span> ProfilerInfo(app.instr.mProfileFile, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,</span><br><span class="line">                      <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (mAppAgentMap != <span class="keyword">null</span> &amp;&amp; mAppAgentMap.containsKey(processName)) &#123;</span><br><span class="line">              <span class="comment">// We need to do a debuggable check here. See setAgentApp for why the check is</span></span><br><span class="line">              <span class="comment">// postponed to here.</span></span><br><span class="line">              <span class="keyword">if</span> ((app.info.flags &amp; ApplicationInfo.FLAG_DEBUGGABLE) != <span class="number">0</span>) &#123;</span><br><span class="line">                  String agent = mAppAgentMap.get(processName);</span><br><span class="line">                  <span class="comment">// Do not overwrite already requested agent.</span></span><br><span class="line">                  <span class="keyword">if</span> (profilerInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">                      profilerInfo = <span class="keyword">new</span> ProfilerInfo(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,</span><br><span class="line">                              mAppAgentMap.get(processName), <span class="keyword">true</span>);</span><br><span class="line">                  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (profilerInfo.agent == <span class="keyword">null</span>) &#123;</span><br><span class="line">                      profilerInfo = profilerInfo.setAgent(mAppAgentMap.get(processName), <span class="keyword">true</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (profilerInfo != <span class="keyword">null</span> &amp;&amp; profilerInfo.profileFd != <span class="keyword">null</span>) &#123;</span><br><span class="line">              profilerInfo.profileFd = profilerInfo.profileFd.dup();</span><br><span class="line">              <span class="keyword">if</span> (TextUtils.equals(mProfileApp, processName) &amp;&amp; mProfilerInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  clearProfilerLocked();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// We deprecated Build.SERIAL and it is not accessible to</span></span><br><span class="line">          <span class="comment">// apps that target the v2 security sandbox and to apps that</span></span><br><span class="line">          <span class="comment">// target APIs higher than O MR1. Since access to the serial</span></span><br><span class="line">          <span class="comment">// is now behind a permission we push down the value.</span></span><br><span class="line">          <span class="keyword">final</span> String buildSerial = (appInfo.targetSandboxVersion &lt; <span class="number">2</span></span><br><span class="line">                  &amp;&amp; appInfo.targetSdkVersion &lt; Build.VERSION_CODES.P)</span><br><span class="line">                          ? sTheRealBuildSerial : Build.UNKNOWN;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Check if this is a secondary process that should be incorporated into some</span></span><br><span class="line">          <span class="comment">// currently active instrumentation.  (Note we do this AFTER all of the profiling</span></span><br><span class="line">          <span class="comment">// stuff above because profiling can currently happen only in the primary</span></span><br><span class="line">          <span class="comment">// instrumentation process.)</span></span><br><span class="line">          <span class="keyword">if</span> (mActiveInstrumentation.size() &gt; <span class="number">0</span> &amp;&amp; app.instr == <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> i = mActiveInstrumentation.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; app.instr == <span class="keyword">null</span>; i--) &#123;</span><br><span class="line">                  ActiveInstrumentation aInstr = mActiveInstrumentation.get(i);</span><br><span class="line">                  <span class="keyword">if</span> (!aInstr.mFinished &amp;&amp; aInstr.mTargetInfo.uid == app.uid) &#123;</span><br><span class="line">                      <span class="keyword">if</span> (aInstr.mTargetProcesses.length == <span class="number">0</span>) &#123;</span><br><span class="line">                          <span class="comment">// This is the wildcard mode, where every process brought up for</span></span><br><span class="line">                          <span class="comment">// the target instrumentation should be included.</span></span><br><span class="line">                          <span class="keyword">if</span> (aInstr.mTargetInfo.packageName.equals(app.info.packageName)) &#123;</span><br><span class="line">                              app.instr = aInstr;</span><br><span class="line">                              aInstr.mRunningProcesses.add(app);</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                          <span class="keyword">for</span> (String proc : aInstr.mTargetProcesses) &#123;</span><br><span class="line">                              <span class="keyword">if</span> (proc.equals(app.processName)) &#123;</span><br><span class="line">                                  app.instr = aInstr;</span><br><span class="line">                                  aInstr.mRunningProcesses.add(app);</span><br><span class="line">                                  <span class="keyword">break</span>;</span><br><span class="line">                              &#125;</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// If we were asked to attach an agent on startup, do so now, before we&#x27;re binding</span></span><br><span class="line">          <span class="comment">// application code.</span></span><br><span class="line">          <span class="keyword">if</span> (preBindAgent != <span class="keyword">null</span>) &#123;</span><br><span class="line">              thread.attachAgent(preBindAgent);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          <span class="comment">// Figure out whether the app needs to run in autofill compat mode.</span></span><br><span class="line">          <span class="keyword">boolean</span> isAutofillCompatEnabled = <span class="keyword">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (UserHandle.getAppId(app.info.uid) &gt;= Process.FIRST_APPLICATION_UID) &#123;</span><br><span class="line">              <span class="keyword">final</span> AutofillManagerInternal afm = LocalServices.getService(</span><br><span class="line">                      AutofillManagerInternal.class);</span><br><span class="line">              <span class="keyword">if</span> (afm != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  isAutofillCompatEnabled = afm.isCompatibilityModeRequested(</span><br><span class="line">                          app.info.packageName, app.info.versionCode, app.userId);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          checkTime(startTime, <span class="string">&quot;attachApplicationLocked: immediately before bindApplication&quot;</span>);</span><br><span class="line">          mStackSupervisor.getActivityMetricsLogger().notifyBindApplication(app);</span><br><span class="line">          <span class="keyword">if</span> (app.isolatedEntryPoint != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="comment">// This is an isolated process which should just call an entry point instead of</span></span><br><span class="line">              <span class="comment">// being bound to an application.</span></span><br><span class="line">              thread.runIsolatedEntryPoint(app.isolatedEntryPoint, app.isolatedEntryPointArgs);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (app.instr != <span class="keyword">null</span>) &#123;</span><br><span class="line">              thread.bindApplication(processName, appInfo, providers,</span><br><span class="line">                      app.instr.mClass,</span><br><span class="line">                      profilerInfo, app.instr.mArguments,</span><br><span class="line">                      app.instr.mWatcher,</span><br><span class="line">                      app.instr.mUiAutomationConnection, testMode,</span><br><span class="line">                      mBinderTransactionTrackingEnabled, enableTrackAllocation,</span><br><span class="line">                      isRestrictedBackupMode || !normalMode, app.persistent,</span><br><span class="line">                      <span class="keyword">new</span> Configuration(getGlobalConfiguration()), app.compat,</span><br><span class="line">                      getCommonServicesLocked(app.isolated),</span><br><span class="line">                      mCoreSettingsObserver.getCoreSettingsLocked(),</span><br><span class="line">                      buildSerial, isAutofillCompatEnabled);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              thread.bindApplication(processName, appInfo, providers, <span class="keyword">null</span>, profilerInfo,</span><br><span class="line">                      <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, testMode,</span><br><span class="line">                      mBinderTransactionTrackingEnabled, enableTrackAllocation,</span><br><span class="line">                      isRestrictedBackupMode || !normalMode, app.persistent,</span><br><span class="line">                      <span class="keyword">new</span> Configuration(getGlobalConfiguration()), app.compat,</span><br><span class="line">                      getCommonServicesLocked(app.isolated),</span><br><span class="line">                      mCoreSettingsObserver.getCoreSettingsLocked(),</span><br><span class="line">                      buildSerial, isAutofillCompatEnabled);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (profilerInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">              profilerInfo.closeFd();</span><br><span class="line">              profilerInfo = <span class="keyword">null</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          checkTime(startTime, <span class="string">&quot;attachApplicationLocked: immediately after bindApplication&quot;</span>);</span><br><span class="line">          updateLruProcessLocked(app, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">          checkTime(startTime, <span class="string">&quot;attachApplicationLocked: after updateLruProcessLocked&quot;</span>);</span><br><span class="line">          app.lastRequestedGc = app.lastLowMemory = SystemClock.uptimeMillis();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          <span class="comment">// todo: Yikes!  What should we do?  For now we will try to</span></span><br><span class="line">          <span class="comment">// start another process, but that could easily get us in</span></span><br><span class="line">          <span class="comment">// an infinite loop of restarting processes...</span></span><br><span class="line">          Slog.wtf(TAG, <span class="string">&quot;Exception thrown during bind of &quot;</span> + app, e);</span><br><span class="line"></span><br><span class="line">          app.resetPackageList(mProcessStats);</span><br><span class="line">          app.unlinkDeathRecipient();</span><br><span class="line">          startProcessLocked(app, <span class="string">&quot;bind fail&quot;</span>, processName);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Remove this record from the list of starting applications.</span></span><br><span class="line">      mPersistentStartingProcesses.remove(app);</span><br><span class="line">      <span class="keyword">if</span> (DEBUG_PROCESSES &amp;&amp; mProcessesOnHold.contains(app)) Slog.v(TAG_PROCESSES,</span><br><span class="line">              <span class="string">&quot;Attach application locked removing on hold: &quot;</span> + app);</span><br><span class="line">      mProcessesOnHold.remove(app);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">boolean</span> badApp = <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">boolean</span> didSomething = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// See if the top visible activity is waiting to run in this process...</span></span><br><span class="line">      <span class="comment">//上面说到，这里为true，进入StackSupervisor的attachApplication方法</span></span><br><span class="line">  <span class="comment">//去真正启动Activity</span></span><br><span class="line">      <span class="keyword">if</span> (normalMode) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (mStackSupervisor.attachApplicationLocked(app)) &#123;</span><br><span class="line">                  didSomething = <span class="keyword">true</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">              Slog.wtf(TAG, <span class="string">&quot;Exception thrown launching activities in &quot;</span> + app, e);</span><br><span class="line">              badApp = <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Find any services that should be running in this process...</span></span><br><span class="line">      <span class="keyword">if</span> (!badApp) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              didSomething |= mServices.attachApplicationLocked(app, processName);</span><br><span class="line">              checkTime(startTime, <span class="string">&quot;attachApplicationLocked: after mServices.attachApplicationLocked&quot;</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">              Slog.wtf(TAG, <span class="string">&quot;Exception thrown starting services in &quot;</span> + app, e);</span><br><span class="line">              badApp = <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Check if a next-broadcast receiver is in this process...</span></span><br><span class="line">      <span class="keyword">if</span> (!badApp &amp;&amp; isPendingBroadcastProcessLocked(pid)) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              didSomething |= sendPendingBroadcastsLocked(app);</span><br><span class="line">              checkTime(startTime, <span class="string">&quot;attachApplicationLocked: after sendPendingBroadcastsLocked&quot;</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">              <span class="comment">// If the app died trying to launch the receiver we declare it &#x27;bad&#x27;</span></span><br><span class="line">              Slog.wtf(TAG, <span class="string">&quot;Exception thrown dispatching broadcasts in &quot;</span> + app, e);</span><br><span class="line">              badApp = <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Check whether the next backup agent is in this process...</span></span><br><span class="line">      <span class="keyword">if</span> (!badApp &amp;&amp; mBackupTarget != <span class="keyword">null</span> &amp;&amp; mBackupTarget.app == app) &#123;</span><br><span class="line">          <span class="keyword">if</span> (DEBUG_BACKUP) Slog.v(TAG_BACKUP,</span><br><span class="line">                  <span class="string">&quot;New app is backup target, launching agent for &quot;</span> + app);</span><br><span class="line">          notifyPackageUse(mBackupTarget.appInfo.packageName,</span><br><span class="line">                           PackageManager.NOTIFY_PACKAGE_USE_BACKUP);</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              thread.scheduleCreateBackupAgent(mBackupTarget.appInfo,</span><br><span class="line">                      compatibilityInfoForPackageLocked(mBackupTarget.appInfo),</span><br><span class="line">                      mBackupTarget.backupMode);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">              Slog.wtf(TAG, <span class="string">&quot;Exception thrown creating backup agent in &quot;</span> + app, e);</span><br><span class="line">              badApp = <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (badApp) &#123;</span><br><span class="line">          app.kill(<span class="string">&quot;error during init&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">          handleAppDiedLocked(app, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!didSomething) &#123;</span><br><span class="line">          updateOomAdjLocked();</span><br><span class="line">          checkTime(startTime, <span class="string">&quot;attachApplicationLocked: after updateOomAdjLocked&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">attachApplicationLocked</span><span class="params">(ProcessRecord app)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String processName = app.processName;<span class="comment">//启动的进程名称</span></span><br><span class="line">    <span class="keyword">boolean</span> didSomething = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> displayNdx = mActivityDisplays.size() - <span class="number">1</span>; displayNdx &gt;= <span class="number">0</span>; --displayNdx) &#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityDisplay display = mActivityDisplays.valueAt(displayNdx);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> stackNdx = display.getChildCount() - <span class="number">1</span>; stackNdx &gt;= <span class="number">0</span>; --stackNdx) &#123;</span><br><span class="line">            <span class="keyword">final</span> ActivityStack stack = display.getChildAt(stackNdx);</span><br><span class="line">            <span class="keyword">if</span> (!isFocusedStack(stack)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.getAllRunningVisibleActivitiesLocked(mTmpActivityList);</span><br><span class="line">            <span class="keyword">final</span> ActivityRecord top = stack.topRunningActivityLocked();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> size = mTmpActivityList.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> ActivityRecord activity = mTmpActivityList.get(i);</span><br><span class="line">                <span class="keyword">if</span> (activity.app == <span class="keyword">null</span> &amp;&amp; app.uid == activity.info.applicationInfo.uid</span><br><span class="line">                        &amp;&amp; processName.equals(activity.processName)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (realStartActivityLocked(activity, app,</span><br><span class="line">                                top == activity <span class="comment">/* andResume */</span>, <span class="keyword">true</span> <span class="comment">/* checkConfig */</span>)) &#123;</span><br><span class="line">                            didSomething = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                        Slog.w(TAG, <span class="string">&quot;Exception in new application when starting activity &quot;</span></span><br><span class="line">                                + top.intent.getComponent().flattenToShortString(), e);</span><br><span class="line">                        <span class="keyword">throw</span> e;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!didSomething) &#123;</span><br><span class="line">        ensureActivitiesVisibleLocked(<span class="keyword">null</span>, <span class="number">0</span>, !PRESERVE_WINDOWS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> didSomething;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">realStartActivityLocked</span><span class="params">(ActivityRecord r, ProcessRecord app,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> andResume, <span class="keyword">boolean</span> checkConfig)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line"> <span class="comment">// 直到所有的 onPause() 执行结束才会去启动新的 activity</span></span><br><span class="line">        <span class="keyword">if</span> (!allPausedActivitiesComplete()) &#123;</span><br><span class="line">            <span class="comment">// While there are activities pausing we skipping starting any new activities until</span></span><br><span class="line">            <span class="comment">// pauses are complete. <span class="doctag">NOTE:</span> that we also do this for activities that are starting in</span></span><br><span class="line">            <span class="comment">// the paused state because they will first be resumed then paused on the client side.</span></span><br><span class="line">            <span class="keyword">if</span> (DEBUG_SWITCH || DEBUG_PAUSE || DEBUG_STATES) Slog.v(TAG_PAUSE,</span><br><span class="line">                    <span class="string">&quot;realStartActivityLocked: Skipping start of r=&quot;</span> + r</span><br><span class="line">                    + <span class="string">&quot; some activities pausing...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> TaskRecord task = r.getTask();</span><br><span class="line">        <span class="keyword">final</span> ActivityStack stack = task.getStack();</span><br><span class="line"></span><br><span class="line">        beginDeferResume();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r.startFreezingScreenLocked(app, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// schedule launch ticks to collect information about slow apps.</span></span><br><span class="line">            r.startLaunchTickingLocked();</span><br><span class="line"></span><br><span class="line">            r.setProcess(app);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (getKeyguardController().isKeyguardLocked()) &#123;</span><br><span class="line">                r.notifyUnknownVisibilityLaunched();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Have the window manager re-evaluate the orientation of the screen based on the new</span></span><br><span class="line">            <span class="comment">// activity order.  Note that as a result of this, it can call back into the activity</span></span><br><span class="line">            <span class="comment">// manager with a new orientation.  We don&#x27;t care about that, because the activity is</span></span><br><span class="line">            <span class="comment">// not currently running so we are just restarting it anyway.</span></span><br><span class="line">            <span class="keyword">if</span> (checkConfig) &#123;</span><br><span class="line">                <span class="comment">// Deferring resume here because we&#x27;re going to launch new activity shortly.</span></span><br><span class="line">                <span class="comment">// We don&#x27;t want to perform a redundant launch of the same record while ensuring</span></span><br><span class="line">                <span class="comment">// configurations and trying to resume top activity of focused stack.</span></span><br><span class="line">                ensureVisibilityAndConfig(r, r.getDisplayId(),</span><br><span class="line">                        <span class="keyword">false</span> <span class="comment">/* markFrozenIfConfigChanged */</span>, <span class="keyword">true</span> <span class="comment">/* deferResume */</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (r.getStack().checkKeyguardVisibility(r, <span class="keyword">true</span> <span class="comment">/* shouldBeVisible */</span>,</span><br><span class="line">                    <span class="keyword">true</span> <span class="comment">/* isTop */</span>)) &#123;</span><br><span class="line">                <span class="comment">// We only set the visibility to true if the activity is allowed to be visible</span></span><br><span class="line">                <span class="comment">// based on</span></span><br><span class="line">                <span class="comment">// keyguard state. This avoids setting this into motion in window manager that is</span></span><br><span class="line">                <span class="comment">// later cancelled due to later calls to ensure visible activities that set</span></span><br><span class="line">                <span class="comment">// visibility back to false.</span></span><br><span class="line">                r.setVisibility(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> applicationInfoUid =</span><br><span class="line">                    (r.info.applicationInfo != <span class="keyword">null</span>) ? r.info.applicationInfo.uid : -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> ((r.userId != app.userId) || (r.appInfo.uid != applicationInfoUid)) &#123;</span><br><span class="line">                Slog.wtf(TAG,</span><br><span class="line">                        <span class="string">&quot;User ID for activity changing for &quot;</span> + r</span><br><span class="line">                                + <span class="string">&quot; appInfo.uid=&quot;</span> + r.appInfo.uid</span><br><span class="line">                                + <span class="string">&quot; info.ai.uid=&quot;</span> + applicationInfoUid</span><br><span class="line">                                + <span class="string">&quot; old=&quot;</span> + r.app + <span class="string">&quot; new=&quot;</span> + app);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            app.waitingToKill = <span class="keyword">null</span>;</span><br><span class="line">            r.launchCount++;</span><br><span class="line">            r.lastLaunchTime = SystemClock.uptimeMillis();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (DEBUG_ALL) Slog.v(TAG, <span class="string">&quot;Launching: &quot;</span> + r);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> idx = app.activities.indexOf(r);</span><br><span class="line">            <span class="keyword">if</span> (idx &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                app.activities.add(r);</span><br><span class="line">            &#125;</span><br><span class="line">            mService.updateLruProcessLocked(app, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">            mService.updateOomAdjLocked();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> LockTaskController lockTaskController = mService.getLockTaskController();</span><br><span class="line">            <span class="keyword">if</span> (task.mLockTaskAuth == LOCK_TASK_AUTH_LAUNCHABLE</span><br><span class="line">                    || task.mLockTaskAuth == LOCK_TASK_AUTH_LAUNCHABLE_PRIV</span><br><span class="line">                    || (task.mLockTaskAuth == LOCK_TASK_AUTH_WHITELISTED</span><br><span class="line">                            &amp;&amp; lockTaskController.getLockTaskModeState()</span><br><span class="line">                                    == LOCK_TASK_MODE_LOCKED)) &#123;</span><br><span class="line">                lockTaskController.startLockTaskMode(task, <span class="keyword">false</span>, <span class="number">0</span> <span class="comment">/* blank UID */</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (app.thread == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RemoteException();</span><br><span class="line">                &#125;</span><br><span class="line">                List&lt;ResultInfo&gt; results = <span class="keyword">null</span>;</span><br><span class="line">                List&lt;ReferrerIntent&gt; newIntents = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (andResume) &#123;</span><br><span class="line">                    <span class="comment">// We don&#x27;t need to deliver new intents and/or set results if activity is going</span></span><br><span class="line">                    <span class="comment">// to pause immediately after launch.</span></span><br><span class="line">                    results = r.results;</span><br><span class="line">                    newIntents = r.newIntents;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_SWITCH) Slog.v(TAG_SWITCH,</span><br><span class="line">                        <span class="string">&quot;Launching: &quot;</span> + r + <span class="string">&quot; icicle=&quot;</span> + r.icicle + <span class="string">&quot; with results=&quot;</span> + results</span><br><span class="line">                                + <span class="string">&quot; newIntents=&quot;</span> + newIntents + <span class="string">&quot; andResume=&quot;</span> + andResume);</span><br><span class="line">                EventLog.writeEvent(EventLogTags.AM_RESTART_ACTIVITY, r.userId,</span><br><span class="line">                        System.identityHashCode(r), task.taskId, r.shortComponentName);</span><br><span class="line">                <span class="keyword">if</span> (r.isActivityTypeHome()) &#123;</span><br><span class="line">                    <span class="comment">// Home process is the root process of the task.</span></span><br><span class="line">                    mService.mHomeProcess = task.mActivities.get(<span class="number">0</span>).app;</span><br><span class="line">                &#125;</span><br><span class="line">                mService.notifyPackageUse(r.intent.getComponent().getPackageName(),</span><br><span class="line">                        PackageManager.NOTIFY_PACKAGE_USE_ACTIVITY);</span><br><span class="line">                r.sleeping = <span class="keyword">false</span>;</span><br><span class="line">                r.forceNewConfig = <span class="keyword">false</span>;</span><br><span class="line">                mService.getAppWarningsLocked().onStartActivity(r);</span><br><span class="line">                mService.showAskCompatModeDialogLocked(r);</span><br><span class="line">                r.compat = mService.compatibilityInfoForPackageLocked(r.info.applicationInfo);</span><br><span class="line">                ProfilerInfo profilerInfo = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (mService.mProfileApp != <span class="keyword">null</span> &amp;&amp; mService.mProfileApp.equals(app.processName)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mService.mProfileProc == <span class="keyword">null</span> || mService.mProfileProc == app) &#123;</span><br><span class="line">                        mService.mProfileProc = app;</span><br><span class="line">                        ProfilerInfo profilerInfoSvc = mService.mProfilerInfo;</span><br><span class="line">                        <span class="keyword">if</span> (profilerInfoSvc != <span class="keyword">null</span> &amp;&amp; profilerInfoSvc.profileFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (profilerInfoSvc.profileFd != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    profilerInfoSvc.profileFd = profilerInfoSvc.profileFd.dup();</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                                    profilerInfoSvc.closeFd();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            profilerInfo = <span class="keyword">new</span> ProfilerInfo(profilerInfoSvc);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                app.hasShownUi = <span class="keyword">true</span>;</span><br><span class="line">                app.pendingUiClean = <span class="keyword">true</span>;</span><br><span class="line">                app.forceProcessStateUpTo(mService.mTopProcessState);</span><br><span class="line">                <span class="comment">// Because we could be starting an Activity in the system process this may not go</span></span><br><span class="line">                <span class="comment">// across a Binder interface which would create a new Configuration. Consequently</span></span><br><span class="line">                <span class="comment">// we have to always create a new Configuration here.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> MergedConfiguration mergedConfiguration = <span class="keyword">new</span> MergedConfiguration(</span><br><span class="line">                        mService.getGlobalConfiguration(), r.getMergedOverrideConfiguration());</span><br><span class="line">                r.setLastReportedConfiguration(mergedConfiguration);</span><br><span class="line"></span><br><span class="line">                logIfTransactionTooLarge(r.intent, r.icicle);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Create activity launch transaction.</span></span><br><span class="line">                <span class="keyword">final</span> ClientTransaction clientTransaction = ClientTransaction.obtain(app.thread,</span><br><span class="line">                        r.appToken);</span><br><span class="line">                clientTransaction.addCallback(LaunchActivityItem.obtain(<span class="keyword">new</span> Intent(r.intent),</span><br><span class="line">                        System.identityHashCode(r), r.info,</span><br><span class="line">                        <span class="comment">// <span class="doctag">TODO:</span> Have this take the merged configuration instead of separate global</span></span><br><span class="line">                        <span class="comment">// and override configs.</span></span><br><span class="line">                        mergedConfiguration.getGlobalConfiguration(),</span><br><span class="line">                        mergedConfiguration.getOverrideConfiguration(), r.compat,</span><br><span class="line">                        r.launchedFromPackage, task.voiceInteractor, app.repProcState, r.icicle,</span><br><span class="line">                        r.persistentState, results, newIntents, mService.isNextTransitionForward(),</span><br><span class="line">                        profilerInfo));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Set desired final state.</span></span><br><span class="line">                <span class="keyword">final</span> ActivityLifecycleItem lifecycleItem;</span><br><span class="line">                <span class="keyword">if</span> (andResume) &#123;</span><br><span class="line">                    lifecycleItem = ResumeActivityItem.obtain(mService.isNextTransitionForward());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    lifecycleItem = PauseActivityItem.obtain();</span><br><span class="line">                &#125;</span><br><span class="line">                clientTransaction.setLifecycleStateRequest(lifecycleItem);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Schedule transaction.</span></span><br><span class="line">                mService.getLifecycleManager().scheduleTransaction(clientTransaction);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((app.info.privateFlags &amp; ApplicationInfo.PRIVATE_FLAG_CANT_SAVE_STATE) != <span class="number">0</span></span><br><span class="line">                        &amp;&amp; mService.mHasHeavyWeightFeature) &#123;</span><br><span class="line">                    <span class="comment">// This may be a heavy-weight process!  Note that the package</span></span><br><span class="line">                    <span class="comment">// manager will ensure that only activity can run in the main</span></span><br><span class="line">                    <span class="comment">// process of the .apk, which is the only thing that will be</span></span><br><span class="line">                    <span class="comment">// considered heavy-weight.</span></span><br><span class="line">                    <span class="keyword">if</span> (app.processName.equals(app.info.packageName)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (mService.mHeavyWeightProcess != <span class="keyword">null</span></span><br><span class="line">                                &amp;&amp; mService.mHeavyWeightProcess != app) &#123;</span><br><span class="line">                            Slog.w(TAG, <span class="string">&quot;Starting new heavy weight process &quot;</span> + app</span><br><span class="line">                                    + <span class="string">&quot; when already running &quot;</span></span><br><span class="line">                                    + mService.mHeavyWeightProcess);</span><br><span class="line">                        &#125;</span><br><span class="line">                        mService.mHeavyWeightProcess = app;</span><br><span class="line">                        Message msg = mService.mHandler.obtainMessage(</span><br><span class="line">                                ActivityManagerService.POST_HEAVY_NOTIFICATION_MSG);</span><br><span class="line">                        msg.obj = r;</span><br><span class="line">                        mService.mHandler.sendMessage(msg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (r.launchFailed) &#123;</span><br><span class="line">                    <span class="comment">// This is the second time we failed -- finish activity</span></span><br><span class="line">                    <span class="comment">// and give up.</span></span><br><span class="line">                    Slog.e(TAG, <span class="string">&quot;Second failure launching &quot;</span></span><br><span class="line">                            + r.intent.getComponent().flattenToShortString()</span><br><span class="line">                            + <span class="string">&quot;, giving up&quot;</span>, e);</span><br><span class="line">                    mService.appDiedLocked(app);</span><br><span class="line">                    stack.requestFinishActivityLocked(r.appToken, Activity.RESULT_CANCELED, <span class="keyword">null</span>,</span><br><span class="line">                            <span class="string">&quot;2nd-crash&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// This is the first time we failed -- restart process and</span></span><br><span class="line">                <span class="comment">// retry.</span></span><br><span class="line">                r.launchFailed = <span class="keyword">true</span>;</span><br><span class="line">                app.activities.remove(r);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            endDeferResume();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        r.launchFailed = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (stack.updateLRUListLocked(r)) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;Activity &quot;</span> + r + <span class="string">&quot; being launched, but already in LRU list&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO(lifecycler): Resume or pause requests are done as part of launch transaction,</span></span><br><span class="line">        <span class="comment">// so updating the state should be done accordingly.</span></span><br><span class="line">        <span class="keyword">if</span> (andResume &amp;&amp; readyToResume()) &#123;</span><br><span class="line">            <span class="comment">// As part of the process of launching, ActivityThread also performs</span></span><br><span class="line">            <span class="comment">// a resume.</span></span><br><span class="line">            stack.minimalResumeActivityLocked(r);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// This activity is not starting in the resumed state... which should look like we asked</span></span><br><span class="line">            <span class="comment">// it to pause+stop (but remain visible), and it has done so and reported back the</span></span><br><span class="line">            <span class="comment">// current icicle and other state.</span></span><br><span class="line">            <span class="keyword">if</span> (DEBUG_STATES) Slog.v(TAG_STATES,</span><br><span class="line">                    <span class="string">&quot;Moving to PAUSED: &quot;</span> + r + <span class="string">&quot; (starting in paused state)&quot;</span>);</span><br><span class="line">            r.setState(PAUSED, <span class="string">&quot;realStartActivityLocked&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Launch the new version setup screen if needed.  We do this -after-</span></span><br><span class="line">        <span class="comment">// launching the initial activity (that is, home), so that it can have</span></span><br><span class="line">        <span class="comment">// a chance to initialize itself while in the background, making the</span></span><br><span class="line">        <span class="comment">// switch back to it faster and look better.</span></span><br><span class="line">        <span class="keyword">if</span> (isFocusedStack(stack)) &#123;</span><br><span class="line">            mService.getActivityStartController().startSetupActivity();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update any services we are bound to that might care about whether</span></span><br><span class="line">        <span class="comment">// their client may have activities.</span></span><br><span class="line">        <span class="keyword">if</span> (r.app != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mService.mServices.updateServiceConnectionActivitiesLocked(r.app);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Schedule a transaction, which may consist of multiple callbacks and a lifecycle request.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transaction A sequence of client transaction items.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RemoteException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ClientTransaction</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scheduleTransaction</span><span class="params">(ClientTransaction transaction)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> IApplicationThread client = transaction.getClient();<span class="comment">//这个是获取到IApplicationThread的代理对象</span></span><br><span class="line">        transaction.schedule();</span><br><span class="line">        <span class="keyword">if</span> (!(client <span class="keyword">instanceof</span> Binder)) &#123;</span><br><span class="line">            <span class="comment">// If client is not an instance of Binder - it&#x27;s a remote call and at this point it is</span></span><br><span class="line">            <span class="comment">// safe to recycle the object. All objects used for local calls will be recycled after</span></span><br><span class="line">            <span class="comment">// the transaction is executed on client in ActivityThread.</span></span><br><span class="line">            transaction.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * Schedule the transaction after it was initialized. It will be send to client and all its</span><br><span class="line">     * individual parts will be applied in the following sequence:</span><br><span class="line">     * 1. The client calls &#123;@link #preExecute(ClientTransactionHandler)&#125;, which triggers all work</span><br><span class="line">     *    that needs to be done before actually scheduling the transaction for callbacks and</span><br><span class="line">     *    lifecycle state request.</span><br><span class="line">     * 2. The transaction message is scheduled.</span><br><span class="line">     * 3. The client calls &#123;@link TransactionExecutor#execute(ClientTransaction)&#125;, which executes</span><br><span class="line">     *    all callbacks and necessary lifecycle transitions.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void schedule() throws RemoteException &#123;</span><br><span class="line">        mClient.scheduleTransaction(this);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleTransaction</span><span class="params">(ClientTransaction transaction)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            ActivityThread.<span class="keyword">this</span>.scheduleTransaction(transaction);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>调用ClientTransactionHandler的scheduleTransaction方法，并发送msg给H，H接收消息并进程处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Prepare and schedule transaction for execution. */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scheduleTransaction</span><span class="params">(ClientTransaction transaction)</span> </span>&#123;</span><br><span class="line">        transaction.preExecute(<span class="keyword">this</span>);</span><br><span class="line">        sendMessage(ActivityThread.H.EXECUTE_TRANSACTION, transaction);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在H中：</span></span><br><span class="line"><span class="keyword">case</span> EXECUTE_TRANSACTION:</span><br><span class="line">    <span class="keyword">final</span> ClientTransaction transaction = (ClientTransaction) msg.obj;</span><br><span class="line">    mTransactionExecutor.execute(transaction);</span><br><span class="line">    <span class="keyword">if</span> (isSystem()) &#123;</span><br><span class="line">        <span class="comment">// Client transactions inside system process are recycled on the client side</span></span><br><span class="line">        <span class="comment">// instead of ClientLifecycleManager to avoid being cleared before this</span></span><br><span class="line">        <span class="comment">// message is handled.</span></span><br><span class="line">        transaction.recycle();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// TODO(lifecycler): Recycle locally scheduled transactions.</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Resolve transaction.</span></span><br><span class="line"><span class="comment">     * First all callbacks will be executed in the order they appear in the list. If a callback</span></span><br><span class="line"><span class="comment">     * requires a certain pre- or post-execution state, the client will be transitioned accordingly.</span></span><br><span class="line"><span class="comment">     * Then the client will cycle to the final lifecycle state if provided. Otherwise, it will</span></span><br><span class="line"><span class="comment">     * either remain in the initial state, or last state needed by a callback.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ClientTransaction transaction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> IBinder token = transaction.getActivityToken();</span><br><span class="line">        log(<span class="string">&quot;Start resolving transaction for client: &quot;</span> + mTransactionHandler + <span class="string">&quot;, token: &quot;</span> + token);</span><br><span class="line"></span><br><span class="line">        executeCallbacks(transaction);</span><br><span class="line"></span><br><span class="line">        executeLifecycleState(transaction);</span><br><span class="line">        mPendingActions.clear();</span><br><span class="line">        log(<span class="string">&quot;End resolving transaction&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeCallbacks</span><span class="params">(ClientTransaction transaction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;ClientTransactionItem&gt; callbacks = transaction.getCallbacks();</span><br><span class="line">        <span class="keyword">if</span> (callbacks == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// No callbacks to execute, return early.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log(<span class="string">&quot;Resolving callbacks&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> IBinder token = transaction.getActivityToken();</span><br><span class="line">        ActivityClientRecord r = mTransactionHandler.getActivityClient(token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// In case when post-execution state of the last callback matches the final state requested</span></span><br><span class="line">        <span class="comment">// for the activity in this transaction, we won&#x27;t do the last transition here and do it when</span></span><br><span class="line">        <span class="comment">// moving to final state instead (because it may contain additional parameters from server).</span></span><br><span class="line">        <span class="keyword">final</span> ActivityLifecycleItem finalStateRequest = transaction.getLifecycleStateRequest();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> finalState = finalStateRequest != <span class="keyword">null</span> ? finalStateRequest.getTargetState()</span><br><span class="line">                : UNDEFINED;</span><br><span class="line">        <span class="comment">// Index of the last callback that requests some post-execution state.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> lastCallbackRequestingState = lastCallbackRequestingState(transaction);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = callbacks.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">            <span class="keyword">final</span> ClientTransactionItem item = callbacks.get(i);</span><br><span class="line">            log(<span class="string">&quot;Resolving callback: &quot;</span> + item);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> postExecutionState = item.getPostExecutionState();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> closestPreExecutionState = mHelper.getClosestPreExecutionState(r,</span><br><span class="line">                    item.getPostExecutionState());</span><br><span class="line">            <span class="keyword">if</span> (closestPreExecutionState != UNDEFINED) &#123;</span><br><span class="line">                cycleToPath(r, closestPreExecutionState);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            item.execute(mTransactionHandler, token, mPendingActions);</span><br><span class="line">            item.postExecute(mTransactionHandler, token, mPendingActions);</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Launch activity request will create an activity record.</span></span><br><span class="line">                r = mTransactionHandler.getActivityClient(token);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (postExecutionState != UNDEFINED &amp;&amp; r != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Skip the very last transition and perform it by explicit state request instead.</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> shouldExcludeLastTransition =</span><br><span class="line">                        i == lastCallbackRequestingState &amp;&amp; finalState == postExecutionState;</span><br><span class="line">                cycleToPath(r, postExecutionState, shouldExcludeLastTransition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>调用LaunchActivityItem：item.execute(mTransactionHandler, token, mPendingActions);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ClientTransactionHandler client, IBinder token,</span></span></span><br><span class="line"><span class="function"><span class="params">            PendingTransactionActions pendingActions)</span> </span>&#123;</span><br><span class="line">        Trace.traceBegin(TRACE_TAG_ACTIVITY_MANAGER, <span class="string">&quot;activityStart&quot;</span>);</span><br><span class="line">        ActivityClientRecord r = <span class="keyword">new</span> ActivityClientRecord(token, mIntent, mIdent, mInfo,</span><br><span class="line">                mOverrideConfig, mCompatInfo, mReferrer, mVoiceInteractor, mState, mPersistentState,</span><br><span class="line">                mPendingResults, mPendingNewIntents, mIsForward,</span><br><span class="line">                mProfilerInfo, client);</span><br><span class="line">        client.handleLaunchActivity(r, pendingActions, <span class="keyword">null</span> <span class="comment">/* customIntent */</span>);</span><br><span class="line">        Trace.traceEnd(TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最终进入到ActivityThread的handleLaunchActivity：开始走activity的生命周期（启动activity，加载并显示界面—&gt;UI的绘制流程）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Activity <span class="title">handleLaunchActivity</span><span class="params">(ActivityClientRecord r,</span></span></span><br><span class="line"><span class="function"><span class="params">            PendingTransactionActions pendingActions, Intent customIntent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// If we are getting ready to gc after going to the background, well</span></span><br><span class="line">        <span class="comment">// we are back active so skip it.</span></span><br><span class="line">        unscheduleGcIdler();</span><br><span class="line">        mSomeActivitiesChanged = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (r.profilerInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mProfiler.setProfiler(r.profilerInfo);</span><br><span class="line">            mProfiler.startProfiling();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure we are running with the most recent config.</span></span><br><span class="line">        handleConfigurationChanged(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (localLOGV) Slog.v(</span><br><span class="line">            TAG, <span class="string">&quot;Handling launch of &quot;</span> + r);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize before creating the activity</span></span><br><span class="line">        <span class="keyword">if</span> (!ThreadedRenderer.sRendererDisabled) &#123;</span><br><span class="line">            GraphicsEnvironment.earlyInitEGL();</span><br><span class="line">        &#125;</span><br><span class="line">        WindowManagerGlobal.initialize();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Activity a = performLaunchActivity(r, customIntent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123;</span><br><span class="line">            r.createdConfig = <span class="keyword">new</span> Configuration(mConfiguration);</span><br><span class="line">            reportSizeConfigurations(r);</span><br><span class="line">            <span class="keyword">if</span> (!r.activity.mFinished &amp;&amp; pendingActions != <span class="keyword">null</span>) &#123;</span><br><span class="line">                pendingActions.setOldState(r.state);</span><br><span class="line">                pendingActions.setRestoreInstanceState(<span class="keyword">true</span>);</span><br><span class="line">                pendingActions.setCallOnPostCreate(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If there was an error, for any reason, tell the activity manager to stop us.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ActivityManager.getService()</span><br><span class="line">                        .finishActivity(r.token, Activity.RESULT_CANCELED, <span class="keyword">null</span>,</span><br><span class="line">                                Activity.DONT_FINISH_TASK_WITH_ACTIVITY);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ex.rethrowFromSystemServer();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;../images/AMS-04-%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/AMS-startActivity.bmp&quot; alt=&quot;AMS-startActivity&quot;&gt;&lt;/p&gt;
&lt;h1</summary>
      
    
    
    
    <category term="PKMS" scheme="http://example.com/categories/PKMS/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>AMS-03-车载模块应用启动流程（Launcher--&gt;AMS--&gt;zygote）</title>
    <link href="http://example.com/2020/11/10/AMS-03-%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>http://example.com/2020/11/10/AMS-03-%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</id>
    <published>2020-11-10T13:28:31.000Z</published>
    <updated>2020-11-12T02:06:07.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-应用启动流程总览"><a href="#1-应用启动流程总览" class="headerlink" title="1.应用启动流程总览"></a>1.应用启动流程总览</h1><p><img src="/images/AMS-03-%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/AMS-startActivity.bmp" alt="AMS-startActivity"></p><h2 id="1-1-APP进程调用到AMS进程"><a href="#1-1-APP进程调用到AMS进程" class="headerlink" title="1.1 APP进程调用到AMS进程"></a>1.1 APP进程调用到AMS进程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//android.app.activity.java</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Launch a new activity.  You will not receive any information about when</span></span><br><span class="line"><span class="comment">     * the activity exits.  This implementation overrides the base version,</span></span><br><span class="line"><span class="comment">     * providing information about</span></span><br><span class="line"><span class="comment">     * the activity performing the launch.  Because of this additional</span></span><br><span class="line"><span class="comment">     * information, the &#123;<span class="doctag">@link</span> Intent#FLAG_ACTIVITY_NEW_TASK&#125; launch flag is not</span></span><br><span class="line"><span class="comment">     * required; if not specified, the new activity will be added to the</span></span><br><span class="line"><span class="comment">     * task of the caller.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method throws &#123;<span class="doctag">@link</span> android.content.ActivityNotFoundException&#125;</span></span><br><span class="line"><span class="comment">     * if there was no Activity found to run the given Intent.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> intent The intent to start.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> options Additional options for how the Activity should be started.</span></span><br><span class="line"><span class="comment">     * See &#123;<span class="doctag">@link</span> android.content.Context#startActivity(Intent, Bundle)&#125;</span></span><br><span class="line"><span class="comment">     * Context.startActivity(Intent, Bundle)&#125; for more details.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> android.content.ActivityNotFoundException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #startActivity(Intent)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #startActivityForResult</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent, <span class="meta">@Nullable</span> Bundle options)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</span><br><span class="line">            startActivityForResult(intent, -<span class="number">1</span>, options);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Note we want to go through this call for compatibility with</span></span><br><span class="line">            <span class="comment">// applications that may have overridden the method.</span></span><br><span class="line">            startActivityForResult(intent, -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Launch an activity for which you would like a result when it finished.</span></span><br><span class="line"><span class="comment">     * When this activity exits, your</span></span><br><span class="line"><span class="comment">     * onActivityResult() method will be called with the given requestCode.</span></span><br><span class="line"><span class="comment">     * Using a negative requestCode is the same as calling</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #startActivity&#125; (the activity is not launched as a sub-activity).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Note that this method should only be used with Intent protocols</span></span><br><span class="line"><span class="comment">     * that are defined to return a result.  In other protocols (such as</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Intent#ACTION_MAIN&#125; or &#123;<span class="doctag">@link</span> Intent#ACTION_VIEW&#125;), you may</span></span><br><span class="line"><span class="comment">     * not get the result when you expect.  For example, if the activity you</span></span><br><span class="line"><span class="comment">     * are launching uses &#123;<span class="doctag">@link</span> Intent#FLAG_ACTIVITY_NEW_TASK&#125;, it will not</span></span><br><span class="line"><span class="comment">     * run in your task and thus you will immediately receive a cancel result.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;As a special case, if you call startActivityForResult() with a requestCode</span></span><br><span class="line"><span class="comment">     * &gt;= 0 during the initial onCreate(Bundle savedInstanceState)/onResume() of your</span></span><br><span class="line"><span class="comment">     * activity, then your window will not be displayed until a result is</span></span><br><span class="line"><span class="comment">     * returned back from the started activity.  This is to avoid visible</span></span><br><span class="line"><span class="comment">     * flickering when redirecting to another activity.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method throws &#123;<span class="doctag">@link</span> android.content.ActivityNotFoundException&#125;</span></span><br><span class="line"><span class="comment">     * if there was no Activity found to run the given Intent.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> intent The intent to start.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestCode If &gt;= 0, this code will be returned in</span></span><br><span class="line"><span class="comment">     *                    onActivityResult() when the activity exits.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> options Additional options for how the Activity should be started.</span></span><br><span class="line"><span class="comment">     * See &#123;<span class="doctag">@link</span> android.content.Context#startActivity(Intent, Bundle)&#125;</span></span><br><span class="line"><span class="comment">     * Context.startActivity(Intent, Bundle)&#125; for more details.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> android.content.ActivityNotFoundException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #startActivity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span><span class="params">(<span class="meta">@RequiresPermission</span> Intent intent, <span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@Nullable</span> Bundle options)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            options = transferSpringboardActivityOptions(options);</span><br><span class="line">            Log.d(<span class="string">&quot;slj&quot;</span>,<span class="string">&quot;mMainThread = &quot;</span> + mMainThread.getApplicationThread());</span><br><span class="line">            Instrumentation.ActivityResult ar =</span><br><span class="line">                mInstrumentation.execStartActivity(</span><br><span class="line">                    <span class="keyword">this</span>, mMainThread.getApplicationThread(), mToken, <span class="keyword">this</span>,</span><br><span class="line">                    intent, requestCode, options);</span><br><span class="line">            <span class="keyword">if</span> (ar != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mMainThread.sendActivityResult(</span><br><span class="line">                    mToken, mEmbeddedID, requestCode, ar.getResultCode(),</span><br><span class="line">                    ar.getResultData());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (requestCode &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// If this start is requesting a result, we can avoid making</span></span><br><span class="line">                <span class="comment">// the activity visible until the result is received.  Setting</span></span><br><span class="line">                <span class="comment">// this code during onCreate(Bundle savedInstanceState) or onResume() will keep the</span></span><br><span class="line">                <span class="comment">// activity hidden during this time, to avoid flickering.</span></span><br><span class="line">                <span class="comment">// This can only be done when a result is requested because</span></span><br><span class="line">                <span class="comment">// that guarantees we will get information back when the</span></span><br><span class="line">                <span class="comment">// activity is finished, no matter what happens to it.</span></span><br><span class="line">                mStartedActivity = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cancelInputsAndStartExitTransition(options);</span><br><span class="line">            <span class="comment">// TODO Consider clearing/flushing other event sources and events for child windows.</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mParent.startActivityFromChild(<span class="keyword">this</span>, intent, requestCode, options);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Note we want to go through this method for compatibility with</span></span><br><span class="line">                <span class="comment">// existing applications that may have overridden it.</span></span><br><span class="line">                mParent.startActivityFromChild(<span class="keyword">this</span>, intent, requestCode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//android.app.Instrumentation.java</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute a startActivity call made by the application.  The default </span></span><br><span class="line"><span class="comment">     * implementation takes care of updating any active &#123;<span class="doctag">@link</span> ActivityMonitor&#125;</span></span><br><span class="line"><span class="comment">     * objects and dispatches this call to the system activity manager; you can</span></span><br><span class="line"><span class="comment">     * override this to watch for the application to start an activity, and </span></span><br><span class="line"><span class="comment">     * modify what happens when it does. </span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method returns an &#123;<span class="doctag">@link</span> ActivityResult&#125; object, which you can </span></span><br><span class="line"><span class="comment">     * use when intercepting application calls to avoid performing the start </span></span><br><span class="line"><span class="comment">     * activity action but still return the result the application is </span></span><br><span class="line"><span class="comment">     * expecting.  To do this, override this method to catch the call to start </span></span><br><span class="line"><span class="comment">     * activity so that it returns a new ActivityResult containing the results </span></span><br><span class="line"><span class="comment">     * you would like the application to see, and don&#x27;t call up to the super </span></span><br><span class="line"><span class="comment">     * class.  Note that an application is only expecting a result if </span></span><br><span class="line"><span class="comment">     * &lt;var&gt;requestCode&lt;/var&gt; is &amp;gt;= 0.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method throws &#123;<span class="doctag">@link</span> android.content.ActivityNotFoundException&#125;</span></span><br><span class="line"><span class="comment">     * if there was no Activity found to run the given Intent.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> who The Context from which the activity is being started.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contextThread The main thread of the Context from which the activity</span></span><br><span class="line"><span class="comment">     *                      is being started.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token Internal token identifying to the system who is starting </span></span><br><span class="line"><span class="comment">     *              the activity; may be null.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target Which activity is performing the start (and thus receiving </span></span><br><span class="line"><span class="comment">     *               any result); may be null if this call is not being made</span></span><br><span class="line"><span class="comment">     *               from an activity.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> intent The actual Intent to start.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestCode Identifier for this request&#x27;s result; less than zero </span></span><br><span class="line"><span class="comment">     *                    if the caller is not expecting a result.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> options Addition options.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> To force the return of a particular result, return an </span></span><br><span class="line"><span class="comment">     *         ActivityResult object containing the desired data; otherwise</span></span><br><span class="line"><span class="comment">     *         return null.  The default implementation always returns null.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> android.content.ActivityNotFoundException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Activity#startActivity(Intent)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Activity#startActivityForResult(Intent, int)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Activity#startActivityFromChild</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@hide</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActivityResult <span class="title">execStartActivity</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Context who, IBinder contextThread, IBinder token, Activity target,</span></span></span><br><span class="line"><span class="function"><span class="params">            Intent intent, <span class="keyword">int</span> requestCode, Bundle options)</span> </span>&#123;</span><br><span class="line">        IApplicationThread whoThread = (IApplicationThread) contextThread;</span><br><span class="line">        Uri referrer = target != <span class="keyword">null</span> ? target.onProvideReferrer() : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (referrer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            intent.putExtra(Intent.EXTRA_REFERRER, referrer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mActivityMonitors != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mSync) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> N = mActivityMonitors.size();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">                    <span class="keyword">final</span> ActivityMonitor am = mActivityMonitors.get(i);</span><br><span class="line">                    ActivityResult result = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (am.ignoreMatchingSpecificIntents()) &#123;</span><br><span class="line">                        result = am.onStartActivity(intent);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        am.mHits++;</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (am.match(who, <span class="keyword">null</span>, intent)) &#123;</span><br><span class="line">                        am.mHits++;</span><br><span class="line">                        <span class="keyword">if</span> (am.isBlocking()) &#123;</span><br><span class="line">                            <span class="keyword">return</span> requestCode &gt;= <span class="number">0</span> ? am.getResult() : <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            intent.migrateExtraStreamToClipData();</span><br><span class="line">            intent.prepareToLeaveProcess(who);</span><br><span class="line">            <span class="keyword">int</span> result = ActivityManager.getService()</span><br><span class="line">                .startActivity(whoThread, who.getBasePackageName(), intent,</span><br><span class="line">                        intent.resolveTypeIfNeeded(who.getContentResolver()),</span><br><span class="line">                        token, target != <span class="keyword">null</span> ? target.mEmbeddedID : <span class="keyword">null</span>,</span><br><span class="line">                        requestCode, <span class="number">0</span>, <span class="keyword">null</span>, options);</span><br><span class="line">            checkStartActivityResult(result, intent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Failure from system&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跨进程调用，获取到AMS服务，调用其startActivity方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> result = ActivityManager.getService()</span><br><span class="line">                .startActivity(whoThread, who.getBasePackageName(), intent,</span><br><span class="line">                        intent.resolveTypeIfNeeded(who.getContentResolver()),</span><br><span class="line">                        token, target != <span class="keyword">null</span> ? target.mEmbeddedID : <span class="keyword">null</span>,</span><br><span class="line">                        requestCode, <span class="number">0</span>, <span class="keyword">null</span>, options);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityManagerService.java</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span></span><br><span class="line"><span class="function"><span class="params">            Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, Bundle bOptions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,</span><br><span class="line">                resultWho, requestCode, startFlags, profilerInfo, bOptions,</span><br><span class="line">                UserHandle.getCallingUserId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityAsUser</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span></span><br><span class="line"><span class="function"><span class="params">            Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, Bundle bOptions, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> validateIncomingUser)</span> </span>&#123;</span><br><span class="line">        enforceNotIsolatedCaller(<span class="string">&quot;startActivity&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userId = mActivityStartController.checkTargetUser(userId, validateIncomingUser,</span><br><span class="line">                Binder.getCallingPid(), Binder.getCallingUid(), <span class="string">&quot;startActivityAsUser&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Switch to user app stacks here.</span></span><br><span class="line">        <span class="keyword">return</span> mActivityStartController.obtainStarter(intent, <span class="string">&quot;startActivityAsUser&quot;</span>)</span><br><span class="line">                .setCaller(caller)</span><br><span class="line">                .setCallingPackage(callingPackage)</span><br><span class="line">                .setResolvedType(resolvedType)</span><br><span class="line">                .setResultTo(resultTo)</span><br><span class="line">                .setResultWho(resultWho)</span><br><span class="line">                .setRequestCode(requestCode)</span><br><span class="line">                .setStartFlags(startFlags)</span><br><span class="line">                .setProfilerInfo(profilerInfo)</span><br><span class="line">                .setActivityOptions(bOptions)</span><br><span class="line">                .setMayWait(userId)</span><br><span class="line">                .execute();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ActivityStarter <span class="title">setMayWait</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        mRequest.mayWait = <span class="keyword">true</span>;<span class="comment">//这里会配置为true</span></span><br><span class="line">        mRequest.userId = userId;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>根据调试信息，可以得到，调用mActivityStartController的obtainStarter后会通过ActivityStarter来配置一系列的参数，最终调用其execute方法。</p><p><img src="/images/AMS-03-%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image-20201111155120779.png" alt="image-20201111155120779"></p><p>由于前面mRequest.mayWait = true;所以这里会调用startActivityMayWait方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityStarter.java</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Starts an activity based on the request parameters provided earlier.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> The starter result.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// TODO(b/64750076): Look into passing request directly to these methods to allow</span></span><br><span class="line">           <span class="comment">// for transactional diffs and preprocessing.</span></span><br><span class="line">           <span class="keyword">if</span> (mRequest.mayWait) &#123;</span><br><span class="line">               <span class="keyword">return</span> startActivityMayWait(mRequest.caller, mRequest.callingUid,</span><br><span class="line">                       mRequest.callingPackage, mRequest.intent, mRequest.resolvedType,</span><br><span class="line">                       mRequest.voiceSession, mRequest.voiceInteractor, mRequest.resultTo,</span><br><span class="line">                       mRequest.resultWho, mRequest.requestCode, mRequest.startFlags,</span><br><span class="line">                       mRequest.profilerInfo, mRequest.waitResult, mRequest.globalConfig,</span><br><span class="line">                       mRequest.activityOptions, mRequest.ignoreTargetSecurity, mRequest.userId,</span><br><span class="line">                       mRequest.inTask, mRequest.reason,</span><br><span class="line">                       mRequest.allowPendingRemoteAnimationRegistryLookup,</span><br><span class="line">                       mRequest.originatingPendingIntent);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> startActivity(mRequest.caller, mRequest.intent, mRequest.ephemeralIntent,</span><br><span class="line">                       mRequest.resolvedType, mRequest.activityInfo, mRequest.resolveInfo,</span><br><span class="line">                       mRequest.voiceSession, mRequest.voiceInteractor, mRequest.resultTo,</span><br><span class="line">                       mRequest.resultWho, mRequest.requestCode, mRequest.callingPid,</span><br><span class="line">                       mRequest.callingUid, mRequest.callingPackage, mRequest.realCallingPid,</span><br><span class="line">                       mRequest.realCallingUid, mRequest.startFlags, mRequest.activityOptions,</span><br><span class="line">                       mRequest.ignoreTargetSecurity, mRequest.componentSpecified,</span><br><span class="line">                       mRequest.outActivity, mRequest.inTask, mRequest.reason,</span><br><span class="line">                       mRequest.allowPendingRemoteAnimationRegistryLookup,</span><br><span class="line">                       mRequest.originatingPendingIntent);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           onExecutionComplete();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>根据调试信息，可以知道传入的各个参数的值如下图所示：</p><p><img src="/images/AMS-03-%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image-20201111155918810.png" alt="image-20201111155918810"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">startActivityMayWait</span><span class="params">(IApplicationThread caller, <span class="keyword">int</span> callingUid,</span></span></span><br><span class="line"><span class="function"><span class="params">        String callingPackage, Intent intent, String resolvedType,</span></span></span><br><span class="line"><span class="function"><span class="params">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params">        IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode, <span class="keyword">int</span> startFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">        ProfilerInfo profilerInfo, WaitResult outResult,</span></span></span><br><span class="line"><span class="function"><span class="params">        Configuration globalConfig, SafeActivityOptions options, <span class="keyword">boolean</span> ignoreTargetSecurity,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> userId, TaskRecord inTask, String reason,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> allowPendingRemoteAnimationRegistryLookup,</span></span></span><br><span class="line"><span class="function"><span class="params">        PendingIntentRecord originatingPendingIntent)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Refuse possible leaked file descriptors</span></span><br><span class="line">    <span class="keyword">if</span> (intent != <span class="keyword">null</span> &amp;&amp; intent.hasFileDescriptors()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;File descriptors passed in Intent&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mSupervisor.getActivityMetricsLogger().notifyActivityLaunching();</span><br><span class="line">    <span class="keyword">boolean</span> componentSpecified = intent.getComponent() != <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> realCallingPid = Binder.getCallingPid();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> realCallingUid = Binder.getCallingUid();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> callingPid;</span><br><span class="line">    <span class="keyword">if</span> (callingUid &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        callingPid = -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (caller == <span class="keyword">null</span>) &#123;</span><br><span class="line">        callingPid = realCallingPid;</span><br><span class="line">        callingUid = realCallingUid;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callingPid = callingUid = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save a copy in case ephemeral needs it</span></span><br><span class="line">    <span class="keyword">final</span> Intent ephemeralIntent = <span class="keyword">new</span> Intent(intent);</span><br><span class="line">    <span class="comment">// Don&#x27;t modify the client&#x27;s object!</span></span><br><span class="line">    intent = <span class="keyword">new</span> Intent(intent);</span><br><span class="line">    <span class="keyword">if</span> (componentSpecified</span><br><span class="line">            &amp;&amp; !(Intent.ACTION_VIEW.equals(intent.getAction()) &amp;&amp; intent.getData() == <span class="keyword">null</span>)</span><br><span class="line">            &amp;&amp; !Intent.ACTION_INSTALL_INSTANT_APP_PACKAGE.equals(intent.getAction())</span><br><span class="line">            &amp;&amp; !Intent.ACTION_RESOLVE_INSTANT_APP_PACKAGE.equals(intent.getAction())</span><br><span class="line">            &amp;&amp; mService.getPackageManagerInternalLocked()</span><br><span class="line">                    .isInstantAppInstallerComponent(intent.getComponent())) &#123;</span><br><span class="line">        <span class="comment">// intercept intents targeted directly to the ephemeral installer the</span></span><br><span class="line">        <span class="comment">// ephemeral installer should never be started with a raw Intent; instead</span></span><br><span class="line">        <span class="comment">// adjust the intent so it looks like a &quot;normal&quot; instant app launch</span></span><br><span class="line">        intent.setComponent(<span class="keyword">null</span> <span class="comment">/*component*/</span>);</span><br><span class="line">        componentSpecified = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ResolveInfo rInfo = mSupervisor.resolveIntent(intent, resolvedType, userId,</span><br><span class="line">            <span class="number">0</span> <span class="comment">/* matchFlags */</span>,</span><br><span class="line">                    computeResolveFilterUid(</span><br><span class="line">                            callingUid, realCallingUid, mRequest.filterCallingUid));</span><br><span class="line">    <span class="keyword">if</span> (rInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">        UserInfo userInfo = mSupervisor.getUserInfo(userId);</span><br><span class="line">        <span class="keyword">if</span> (userInfo != <span class="keyword">null</span> &amp;&amp; userInfo.isManagedProfile()) &#123;</span><br><span class="line">            <span class="comment">// Special case for managed profiles, if attempting to launch non-cryto aware</span></span><br><span class="line">            <span class="comment">// app in a locked managed profile from an unlocked parent allow it to resolve</span></span><br><span class="line">            <span class="comment">// as user will be sent via confirm credentials to unlock the profile.</span></span><br><span class="line">            UserManager userManager = UserManager.get(mService.mContext);</span><br><span class="line">            <span class="keyword">boolean</span> profileLockedAndParentUnlockingOrUnlocked = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">long</span> token = Binder.clearCallingIdentity();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                UserInfo parent = userManager.getProfileParent(userId);</span><br><span class="line">                profileLockedAndParentUnlockingOrUnlocked = (parent != <span class="keyword">null</span>)</span><br><span class="line">                        &amp;&amp; userManager.isUserUnlockingOrUnlocked(parent.id)</span><br><span class="line">                        &amp;&amp; !userManager.isUserUnlockingOrUnlocked(userId);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                Binder.restoreCallingIdentity(token);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (profileLockedAndParentUnlockingOrUnlocked) &#123;</span><br><span class="line">                rInfo = mSupervisor.resolveIntent(intent, resolvedType, userId,</span><br><span class="line">                        PackageManager.MATCH_DIRECT_BOOT_AWARE</span><br><span class="line">                                | PackageManager.MATCH_DIRECT_BOOT_UNAWARE,</span><br><span class="line">                        computeResolveFilterUid(</span><br><span class="line">                                callingUid, realCallingUid, mRequest.filterCallingUid));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Collect information about the target of the Intent.</span></span><br><span class="line">    ActivityInfo aInfo = mSupervisor.resolveActivity(intent, rInfo, startFlags, profilerInfo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mService) &#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityStack stack = mSupervisor.mFocusedStack;</span><br><span class="line">        stack.mConfigWillChange = globalConfig != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; mService.getGlobalConfiguration().diff(globalConfig) != <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_CONFIGURATION) Slog.v(TAG_CONFIGURATION,</span><br><span class="line">                <span class="string">&quot;Starting activity when config will change = &quot;</span> + stack.mConfigWillChange);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (aInfo != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (aInfo.applicationInfo.privateFlags</span><br><span class="line">                        &amp; ApplicationInfo.PRIVATE_FLAG_CANT_SAVE_STATE) != <span class="number">0</span> &amp;&amp;</span><br><span class="line">                mService.mHasHeavyWeightFeature) &#123;</span><br><span class="line">            <span class="comment">// This may be a heavy-weight process!  Check to see if we already</span></span><br><span class="line">            <span class="comment">// have another, different heavy-weight process running.</span></span><br><span class="line">            <span class="keyword">if</span> (aInfo.processName.equals(aInfo.applicationInfo.packageName)) &#123;</span><br><span class="line">                <span class="keyword">final</span> ProcessRecord heavy = mService.mHeavyWeightProcess;</span><br><span class="line">                <span class="keyword">if</span> (heavy != <span class="keyword">null</span> &amp;&amp; (heavy.info.uid != aInfo.applicationInfo.uid</span><br><span class="line">                        || !heavy.processName.equals(aInfo.processName))) &#123;</span><br><span class="line">                    <span class="keyword">int</span> appCallingUid = callingUid;</span><br><span class="line">                    <span class="keyword">if</span> (caller != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        ProcessRecord callerApp = mService.getRecordForAppLocked(caller);</span><br><span class="line">                        <span class="keyword">if</span> (callerApp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            appCallingUid = callerApp.info.uid;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            Slog.w(TAG, <span class="string">&quot;Unable to find app for caller &quot;</span> + caller</span><br><span class="line">                                    + <span class="string">&quot; (pid=&quot;</span> + callingPid + <span class="string">&quot;) when starting: &quot;</span></span><br><span class="line">                                    + intent.toString());</span><br><span class="line">                            SafeActivityOptions.abort(options);</span><br><span class="line">                            <span class="keyword">return</span> ActivityManager.START_PERMISSION_DENIED;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    IIntentSender target = mService.getIntentSenderLocked(</span><br><span class="line">                            ActivityManager.INTENT_SENDER_ACTIVITY, <span class="string">&quot;android&quot;</span>,</span><br><span class="line">                            appCallingUid, userId, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">new</span> Intent[] &#123; intent &#125;,</span><br><span class="line">                            <span class="keyword">new</span> String[] &#123; resolvedType &#125;, PendingIntent.FLAG_CANCEL_CURRENT</span><br><span class="line">                                    | PendingIntent.FLAG_ONE_SHOT, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                    Intent newIntent = <span class="keyword">new</span> Intent();</span><br><span class="line">                    <span class="keyword">if</span> (requestCode &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// Caller is requesting a result.</span></span><br><span class="line">                        newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_HAS_RESULT, <span class="keyword">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_INTENT,</span><br><span class="line">                            <span class="keyword">new</span> IntentSender(target));</span><br><span class="line">                    <span class="keyword">if</span> (heavy.activities.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        ActivityRecord hist = heavy.activities.get(<span class="number">0</span>);</span><br><span class="line">                        newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_CUR_APP,</span><br><span class="line">                                hist.packageName);</span><br><span class="line">                        newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_CUR_TASK,</span><br><span class="line">                                hist.getTask().taskId);</span><br><span class="line">                    &#125;</span><br><span class="line">                    newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_NEW_APP,</span><br><span class="line">                            aInfo.packageName);</span><br><span class="line">                    newIntent.setFlags(intent.getFlags());</span><br><span class="line">                    newIntent.setClassName(<span class="string">&quot;android&quot;</span>,</span><br><span class="line">                            HeavyWeightSwitcherActivity.class.getName());</span><br><span class="line">                    intent = newIntent;</span><br><span class="line">                    resolvedType = <span class="keyword">null</span>;</span><br><span class="line">                    caller = <span class="keyword">null</span>;</span><br><span class="line">                    callingUid = Binder.getCallingUid();</span><br><span class="line">                    callingPid = Binder.getCallingPid();</span><br><span class="line">                    componentSpecified = <span class="keyword">true</span>;</span><br><span class="line">                    rInfo = mSupervisor.resolveIntent(intent, <span class="keyword">null</span> <span class="comment">/*resolvedType*/</span>, userId,</span><br><span class="line">                            <span class="number">0</span> <span class="comment">/* matchFlags */</span>, computeResolveFilterUid(</span><br><span class="line">                                    callingUid, realCallingUid, mRequest.filterCallingUid));</span><br><span class="line">                    aInfo = rInfo != <span class="keyword">null</span> ? rInfo.activityInfo : <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (aInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        aInfo = mService.getActivityInfoForUser(aInfo, userId);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ActivityRecord[] outRecord = <span class="keyword">new</span> ActivityRecord[<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//继续调用startActivity</span></span><br><span class="line">        <span class="keyword">int</span> res = startActivity(caller, intent, ephemeralIntent, resolvedType, aInfo, rInfo,</span><br><span class="line">                voiceSession, voiceInteractor, resultTo, resultWho, requestCode, callingPid,</span><br><span class="line">                callingUid, callingPackage, realCallingPid, realCallingUid, startFlags, options,</span><br><span class="line">                ignoreTargetSecurity, componentSpecified, outRecord, inTask, reason,</span><br><span class="line">                allowPendingRemoteAnimationRegistryLookup, originatingPendingIntent);</span><br><span class="line"></span><br><span class="line">        Binder.restoreCallingIdentity(origId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (stack.mConfigWillChange) &#123;</span><br><span class="line">            <span class="comment">// If the caller also wants to switch to a new configuration,</span></span><br><span class="line">            <span class="comment">// do so now.  This allows a clean switch, as we are waiting</span></span><br><span class="line">            <span class="comment">// for the current activity to pause (so we will not destroy</span></span><br><span class="line">            <span class="comment">// it), and have not yet started the next activity.</span></span><br><span class="line">            mService.enforceCallingPermission(android.Manifest.permission.CHANGE_CONFIGURATION,</span><br><span class="line">                    <span class="string">&quot;updateConfiguration()&quot;</span>);</span><br><span class="line">            stack.mConfigWillChange = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_CONFIGURATION) Slog.v(TAG_CONFIGURATION,</span><br><span class="line">                    <span class="string">&quot;Updating to new configuration after starting activity.&quot;</span>);</span><br><span class="line">            mService.updateConfigurationLocked(globalConfig, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Notify ActivityMetricsLogger that the activity has launched. ActivityMetricsLogger</span></span><br><span class="line">        <span class="comment">// will then wait for the windows to be drawn and populate WaitResult.</span></span><br><span class="line">        mSupervisor.getActivityMetricsLogger().notifyActivityLaunched(res, outRecord[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (outResult != <span class="keyword">null</span>) &#123;</span><br><span class="line">            outResult.result = res;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> ActivityRecord r = outRecord[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span>(res) &#123;</span><br><span class="line">                <span class="keyword">case</span> START_SUCCESS: &#123;</span><br><span class="line">                    mSupervisor.mWaitingActivityLaunched.add(outResult);</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            mService.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> (outResult.result != START_TASK_TO_FRONT</span><br><span class="line">                            &amp;&amp; !outResult.timeout &amp;&amp; outResult.who == <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (outResult.result == START_TASK_TO_FRONT) &#123;</span><br><span class="line">                        res = START_TASK_TO_FRONT;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> START_DELIVERED_TO_TOP: &#123;</span><br><span class="line">                    outResult.timeout = <span class="keyword">false</span>;</span><br><span class="line">                    outResult.who = r.realActivity;</span><br><span class="line">                    outResult.totalTime = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> START_TASK_TO_FRONT: &#123;</span><br><span class="line">                    <span class="comment">// ActivityRecord may represent a different activity, but it should not be</span></span><br><span class="line">                    <span class="comment">// in the resumed state.</span></span><br><span class="line">                    <span class="keyword">if</span> (r.nowVisible &amp;&amp; r.isState(RESUMED)) &#123;</span><br><span class="line">                        outResult.timeout = <span class="keyword">false</span>;</span><br><span class="line">                        outResult.who = r.realActivity;</span><br><span class="line">                        outResult.totalTime = <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">long</span> startTimeMs = SystemClock.uptimeMillis();</span><br><span class="line">                        mSupervisor.waitActivityVisible(r.realActivity, outResult, startTimeMs);</span><br><span class="line">                        <span class="comment">// Note: the timeout variable is not currently not ever set.</span></span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                mService.wait();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> (!outResult.timeout &amp;&amp; outResult.who == <span class="keyword">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">(IApplicationThread caller, Intent intent, Intent ephemeralIntent,</span></span></span><br><span class="line"><span class="function"><span class="params">        String resolvedType, ActivityInfo aInfo, ResolveInfo rInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params">        IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode, <span class="keyword">int</span> callingPid, <span class="keyword">int</span> callingUid,</span></span></span><br><span class="line"><span class="function"><span class="params">        String callingPackage, <span class="keyword">int</span> realCallingPid, <span class="keyword">int</span> realCallingUid, <span class="keyword">int</span> startFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">        SafeActivityOptions options, <span class="keyword">boolean</span> ignoreTargetSecurity, <span class="keyword">boolean</span> componentSpecified,</span></span></span><br><span class="line"><span class="function"><span class="params">        ActivityRecord[] outActivity, TaskRecord inTask, String reason,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> allowPendingRemoteAnimationRegistryLookup,</span></span></span><br><span class="line"><span class="function"><span class="params">        PendingIntentRecord originatingPendingIntent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(reason)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Need to specify a reason.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mLastStartReason = reason;</span><br><span class="line">    mLastStartActivityTimeMs = System.currentTimeMillis();</span><br><span class="line">    mLastStartActivityRecord[<span class="number">0</span>] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    mLastStartActivityResult = startActivity(caller, intent, ephemeralIntent, resolvedType,</span><br><span class="line">            aInfo, rInfo, voiceSession, voiceInteractor, resultTo, resultWho, requestCode,</span><br><span class="line">            callingPid, callingUid, callingPackage, realCallingPid, realCallingUid, startFlags,</span><br><span class="line">            options, ignoreTargetSecurity, componentSpecified, mLastStartActivityRecord,</span><br><span class="line">            inTask, allowPendingRemoteAnimationRegistryLookup, originatingPendingIntent);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (outActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// mLastStartActivityRecord[0] is set in the call to startActivity above.</span></span><br><span class="line">        outActivity[<span class="number">0</span>] = mLastStartActivityRecord[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getExternalResult(mLastStartActivityResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">(IApplicationThread caller, Intent intent, Intent ephemeralIntent,</span></span></span><br><span class="line"><span class="function"><span class="params">            String resolvedType, ActivityInfo aInfo, ResolveInfo rInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params">            IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode, <span class="keyword">int</span> callingPid, <span class="keyword">int</span> callingUid,</span></span></span><br><span class="line"><span class="function"><span class="params">            String callingPackage, <span class="keyword">int</span> realCallingPid, <span class="keyword">int</span> realCallingUid, <span class="keyword">int</span> startFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">            SafeActivityOptions options,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> ignoreTargetSecurity, <span class="keyword">boolean</span> componentSpecified, ActivityRecord[] outActivity,</span></span></span><br><span class="line"><span class="function"><span class="params">            TaskRecord inTask, <span class="keyword">boolean</span> allowPendingRemoteAnimationRegistryLookup,</span></span></span><br><span class="line"><span class="function"><span class="params">            PendingIntentRecord originatingPendingIntent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> err = ActivityManager.START_SUCCESS;</span><br><span class="line">        <span class="comment">// Pull the optional Ephemeral Installer-only bundle out of the options early.</span></span><br><span class="line">        <span class="keyword">final</span> Bundle verificationBundle</span><br><span class="line">                = options != <span class="keyword">null</span> ? options.popAppVerificationBundle() : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ProcessRecord callerApp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (caller != <span class="keyword">null</span>) &#123;</span><br><span class="line">            callerApp = mService.getRecordForAppLocked(caller);</span><br><span class="line">            <span class="keyword">if</span> (callerApp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                callingPid = callerApp.pid;</span><br><span class="line">                callingUid = callerApp.info.uid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">&quot;Unable to find app for caller &quot;</span> + caller</span><br><span class="line">                        + <span class="string">&quot; (pid=&quot;</span> + callingPid + <span class="string">&quot;) when starting: &quot;</span></span><br><span class="line">                        + intent.toString());</span><br><span class="line">                err = ActivityManager.START_PERMISSION_DENIED;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> userId = aInfo != <span class="keyword">null</span> &amp;&amp; aInfo.applicationInfo != <span class="keyword">null</span></span><br><span class="line">                ? UserHandle.getUserId(aInfo.applicationInfo.uid) : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (err == ActivityManager.START_SUCCESS) &#123;</span><br><span class="line">            Slog.i(TAG, <span class="string">&quot;START u&quot;</span> + userId + <span class="string">&quot; &#123;&quot;</span> + intent.toShortString(<span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">false</span>)</span><br><span class="line">                    + <span class="string">&quot;&#125; from uid &quot;</span> + callingUid);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ActivityRecord sourceRecord = <span class="keyword">null</span>;</span><br><span class="line">        ActivityRecord resultRecord = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (resultTo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sourceRecord = mSupervisor.isInAnyStackLocked(resultTo);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_RESULTS) Slog.v(TAG_RESULTS,</span><br><span class="line">                    <span class="string">&quot;Will send result to &quot;</span> + resultTo + <span class="string">&quot; &quot;</span> + sourceRecord);</span><br><span class="line">            <span class="keyword">if</span> (sourceRecord != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (requestCode &gt;= <span class="number">0</span> &amp;&amp; !sourceRecord.finishing) &#123;</span><br><span class="line">                    resultRecord = sourceRecord;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> launchFlags = intent.getFlags();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((launchFlags &amp; Intent.FLAG_ACTIVITY_FORWARD_RESULT) != <span class="number">0</span> &amp;&amp; sourceRecord != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Transfer the result target from the source activity to the new</span></span><br><span class="line">            <span class="comment">// one being started, including any failures.</span></span><br><span class="line">            <span class="keyword">if</span> (requestCode &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                SafeActivityOptions.abort(options);</span><br><span class="line">                <span class="keyword">return</span> ActivityManager.START_FORWARD_AND_REQUEST_CONFLICT;</span><br><span class="line">            &#125;</span><br><span class="line">            resultRecord = sourceRecord.resultTo;</span><br><span class="line">            <span class="keyword">if</span> (resultRecord != <span class="keyword">null</span> &amp;&amp; !resultRecord.isInStackLocked()) &#123;</span><br><span class="line">                resultRecord = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            resultWho = sourceRecord.resultWho;</span><br><span class="line">            requestCode = sourceRecord.requestCode;</span><br><span class="line">            sourceRecord.resultTo = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (resultRecord != <span class="keyword">null</span>) &#123;</span><br><span class="line">                resultRecord.removeResultsLocked(sourceRecord, resultWho, requestCode);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sourceRecord.launchedFromUid == callingUid) &#123;</span><br><span class="line">                <span class="comment">// The new activity is being launched from the same uid as the previous</span></span><br><span class="line">                <span class="comment">// activity in the flow, and asking to forward its result back to the</span></span><br><span class="line">                <span class="comment">// previous.  In this case the activity is serving as a trampoline between</span></span><br><span class="line">                <span class="comment">// the two, so we also want to update its launchedFromPackage to be the</span></span><br><span class="line">                <span class="comment">// same as the previous activity.  Note that this is safe, since we know</span></span><br><span class="line">                <span class="comment">// these two packages come from the same uid; the caller could just as</span></span><br><span class="line">                <span class="comment">// well have supplied that same package name itself.  This specifially</span></span><br><span class="line">                <span class="comment">// deals with the case of an intent picker/chooser being launched in the app</span></span><br><span class="line">                <span class="comment">// flow to redirect to an activity picked by the user, where we want the final</span></span><br><span class="line">                <span class="comment">// activity to consider it to have been launched by the previous app activity.</span></span><br><span class="line">                callingPackage = sourceRecord.launchedFromPackage;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; intent.getComponent() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// We couldn&#x27;t find a class that can handle the given Intent.</span></span><br><span class="line">            <span class="comment">// That&#x27;s the end of that!</span></span><br><span class="line">            err = ActivityManager.START_INTENT_NOT_RESOLVED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; aInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// We couldn&#x27;t find the specific class specified in the Intent.</span></span><br><span class="line">            <span class="comment">// Also the end of the line.</span></span><br><span class="line">            err = ActivityManager.START_CLASS_NOT_FOUND;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; sourceRecord != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; sourceRecord.getTask().voiceSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// If this activity is being launched as part of a voice session, we need</span></span><br><span class="line">            <span class="comment">// to ensure that it is safe to do so.  If the upcoming activity will also</span></span><br><span class="line">            <span class="comment">// be part of the voice session, we can only launch it if it has explicitly</span></span><br><span class="line">            <span class="comment">// said it supports the VOICE category, or it is a part of the calling app.</span></span><br><span class="line">            <span class="keyword">if</span> ((launchFlags &amp; FLAG_ACTIVITY_NEW_TASK) == <span class="number">0</span></span><br><span class="line">                    &amp;&amp; sourceRecord.info.applicationInfo.uid != aInfo.applicationInfo.uid) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    intent.addCategory(Intent.CATEGORY_VOICE);</span><br><span class="line">                    <span class="keyword">if</span> (!mService.getPackageManager().activitySupportsIntent(</span><br><span class="line">                            intent.getComponent(), intent, resolvedType)) &#123;</span><br><span class="line">                        Slog.w(TAG,</span><br><span class="line">                                <span class="string">&quot;Activity being started in current voice task does not support voice: &quot;</span></span><br><span class="line">                                        + intent);</span><br><span class="line">                        err = ActivityManager.START_NOT_VOICE_COMPATIBLE;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    Slog.w(TAG, <span class="string">&quot;Failure checking voice capabilities&quot;</span>, e);</span><br><span class="line">                    err = ActivityManager.START_NOT_VOICE_COMPATIBLE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; voiceSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// If the caller is starting a new voice session, just make sure the target</span></span><br><span class="line">            <span class="comment">// is actually allowing it to run this way.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!mService.getPackageManager().activitySupportsIntent(intent.getComponent(),</span><br><span class="line">                        intent, resolvedType)) &#123;</span><br><span class="line">                    Slog.w(TAG,</span><br><span class="line">                            <span class="string">&quot;Activity being started in new voice task does not support: &quot;</span></span><br><span class="line">                                    + intent);</span><br><span class="line">                    err = ActivityManager.START_NOT_VOICE_COMPATIBLE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">&quot;Failure checking voice capabilities&quot;</span>, e);</span><br><span class="line">                err = ActivityManager.START_NOT_VOICE_COMPATIBLE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ActivityStack resultStack = resultRecord == <span class="keyword">null</span> ? <span class="keyword">null</span> : resultRecord.getStack();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (err != START_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (resultRecord != <span class="keyword">null</span>) &#123;</span><br><span class="line">                resultStack.sendActivityResultLocked(</span><br><span class="line">                        -<span class="number">1</span>, resultRecord, resultWho, requestCode, RESULT_CANCELED, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            SafeActivityOptions.abort(options);</span><br><span class="line">            <span class="keyword">return</span> err;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> abort = !mSupervisor.checkStartAnyActivityPermission(intent, aInfo, resultWho,</span><br><span class="line">                requestCode, callingPid, callingUid, callingPackage, ignoreTargetSecurity,</span><br><span class="line">                inTask != <span class="keyword">null</span>, callerApp, resultRecord, resultStack);</span><br><span class="line">        abort |= !mService.mIntentFirewall.checkStartActivity(intent, callingUid,</span><br><span class="line">                callingPid, resolvedType, aInfo.applicationInfo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Merge the two options bundles, while realCallerOptions takes precedence.</span></span><br><span class="line">        ActivityOptions checkedOptions = options != <span class="keyword">null</span></span><br><span class="line">                ? options.getOptions(intent, aInfo, callerApp, mSupervisor)</span><br><span class="line">                : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (allowPendingRemoteAnimationRegistryLookup) &#123;</span><br><span class="line">            checkedOptions = mService.getActivityStartController()</span><br><span class="line">                    .getPendingRemoteAnimationRegistry()</span><br><span class="line">                    .overrideOptionsIfNeeded(callingPackage, checkedOptions);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mService.mController != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// The Intent we give to the watcher has the extra data</span></span><br><span class="line">                <span class="comment">// stripped off, since it can contain private information.</span></span><br><span class="line">                Intent watchIntent = intent.cloneFilter();</span><br><span class="line">                abort |= !mService.mController.activityStarting(watchIntent,</span><br><span class="line">                        aInfo.applicationInfo.packageName);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                mService.mController = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mInterceptor.setStates(userId, realCallingPid, realCallingUid, startFlags, callingPackage);</span><br><span class="line">        <span class="keyword">if</span> (mInterceptor.intercept(intent, rInfo, aInfo, resolvedType, inTask, callingPid,</span><br><span class="line">                callingUid, checkedOptions)) &#123;</span><br><span class="line">            <span class="comment">// activity start was intercepted, e.g. because the target user is currently in quiet</span></span><br><span class="line">            <span class="comment">// mode (turn off work) or the target application is suspended</span></span><br><span class="line">            intent = mInterceptor.mIntent;</span><br><span class="line">            rInfo = mInterceptor.mRInfo;</span><br><span class="line">            aInfo = mInterceptor.mAInfo;</span><br><span class="line">            resolvedType = mInterceptor.mResolvedType;</span><br><span class="line">            inTask = mInterceptor.mInTask;</span><br><span class="line">            callingPid = mInterceptor.mCallingPid;</span><br><span class="line">            callingUid = mInterceptor.mCallingUid;</span><br><span class="line">            checkedOptions = mInterceptor.mActivityOptions;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (abort) &#123;</span><br><span class="line">            <span class="keyword">if</span> (resultRecord != <span class="keyword">null</span>) &#123;</span><br><span class="line">                resultStack.sendActivityResultLocked(-<span class="number">1</span>, resultRecord, resultWho, requestCode,</span><br><span class="line">                        RESULT_CANCELED, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// We pretend to the caller that it was really started, but</span></span><br><span class="line">            <span class="comment">// they will just get a cancel result.</span></span><br><span class="line">            ActivityOptions.abort(checkedOptions);</span><br><span class="line">            <span class="keyword">return</span> START_ABORTED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If permissions need a review before any of the app components can run, we</span></span><br><span class="line">        <span class="comment">// launch the review activity and pass a pending intent to start the activity</span></span><br><span class="line">        <span class="comment">// we are to launching now after the review is completed.</span></span><br><span class="line">        <span class="keyword">if</span> (mService.mPermissionReviewRequired &amp;&amp; aInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mService.getPackageManagerInternalLocked().isPermissionsReviewRequired(</span><br><span class="line">                    aInfo.packageName, userId)) &#123;</span><br><span class="line">                IIntentSender target = mService.getIntentSenderLocked(</span><br><span class="line">                        ActivityManager.INTENT_SENDER_ACTIVITY, callingPackage,</span><br><span class="line">                        callingUid, userId, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">new</span> Intent[]&#123;intent&#125;,</span><br><span class="line">                        <span class="keyword">new</span> String[]&#123;resolvedType&#125;, PendingIntent.FLAG_CANCEL_CURRENT</span><br><span class="line">                                | PendingIntent.FLAG_ONE_SHOT, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> flags = intent.getFlags();</span><br><span class="line">                Intent newIntent = <span class="keyword">new</span> Intent(Intent.ACTION_REVIEW_PERMISSIONS);</span><br><span class="line">                newIntent.setFlags(flags</span><br><span class="line">                        | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);</span><br><span class="line">                newIntent.putExtra(Intent.EXTRA_PACKAGE_NAME, aInfo.packageName);</span><br><span class="line">                newIntent.putExtra(Intent.EXTRA_INTENT, <span class="keyword">new</span> IntentSender(target));</span><br><span class="line">                <span class="keyword">if</span> (resultRecord != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    newIntent.putExtra(Intent.EXTRA_RESULT_NEEDED, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                intent = newIntent;</span><br><span class="line"></span><br><span class="line">                resolvedType = <span class="keyword">null</span>;</span><br><span class="line">                callingUid = realCallingUid;</span><br><span class="line">                callingPid = realCallingPid;</span><br><span class="line"></span><br><span class="line">                rInfo = mSupervisor.resolveIntent(intent, resolvedType, userId, <span class="number">0</span>,</span><br><span class="line">                        computeResolveFilterUid(</span><br><span class="line">                                callingUid, realCallingUid, mRequest.filterCallingUid));</span><br><span class="line">                aInfo = mSupervisor.resolveActivity(intent, rInfo, startFlags,</span><br><span class="line">                        <span class="keyword">null</span> <span class="comment">/*profilerInfo*/</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_PERMISSIONS_REVIEW) &#123;</span><br><span class="line">                    Slog.i(TAG, <span class="string">&quot;START u&quot;</span> + userId + <span class="string">&quot; &#123;&quot;</span> + intent.toShortString(<span class="keyword">true</span>, <span class="keyword">true</span>,</span><br><span class="line">                            <span class="keyword">true</span>, <span class="keyword">false</span>) + <span class="string">&quot;&#125; from uid &quot;</span> + callingUid + <span class="string">&quot; on display &quot;</span></span><br><span class="line">                            + (mSupervisor.mFocusedStack == <span class="keyword">null</span></span><br><span class="line">                            ? DEFAULT_DISPLAY : mSupervisor.mFocusedStack.mDisplayId));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we have an ephemeral app, abort the process of launching the resolved intent.</span></span><br><span class="line">        <span class="comment">// Instead, launch the ephemeral installer. Once the installer is finished, it</span></span><br><span class="line">        <span class="comment">// starts either the intent we resolved here [on install error] or the ephemeral</span></span><br><span class="line">        <span class="comment">// app [on install success].</span></span><br><span class="line">        <span class="keyword">if</span> (rInfo != <span class="keyword">null</span> &amp;&amp; rInfo.auxiliaryInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            intent = createLaunchIntent(rInfo.auxiliaryInfo, ephemeralIntent,</span><br><span class="line">                    callingPackage, verificationBundle, resolvedType, userId);</span><br><span class="line">            resolvedType = <span class="keyword">null</span>;</span><br><span class="line">            callingUid = realCallingUid;</span><br><span class="line">            callingPid = realCallingPid;</span><br><span class="line"></span><br><span class="line">            aInfo = mSupervisor.resolveActivity(intent, rInfo, startFlags, <span class="keyword">null</span> <span class="comment">/*profilerInfo*/</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ActivityRecord r = <span class="keyword">new</span> ActivityRecord(mService, callerApp, callingPid, callingUid,</span><br><span class="line">                callingPackage, intent, resolvedType, aInfo, mService.getGlobalConfiguration(),</span><br><span class="line">                resultRecord, resultWho, requestCode, componentSpecified, voiceSession != <span class="keyword">null</span>,</span><br><span class="line">                mSupervisor, checkedOptions, sourceRecord);</span><br><span class="line">        <span class="keyword">if</span> (outActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            outActivity[<span class="number">0</span>] = r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (r.appTimeTracker == <span class="keyword">null</span> &amp;&amp; sourceRecord != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// If the caller didn&#x27;t specify an explicit time tracker, we want to continue</span></span><br><span class="line">            <span class="comment">// tracking under any it has.</span></span><br><span class="line">            r.appTimeTracker = sourceRecord.appTimeTracker;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ActivityStack stack = mSupervisor.mFocusedStack;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we are starting an activity that is not from the same uid as the currently resumed</span></span><br><span class="line">        <span class="comment">// one, check whether app switches are allowed.</span></span><br><span class="line">        <span class="keyword">if</span> (voiceSession == <span class="keyword">null</span> &amp;&amp; (stack.getResumedActivity() == <span class="keyword">null</span></span><br><span class="line">                || stack.getResumedActivity().info.applicationInfo.uid != realCallingUid)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mService.checkAppSwitchAllowedLocked(callingPid, callingUid,</span><br><span class="line">                    realCallingPid, realCallingUid, <span class="string">&quot;Activity start&quot;</span>)) &#123;</span><br><span class="line">                mController.addPendingActivityLaunch(<span class="keyword">new</span> PendingActivityLaunch(r,</span><br><span class="line">                        sourceRecord, startFlags, stack, callerApp));</span><br><span class="line">                ActivityOptions.abort(checkedOptions);</span><br><span class="line">                <span class="keyword">return</span> ActivityManager.START_SWITCHES_CANCELED;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mService.mDidAppSwitch) &#123;</span><br><span class="line">            <span class="comment">// This is the second allowed switch since we stopped switches,</span></span><br><span class="line">            <span class="comment">// so now just generally allow switches.  Use case: user presses</span></span><br><span class="line">            <span class="comment">// home (switches disabled, switch to home, mDidAppSwitch now true);</span></span><br><span class="line">            <span class="comment">// user taps a home icon (coming from home so allowed, we hit here</span></span><br><span class="line">            <span class="comment">// and now allow anyone to switch again).</span></span><br><span class="line">            mService.mAppSwitchesAllowedTime = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mService.mDidAppSwitch = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mController.doPendingActivityLaunches(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        maybeLogActivityStart(callingUid, callingPackage, realCallingUid, intent, callerApp, r,</span><br><span class="line">                originatingPendingIntent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> startActivity(r, sourceRecord, voiceSession, voiceInteractor, startFlags,</span><br><span class="line">                <span class="keyword">true</span> <span class="comment">/* doResume */</span>, checkedOptions, inTask, outActivity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">(<span class="keyword">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">                IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">int</span> startFlags, <span class="keyword">boolean</span> doResume, ActivityOptions options, TaskRecord inTask,</span></span></span><br><span class="line"><span class="function"><span class="params">                ActivityRecord[] outActivity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = START_CANCELED;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mService.mWindowManager.deferSurfaceLayout();</span><br><span class="line">            result = startActivityUnchecked(r, sourceRecord, voiceSession, voiceInteractor,</span><br><span class="line">                    startFlags, doResume, options, inTask, outActivity);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// If we are not able to proceed, disassociate the activity from the task. Leaving an</span></span><br><span class="line">            <span class="comment">// activity in an incomplete state can lead to issues, such as performing operations</span></span><br><span class="line">            <span class="comment">// without a window container.</span></span><br><span class="line">            <span class="keyword">final</span> ActivityStack stack = mStartActivity.getStack();</span><br><span class="line">            <span class="keyword">if</span> (!ActivityManager.isStartResultSuccessful(result) &amp;&amp; stack != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.finishActivityLocked(mStartActivity, RESULT_CANCELED,</span><br><span class="line">                        <span class="keyword">null</span> <span class="comment">/* intentResultData */</span>, <span class="string">&quot;startActivity&quot;</span>, <span class="keyword">true</span> <span class="comment">/* oomAdj */</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mService.mWindowManager.continueSurfaceLayout();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        postStartActivityProcessing(r, result, mTargetStack);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>调用startActivityUnchecked方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Note: This method should only be called from &#123;@link startActivity&#125;.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">startActivityUnchecked</span><span class="params">(<span class="keyword">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> startFlags, <span class="keyword">boolean</span> doResume, ActivityOptions options, TaskRecord inTask,</span></span></span><br><span class="line"><span class="function"><span class="params">        ActivityRecord[] outActivity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    setInitialState(r, options, inTask, doResume, startFlags, sourceRecord, voiceSession,</span><br><span class="line">            voiceInteractor);</span><br><span class="line"></span><br><span class="line">    computeLaunchingTaskFlags();</span><br><span class="line"></span><br><span class="line">    computeSourceStack();</span><br><span class="line"></span><br><span class="line">    mIntent.setFlags(mLaunchFlags);</span><br><span class="line"></span><br><span class="line">    ActivityRecord reusedActivity = getReusableIntentActivity();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> preferredWindowingMode = WINDOWING_MODE_UNDEFINED;</span><br><span class="line">    <span class="keyword">int</span> preferredLaunchDisplayId = DEFAULT_DISPLAY;</span><br><span class="line">    <span class="keyword">if</span> (mOptions != <span class="keyword">null</span>) &#123;</span><br><span class="line">        preferredWindowingMode = mOptions.getLaunchWindowingMode();</span><br><span class="line">        preferredLaunchDisplayId = mOptions.getLaunchDisplayId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// windowing mode and preferred launch display values from &#123;@link LaunchParams&#125; take</span></span><br><span class="line">    <span class="comment">// priority over those specified in &#123;@link ActivityOptions&#125;.</span></span><br><span class="line">    <span class="keyword">if</span> (!mLaunchParams.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mLaunchParams.hasPreferredDisplay()) &#123;</span><br><span class="line">            preferredLaunchDisplayId = mLaunchParams.mPreferredDisplayId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mLaunchParams.hasWindowingMode()) &#123;</span><br><span class="line">            preferredWindowingMode = mLaunchParams.mWindowingMode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (reusedActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// When the flags NEW_TASK and CLEAR_TASK are set, then the task gets reused but</span></span><br><span class="line">        <span class="comment">// still needs to be a lock task mode violation since the task gets cleared out and</span></span><br><span class="line">        <span class="comment">// the device would otherwise leave the locked task.</span></span><br><span class="line">        <span class="keyword">if</span> (mService.getLockTaskController().isLockTaskModeViolation(reusedActivity.getTask(),</span><br><span class="line">                (mLaunchFlags &amp; (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK))</span><br><span class="line">                        == (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK))) &#123;</span><br><span class="line">            Slog.e(TAG, <span class="string">&quot;startActivityUnchecked: Attempt to violate Lock Task Mode&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> START_RETURN_LOCK_TASK_MODE_VIOLATION;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// True if we are clearing top and resetting of a standard (default) launch mode</span></span><br><span class="line">        <span class="comment">// (&#123;@code LAUNCH_MULTIPLE&#125;) activity. The existing activity will be finished.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> clearTopAndResetStandardLaunchMode =</span><br><span class="line">                (mLaunchFlags &amp; (FLAG_ACTIVITY_CLEAR_TOP | FLAG_ACTIVITY_RESET_TASK_IF_NEEDED))</span><br><span class="line">                        == (FLAG_ACTIVITY_CLEAR_TOP | FLAG_ACTIVITY_RESET_TASK_IF_NEEDED)</span><br><span class="line">                &amp;&amp; mLaunchMode == LAUNCH_MULTIPLE;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If mStartActivity does not have a task associated with it, associate it with the</span></span><br><span class="line">        <span class="comment">// reused activity&#x27;s task. Do not do so if we&#x27;re clearing top and resetting for a</span></span><br><span class="line">        <span class="comment">// standard launchMode activity.</span></span><br><span class="line">        <span class="keyword">if</span> (mStartActivity.getTask() == <span class="keyword">null</span> &amp;&amp; !clearTopAndResetStandardLaunchMode) &#123;</span><br><span class="line">            mStartActivity.setTask(reusedActivity.getTask());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (reusedActivity.getTask().intent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// This task was started because of movement of the activity based on affinity...</span></span><br><span class="line">            <span class="comment">// Now that we are actually launching it, we can assign the base intent.</span></span><br><span class="line">            reusedActivity.getTask().setIntent(mStartActivity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This code path leads to delivering a new intent, we want to make sure we schedule it</span></span><br><span class="line">        <span class="comment">// as the first operation, in case the activity will be resumed as a result of later</span></span><br><span class="line">        <span class="comment">// operations.</span></span><br><span class="line">        <span class="keyword">if</span> ((mLaunchFlags &amp; FLAG_ACTIVITY_CLEAR_TOP) != <span class="number">0</span></span><br><span class="line">                || isDocumentLaunchesIntoExisting(mLaunchFlags)</span><br><span class="line">                || isLaunchModeOneOf(LAUNCH_SINGLE_INSTANCE, LAUNCH_SINGLE_TASK)) &#123;</span><br><span class="line">            <span class="keyword">final</span> TaskRecord task = reusedActivity.getTask();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// In this situation we want to remove all activities from the task up to the one</span></span><br><span class="line">            <span class="comment">// being started. In most cases this means we are resetting the task to its initial</span></span><br><span class="line">            <span class="comment">// state.</span></span><br><span class="line">            <span class="keyword">final</span> ActivityRecord top = task.performClearTaskForReuseLocked(mStartActivity,</span><br><span class="line">                    mLaunchFlags);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// The above code can remove &#123;@code reusedActivity&#125; from the task, leading to the</span></span><br><span class="line">            <span class="comment">// the &#123;@code ActivityRecord&#125; removing its reference to the &#123;@code TaskRecord&#125;. The</span></span><br><span class="line">            <span class="comment">// task reference is needed in the call below to</span></span><br><span class="line">            <span class="comment">// &#123;@link setTargetStackAndMoveToFrontIfNeeded&#125;.</span></span><br><span class="line">            <span class="keyword">if</span> (reusedActivity.getTask() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                reusedActivity.setTask(task);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (top != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (top.frontOfTask) &#123;</span><br><span class="line">                    <span class="comment">// Activity aliases may mean we use different intents for the top activity,</span></span><br><span class="line">                    <span class="comment">// so make sure the task now has the identity of the new intent.</span></span><br><span class="line">                    top.getTask().setIntent(mStartActivity);</span><br><span class="line">                &#125;</span><br><span class="line">                deliverNewIntent(top);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mSupervisor.sendPowerHintForLaunchStartIfNeeded(<span class="keyword">false</span> <span class="comment">/* forceSend */</span>, reusedActivity);</span><br><span class="line"></span><br><span class="line">        reusedActivity = setTargetStackAndMoveToFrontIfNeeded(reusedActivity);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ActivityRecord outResult =</span><br><span class="line">                outActivity != <span class="keyword">null</span> &amp;&amp; outActivity.length &gt; <span class="number">0</span> ? outActivity[<span class="number">0</span>] : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// When there is a reused activity and the current result is a trampoline activity,</span></span><br><span class="line">        <span class="comment">// set the reused activity as the result.</span></span><br><span class="line">        <span class="keyword">if</span> (outResult != <span class="keyword">null</span> &amp;&amp; (outResult.finishing || outResult.noDisplay)) &#123;</span><br><span class="line">            outActivity[<span class="number">0</span>] = reusedActivity;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((mStartFlags &amp; START_FLAG_ONLY_IF_NEEDED) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// We don&#x27;t need to start a new activity, and the client said not to do anything</span></span><br><span class="line">            <span class="comment">// if that is the case, so this is it!  And for paranoia, make sure we have</span></span><br><span class="line">            <span class="comment">// correctly resumed the top activity.</span></span><br><span class="line">            resumeTargetStackIfNeeded();</span><br><span class="line">            <span class="keyword">return</span> START_RETURN_INTENT_TO_CALLER;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (reusedActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            setTaskFromIntentActivity(reusedActivity);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!mAddingToTask &amp;&amp; mReuseTask == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// We didn&#x27;t do anything...  but it was needed (a.k.a., client don&#x27;t use that</span></span><br><span class="line">                <span class="comment">// intent!)  And for paranoia, make sure we have correctly resumed the top activity.</span></span><br><span class="line"></span><br><span class="line">                resumeTargetStackIfNeeded();</span><br><span class="line">                <span class="keyword">if</span> (outActivity != <span class="keyword">null</span> &amp;&amp; outActivity.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    outActivity[<span class="number">0</span>] = reusedActivity;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> mMovedToFront ? START_TASK_TO_FRONT : START_DELIVERED_TO_TOP;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mStartActivity.packageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityStack sourceStack = mStartActivity.resultTo != <span class="keyword">null</span></span><br><span class="line">                ? mStartActivity.resultTo.getStack() : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (sourceStack != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sourceStack.sendActivityResultLocked(-<span class="number">1</span> <span class="comment">/* callingUid */</span>, mStartActivity.resultTo,</span><br><span class="line">                    mStartActivity.resultWho, mStartActivity.requestCode, RESULT_CANCELED,</span><br><span class="line">                    <span class="keyword">null</span> <span class="comment">/* data */</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ActivityOptions.abort(mOptions);</span><br><span class="line">        <span class="keyword">return</span> START_CLASS_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the activity being launched is the same as the one currently at the top, then</span></span><br><span class="line">    <span class="comment">// we need to check if it should only be launched once.</span></span><br><span class="line">    <span class="keyword">final</span> ActivityStack topStack = mSupervisor.mFocusedStack;</span><br><span class="line">    <span class="keyword">final</span> ActivityRecord topFocused = topStack.getTopActivity();</span><br><span class="line">    <span class="keyword">final</span> ActivityRecord top = topStack.topRunningNonDelayedActivityLocked(mNotTop);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> dontStart = top != <span class="keyword">null</span> &amp;&amp; mStartActivity.resultTo == <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; top.realActivity.equals(mStartActivity.realActivity)</span><br><span class="line">            &amp;&amp; top.userId == mStartActivity.userId</span><br><span class="line">            &amp;&amp; top.app != <span class="keyword">null</span> &amp;&amp; top.app.thread != <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; ((mLaunchFlags &amp; FLAG_ACTIVITY_SINGLE_TOP) != <span class="number">0</span></span><br><span class="line">            || isLaunchModeOneOf(LAUNCH_SINGLE_TOP, LAUNCH_SINGLE_TASK));</span><br><span class="line">    <span class="keyword">if</span> (dontStart) &#123;</span><br><span class="line">        <span class="comment">// For paranoia, make sure we have correctly resumed the top activity.</span></span><br><span class="line">        topStack.mLastPausedActivity = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (mDoResume) &#123;</span><br><span class="line">            mSupervisor.resumeFocusedStackTopActivityLocked();</span><br><span class="line">        &#125;</span><br><span class="line">        ActivityOptions.abort(mOptions);</span><br><span class="line">        <span class="keyword">if</span> ((mStartFlags &amp; START_FLAG_ONLY_IF_NEEDED) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// We don&#x27;t need to start a new activity, and the client said not to do</span></span><br><span class="line">            <span class="comment">// anything if that is the case, so this is it!</span></span><br><span class="line">            <span class="keyword">return</span> START_RETURN_INTENT_TO_CALLER;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        deliverNewIntent(top);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Don&#x27;t use mStartActivity.task to show the toast. We&#x27;re not starting a new activity</span></span><br><span class="line">        <span class="comment">// but reusing &#x27;top&#x27;. Fields in mStartActivity may not be fully initialized.</span></span><br><span class="line">        mSupervisor.handleNonResizableTaskIfNeeded(top.getTask(), preferredWindowingMode,</span><br><span class="line">                preferredLaunchDisplayId, topStack);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> START_DELIVERED_TO_TOP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> newTask = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">final</span> TaskRecord taskToAffiliate = (mLaunchTaskBehind &amp;&amp; mSourceRecord != <span class="keyword">null</span>)</span><br><span class="line">            ? mSourceRecord.getTask() : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Should this be considered a new task?</span></span><br><span class="line">    <span class="keyword">int</span> result = START_SUCCESS;</span><br><span class="line">    <span class="keyword">if</span> (mStartActivity.resultTo == <span class="keyword">null</span> &amp;&amp; mInTask == <span class="keyword">null</span> &amp;&amp; !mAddingToTask</span><br><span class="line">            &amp;&amp; (mLaunchFlags &amp; FLAG_ACTIVITY_NEW_TASK) != <span class="number">0</span>) &#123;</span><br><span class="line">        newTask = <span class="keyword">true</span>;</span><br><span class="line">        result = setTaskFromReuseOrCreateNewTask(taskToAffiliate, topStack);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mSourceRecord != <span class="keyword">null</span>) &#123;</span><br><span class="line">        result = setTaskFromSourceRecord();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mInTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">        result = setTaskFromInTask();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// This not being started from an existing activity, and not part of a new task...</span></span><br><span class="line">        <span class="comment">// just put it in the top task, though these days this case should never happen.</span></span><br><span class="line">        setTaskToCurrentTopOrCreateNewTask();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result != START_SUCCESS) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mService.grantUriPermissionFromIntentLocked(mCallingUid, mStartActivity.packageName,</span><br><span class="line">            mIntent, mStartActivity.getUriPermissionsLocked(), mStartActivity.userId);</span><br><span class="line">    mService.grantEphemeralAccessLocked(mStartActivity.userId, mIntent,</span><br><span class="line">            mStartActivity.appInfo.uid, UserHandle.getAppId(mCallingUid));</span><br><span class="line">    <span class="keyword">if</span> (newTask) &#123;</span><br><span class="line">        EventLog.writeEvent(EventLogTags.AM_CREATE_TASK, mStartActivity.userId,</span><br><span class="line">                mStartActivity.getTask().taskId);</span><br><span class="line">    &#125;</span><br><span class="line">    ActivityStack.logStartActivity(</span><br><span class="line">            EventLogTags.AM_CREATE_ACTIVITY, mStartActivity, mStartActivity.getTask());</span><br><span class="line">    mTargetStack.mLastPausedActivity = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    mSupervisor.sendPowerHintForLaunchStartIfNeeded(<span class="keyword">false</span> <span class="comment">/* forceSend */</span>, mStartActivity);</span><br><span class="line"></span><br><span class="line">    mTargetStack.startActivityLocked(mStartActivity, topFocused, newTask, mKeepCurTransition,</span><br><span class="line">            mOptions);</span><br><span class="line">    <span class="keyword">if</span> (mDoResume) &#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityRecord topTaskActivity =</span><br><span class="line">                mStartActivity.getTask().topRunningActivityLocked();</span><br><span class="line">        <span class="keyword">if</span> (!mTargetStack.isFocusable()</span><br><span class="line">                || (topTaskActivity != <span class="keyword">null</span> &amp;&amp; topTaskActivity.mTaskOverlay</span><br><span class="line">                &amp;&amp; mStartActivity != topTaskActivity)) &#123;</span><br><span class="line">            <span class="comment">// If the activity is not focusable, we can&#x27;t resume it, but still would like to</span></span><br><span class="line">            <span class="comment">// make sure it becomes visible as it starts (this will also trigger entry</span></span><br><span class="line">            <span class="comment">// animation). An example of this are PIP activities.</span></span><br><span class="line">            <span class="comment">// Also, we don&#x27;t want to resume activities in a task that currently has an overlay</span></span><br><span class="line">            <span class="comment">// as the starting activity just needs to be in the visible paused state until the</span></span><br><span class="line">            <span class="comment">// over is removed.</span></span><br><span class="line">            mTargetStack.ensureActivitiesVisibleLocked(<span class="keyword">null</span>, <span class="number">0</span>, !PRESERVE_WINDOWS);</span><br><span class="line">            <span class="comment">// Go ahead and tell window manager to execute app transition for this activity</span></span><br><span class="line">            <span class="comment">// since the app transition will not be triggered through the resume channel.</span></span><br><span class="line">            mService.mWindowManager.executeAppTransition();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If the target stack was not previously focusable (previous top running activity</span></span><br><span class="line">            <span class="comment">// on that stack was not visible) then any prior calls to move the stack to the</span></span><br><span class="line">            <span class="comment">// will not update the focused stack.  If starting the new activity now allows the</span></span><br><span class="line">            <span class="comment">// task stack to be focusable, then ensure that we now update the focused stack</span></span><br><span class="line">            <span class="comment">// accordingly.</span></span><br><span class="line">            <span class="keyword">if</span> (mTargetStack.isFocusable() &amp;&amp; !mSupervisor.isFocusedStack(mTargetStack)) &#123;</span><br><span class="line">                mTargetStack.moveToFront(<span class="string">&quot;startActivityUnchecked&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mSupervisor.resumeFocusedStackTopActivityLocked(mTargetStack, mStartActivity,</span><br><span class="line">                    mOptions);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mStartActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mSupervisor.mRecentTasks.add(mStartActivity.getTask());</span><br><span class="line">    &#125;</span><br><span class="line">    mSupervisor.updateUserStackLocked(mStartActivity.userId, mTargetStack);</span><br><span class="line"></span><br><span class="line">    mSupervisor.handleNonResizableTaskIfNeeded(mStartActivity.getTask(), preferredWindowingMode,</span><br><span class="line">            preferredLaunchDisplayId, mTargetStack);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> START_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>继续调用resumeFocusedStackTopActivityLocked</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">resumeFocusedStackTopActivityLocked</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ActivityStack targetStack, ActivityRecord target, ActivityOptions targetOptions)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!readyToResume()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (targetStack != <span class="keyword">null</span> &amp;&amp; isFocusedStack(targetStack)) &#123;</span><br><span class="line">        <span class="keyword">return</span> targetStack.resumeTopActivityUncheckedLocked(target, targetOptions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ActivityRecord r = mFocusedStack.topRunningActivityLocked();</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="keyword">null</span> || !r.isState(RESUMED)) &#123;</span><br><span class="line">        mFocusedStack.resumeTopActivityUncheckedLocked(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.isState(RESUMED)) &#123;</span><br><span class="line">        <span class="comment">// Kick off any lingering app transitions form the MoveTaskToFront operation.</span></span><br><span class="line">        mFocusedStack.executeAppTransition(targetOptions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Ensure that the top activity in the stack is resumed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prev The previously resumed activity, for when in the process</span></span><br><span class="line"><span class="comment">     * of pausing; can be null to call from elsewhere.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> options Activity options.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Returns true if something is being resumed, or false if</span></span><br><span class="line"><span class="comment">     * nothing happened.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">NOTE:</span> It is not safe to call this method directly as it can cause an activity in a</span></span><br><span class="line"><span class="comment">     *       non-focused stack to be resumed.</span></span><br><span class="line"><span class="comment">     *       Use &#123;<span class="doctag">@link</span> ActivityStackSupervisor#resumeFocusedStackTopActivityLocked&#125; to resume the</span></span><br><span class="line"><span class="comment">     *       right activity for the current system state.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GuardedBy(&quot;mService&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">resumeTopActivityUncheckedLocked</span><span class="params">(ActivityRecord prev, ActivityOptions options)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mStackSupervisor.inResumeTopActivity) &#123;</span><br><span class="line">            <span class="comment">// Don&#x27;t even start recursing.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Protect against recursion.</span></span><br><span class="line">            mStackSupervisor.inResumeTopActivity = <span class="keyword">true</span>;</span><br><span class="line">            result = resumeTopActivityInnerLocked(prev, options);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// When resuming the top activity, it may be necessary to pause the top activity (for</span></span><br><span class="line">            <span class="comment">// example, returning to the lock screen. We suppress the normal pause logic in</span></span><br><span class="line">            <span class="comment">// &#123;@link #resumeTopActivityUncheckedLocked&#125;, since the top activity is resumed at the</span></span><br><span class="line">            <span class="comment">// end. We call the &#123;@link ActivityStackSupervisor#checkReadyForSleepLocked&#125; again here</span></span><br><span class="line">            <span class="comment">// to ensure any necessary pause logic occurs. In the case where the Activity will be</span></span><br><span class="line">            <span class="comment">// shown regardless of the lock screen, the call to</span></span><br><span class="line">            <span class="comment">// &#123;@link ActivityStackSupervisor#checkReadyForSleepLocked&#125; is skipped.</span></span><br><span class="line">            <span class="keyword">final</span> ActivityRecord next = topRunningActivityLocked(<span class="keyword">true</span> <span class="comment">/* focusableOnly */</span>);</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="keyword">null</span> || !next.canTurnScreenOn()) &#123;</span><br><span class="line">                checkReadyForSleep();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mStackSupervisor.inResumeTopActivity = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GuardedBy(&quot;mService&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">resumeTopActivityInnerLocked</span><span class="params">(ActivityRecord prev, ActivityOptions options)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mService.mBooting &amp;&amp; !mService.mBooted) &#123;</span><br><span class="line">            <span class="comment">// Not ready yet!</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Find the next top-most activity to resume in this stack that is not finishing and is</span></span><br><span class="line">        <span class="comment">// focusable. If it is not focusable, we will fall into the case below to resume the</span></span><br><span class="line">        <span class="comment">// top activity in the next focusable task.</span></span><br><span class="line">        <span class="keyword">final</span> ActivityRecord next = topRunningActivityLocked(<span class="keyword">true</span> <span class="comment">/* focusableOnly */</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> hasRunningActivity = next != <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Maybe this entire condition can get removed?</span></span><br><span class="line">        <span class="keyword">if</span> (hasRunningActivity &amp;&amp; !isAttached()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mStackSupervisor.cancelInitializingActivities();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Remember how we&#x27;ll process this pause/resume situation, and ensure</span></span><br><span class="line">        <span class="comment">// that the state is reset however we wind up proceeding.</span></span><br><span class="line">        <span class="keyword">boolean</span> userLeaving = mStackSupervisor.mUserLeaving;</span><br><span class="line">        mStackSupervisor.mUserLeaving = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!hasRunningActivity) &#123;</span><br><span class="line">            <span class="comment">// There are no activities left in the stack, let&#x27;s look somewhere else.</span></span><br><span class="line">            <span class="keyword">return</span> resumeTopActivityInNextFocusableStack(prev, options, <span class="string">&quot;noMoreActivities&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        next.delayedResume = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the top activity is the resumed one, nothing to do.</span></span><br><span class="line">        <span class="keyword">if</span> (mResumedActivity == next &amp;&amp; next.isState(RESUMED)</span><br><span class="line">                &amp;&amp; mStackSupervisor.allResumedActivitiesComplete()) &#123;</span><br><span class="line">            <span class="comment">// Make sure we have executed any pending transitions, since there</span></span><br><span class="line">            <span class="comment">// should be nothing left to do at this point.</span></span><br><span class="line">            executeAppTransition(options);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_STATES) Slog.d(TAG_STATES,</span><br><span class="line">                    <span class="string">&quot;resumeTopActivityLocked: Top activity resumed &quot;</span> + next);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we are sleeping, and there is no resumed activity, and the top</span></span><br><span class="line">        <span class="comment">// activity is paused, well that is the state we want.</span></span><br><span class="line">        <span class="keyword">if</span> (shouldSleepOrShutDownActivities()</span><br><span class="line">                &amp;&amp; mLastPausedActivity == next</span><br><span class="line">                &amp;&amp; mStackSupervisor.allPausedActivitiesComplete()) &#123;</span><br><span class="line">            <span class="comment">// Make sure we have executed any pending transitions, since there</span></span><br><span class="line">            <span class="comment">// should be nothing left to do at this point.</span></span><br><span class="line">            executeAppTransition(options);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_STATES) Slog.d(TAG_STATES,</span><br><span class="line">                    <span class="string">&quot;resumeTopActivityLocked: Going to sleep and all paused&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure that the user who owns this activity is started.  If not,</span></span><br><span class="line">        <span class="comment">// we will just leave it as is because someone should be bringing</span></span><br><span class="line">        <span class="comment">// another user&#x27;s activities to the top of the stack.</span></span><br><span class="line">        <span class="keyword">if</span> (!mService.mUserController.hasStartedUserState(next.userId)) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;Skipping resume of top activity &quot;</span> + next</span><br><span class="line">                    + <span class="string">&quot;: user &quot;</span> + next.userId + <span class="string">&quot; is stopped&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The activity may be waiting for stop, but that is no longer</span></span><br><span class="line">        <span class="comment">// appropriate for it.</span></span><br><span class="line">        mStackSupervisor.mStoppingActivities.remove(next);</span><br><span class="line">        mStackSupervisor.mGoingToSleepActivities.remove(next);</span><br><span class="line">        next.sleeping = <span class="keyword">false</span>;</span><br><span class="line">        mStackSupervisor.mActivitiesWaitingForVisibleActivity.remove(next);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DEBUG_SWITCH) Slog.v(TAG_SWITCH, <span class="string">&quot;Resuming &quot;</span> + next);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we are currently pausing an activity, then don&#x27;t do anything until that is done.</span></span><br><span class="line">        <span class="keyword">if</span> (!mStackSupervisor.allPausedActivitiesComplete()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_SWITCH || DEBUG_PAUSE || DEBUG_STATES) Slog.v(TAG_PAUSE,</span><br><span class="line">                    <span class="string">&quot;resumeTopActivityLocked: Skip resume: some activity pausing.&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mStackSupervisor.setLaunchSource(next.info.applicationInfo.uid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> lastResumedCanPip = <span class="keyword">false</span>;</span><br><span class="line">        ActivityRecord lastResumed = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">final</span> ActivityStack lastFocusedStack = mStackSupervisor.getLastStack();</span><br><span class="line">        <span class="keyword">if</span> (lastFocusedStack != <span class="keyword">null</span> &amp;&amp; lastFocusedStack != <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// So, why aren&#x27;t we using prev here??? See the param comment on the method. prev doesn&#x27;t</span></span><br><span class="line">            <span class="comment">// represent the last resumed activity. However, the last focus stack does if it isn&#x27;t null.</span></span><br><span class="line">            lastResumed = lastFocusedStack.mResumedActivity;</span><br><span class="line">            <span class="keyword">if</span> (userLeaving &amp;&amp; inMultiWindowMode() &amp;&amp; lastFocusedStack.shouldBeVisible(next)) &#123;</span><br><span class="line">                <span class="comment">// The user isn&#x27;t leaving if this stack is the multi-window mode and the last</span></span><br><span class="line">                <span class="comment">// focused stack should still be visible.</span></span><br><span class="line">                <span class="keyword">if</span>(DEBUG_USER_LEAVING) Slog.i(TAG_USER_LEAVING, <span class="string">&quot;Overriding userLeaving to false&quot;</span></span><br><span class="line">                        + <span class="string">&quot; next=&quot;</span> + next + <span class="string">&quot; lastResumed=&quot;</span> + lastResumed);</span><br><span class="line">                userLeaving = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            lastResumedCanPip = lastResumed != <span class="keyword">null</span> &amp;&amp; lastResumed.checkEnterPictureInPictureState(</span><br><span class="line">                    <span class="string">&quot;resumeTopActivity&quot;</span>, userLeaving <span class="comment">/* beforeStopping */</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// If the flag RESUME_WHILE_PAUSING is set, then continue to schedule the previous activity</span></span><br><span class="line">        <span class="comment">// to be paused, while at the same time resuming the new resume activity only if the</span></span><br><span class="line">        <span class="comment">// previous activity can&#x27;t go into Pip since we want to give Pip activities a chance to</span></span><br><span class="line">        <span class="comment">// enter Pip before resuming the next activity.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> resumeWhilePausing = (next.info.flags &amp; FLAG_RESUME_WHILE_PAUSING) != <span class="number">0</span></span><br><span class="line">                &amp;&amp; !lastResumedCanPip;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> pausing = mStackSupervisor.pauseBackStacks(userLeaving, next, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (mResumedActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_STATES) Slog.d(TAG_STATES,</span><br><span class="line">                    <span class="string">&quot;resumeTopActivityLocked: Pausing &quot;</span> + mResumedActivity);</span><br><span class="line">            pausing |= startPausingLocked(userLeaving, <span class="keyword">false</span>, next, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pausing &amp;&amp; !resumeWhilePausing) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_SWITCH || DEBUG_STATES) Slog.v(TAG_STATES,</span><br><span class="line">                    <span class="string">&quot;resumeTopActivityLocked: Skip resume: need to start pausing&quot;</span>);</span><br><span class="line">            <span class="comment">// At this point we want to put the upcoming activity&#x27;s process</span></span><br><span class="line">            <span class="comment">// at the top of the LRU list, since we know we will be needing it</span></span><br><span class="line">            <span class="comment">// very soon and it would be a waste to let it get killed if it</span></span><br><span class="line">            <span class="comment">// happens to be sitting towards the end.</span></span><br><span class="line">            <span class="keyword">if</span> (next.app != <span class="keyword">null</span> &amp;&amp; next.app.thread != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mService.updateLruProcessLocked(next.app, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();</span><br><span class="line">            <span class="keyword">if</span> (lastResumed != <span class="keyword">null</span>) &#123;</span><br><span class="line">                lastResumed.setWillCloseOrEnterPip(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mResumedActivity == next &amp;&amp; next.isState(RESUMED)</span><br><span class="line">                &amp;&amp; mStackSupervisor.allResumedActivitiesComplete()) &#123;</span><br><span class="line">            <span class="comment">// It is possible for the activity to be resumed when we paused back stacks above if the</span></span><br><span class="line">            <span class="comment">// next activity doesn&#x27;t have to wait for pause to complete.</span></span><br><span class="line">            <span class="comment">// So, nothing else to-do except:</span></span><br><span class="line">            <span class="comment">// Make sure we have executed any pending transitions, since there</span></span><br><span class="line">            <span class="comment">// should be nothing left to do at this point.</span></span><br><span class="line">            executeAppTransition(options);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_STATES) Slog.d(TAG_STATES,</span><br><span class="line">                    <span class="string">&quot;resumeTopActivityLocked: Top activity resumed (dontWaitForPause) &quot;</span> + next);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the most recent activity was noHistory but was only stopped rather</span></span><br><span class="line">        <span class="comment">// than stopped+finished because the device went to sleep, we need to make</span></span><br><span class="line">        <span class="comment">// sure to finish it as we&#x27;re making a new activity topmost.</span></span><br><span class="line">        <span class="keyword">if</span> (shouldSleepActivities() &amp;&amp; mLastNoHistoryActivity != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                !mLastNoHistoryActivity.finishing) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_STATES) Slog.d(TAG_STATES,</span><br><span class="line">                    <span class="string">&quot;no-history finish of &quot;</span> + mLastNoHistoryActivity + <span class="string">&quot; on new resume&quot;</span>);</span><br><span class="line">            requestFinishActivityLocked(mLastNoHistoryActivity.appToken, Activity.RESULT_CANCELED,</span><br><span class="line">                    <span class="keyword">null</span>, <span class="string">&quot;resume-no-history&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            mLastNoHistoryActivity = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (prev != <span class="keyword">null</span> &amp;&amp; prev != next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mStackSupervisor.mActivitiesWaitingForVisibleActivity.contains(prev)</span><br><span class="line">                    &amp;&amp; next != <span class="keyword">null</span> &amp;&amp; !next.nowVisible) &#123;</span><br><span class="line">                mStackSupervisor.mActivitiesWaitingForVisibleActivity.add(prev);</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_SWITCH) Slog.v(TAG_SWITCH,</span><br><span class="line">                        <span class="string">&quot;Resuming top, waiting visible to hide: &quot;</span> + prev);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// The next activity is already visible, so hide the previous</span></span><br><span class="line">                <span class="comment">// activity&#x27;s windows right now so we can show the new one ASAP.</span></span><br><span class="line">                <span class="comment">// We only do this if the previous is finishing, which should mean</span></span><br><span class="line">                <span class="comment">// it is on top of the one being resumed so hiding it quickly</span></span><br><span class="line">                <span class="comment">// is good.  Otherwise, we want to do the normal route of allowing</span></span><br><span class="line">                <span class="comment">// the resumed activity to be shown so we can decide if the</span></span><br><span class="line">                <span class="comment">// previous should actually be hidden depending on whether the</span></span><br><span class="line">                <span class="comment">// new one is found to be full-screen or not.</span></span><br><span class="line">                <span class="keyword">if</span> (prev.finishing) &#123;</span><br><span class="line">                    prev.setVisibility(<span class="keyword">false</span>);</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_SWITCH) Slog.v(TAG_SWITCH,</span><br><span class="line">                            <span class="string">&quot;Not waiting for visible to hide: &quot;</span> + prev + <span class="string">&quot;, waitingVisible=&quot;</span></span><br><span class="line">                            + mStackSupervisor.mActivitiesWaitingForVisibleActivity.contains(prev)</span><br><span class="line">                            + <span class="string">&quot;, nowVisible=&quot;</span> + next.nowVisible);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_SWITCH) Slog.v(TAG_SWITCH,</span><br><span class="line">                            <span class="string">&quot;Previous already visible but still waiting to hide: &quot;</span> + prev</span><br><span class="line">                            + <span class="string">&quot;, waitingVisible=&quot;</span></span><br><span class="line">                            + mStackSupervisor.mActivitiesWaitingForVisibleActivity.contains(prev)</span><br><span class="line">                            + <span class="string">&quot;, nowVisible=&quot;</span> + next.nowVisible);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Launching this app&#x27;s activity, make sure the app is no longer</span></span><br><span class="line">        <span class="comment">// considered stopped.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AppGlobals.getPackageManager().setPackageStoppedState(</span><br><span class="line">                    next.packageName, <span class="keyword">false</span>, next.userId); <span class="comment">/* <span class="doctag">TODO:</span> Verify if correct userid */</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e1) &#123;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;Failed trying to unstop package &quot;</span></span><br><span class="line">                    + next.packageName + <span class="string">&quot;: &quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We are starting up the next activity, so tell the window manager</span></span><br><span class="line">        <span class="comment">// that the previous one will be hidden soon.  This way it can know</span></span><br><span class="line">        <span class="comment">// to ignore it when computing the desired screen orientation.</span></span><br><span class="line">        <span class="keyword">boolean</span> anim = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prev.finishing) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_TRANSITION) Slog.v(TAG_TRANSITION,</span><br><span class="line">                        <span class="string">&quot;Prepare close transition: prev=&quot;</span> + prev);</span><br><span class="line">                <span class="keyword">if</span> (mStackSupervisor.mNoAnimActivities.contains(prev)) &#123;</span><br><span class="line">                    anim = <span class="keyword">false</span>;</span><br><span class="line">                    mWindowManager.prepareAppTransition(TRANSIT_NONE, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mWindowManager.prepareAppTransition(prev.getTask() == next.getTask()</span><br><span class="line">                            ? TRANSIT_ACTIVITY_CLOSE</span><br><span class="line">                            : TRANSIT_TASK_CLOSE, <span class="keyword">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                prev.setVisibility(<span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_TRANSITION) Slog.v(TAG_TRANSITION,</span><br><span class="line">                        <span class="string">&quot;Prepare open transition: prev=&quot;</span> + prev);</span><br><span class="line">                <span class="keyword">if</span> (mStackSupervisor.mNoAnimActivities.contains(next)) &#123;</span><br><span class="line">                    anim = <span class="keyword">false</span>;</span><br><span class="line">                    mWindowManager.prepareAppTransition(TRANSIT_NONE, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mWindowManager.prepareAppTransition(prev.getTask() == next.getTask()</span><br><span class="line">                            ? TRANSIT_ACTIVITY_OPEN</span><br><span class="line">                            : next.mLaunchTaskBehind</span><br><span class="line">                                    ? TRANSIT_TASK_OPEN_BEHIND</span><br><span class="line">                                    : TRANSIT_TASK_OPEN, <span class="keyword">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_TRANSITION) Slog.v(TAG_TRANSITION, <span class="string">&quot;Prepare open transition: no previous&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (mStackSupervisor.mNoAnimActivities.contains(next)) &#123;</span><br><span class="line">                anim = <span class="keyword">false</span>;</span><br><span class="line">                mWindowManager.prepareAppTransition(TRANSIT_NONE, <span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mWindowManager.prepareAppTransition(TRANSIT_ACTIVITY_OPEN, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (anim) &#123;</span><br><span class="line">            next.applyOptionsLocked();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next.clearOptionsLocked();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mStackSupervisor.mNoAnimActivities.clear();</span><br><span class="line"></span><br><span class="line">        ActivityStack lastStack = mStackSupervisor.getLastStack();</span><br><span class="line">        <span class="keyword">if</span> (next.app != <span class="keyword">null</span> &amp;&amp; next.app.thread != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_SWITCH) Slog.v(TAG_SWITCH, <span class="string">&quot;Resume running: &quot;</span> + next</span><br><span class="line">                    + <span class="string">&quot; stopped=&quot;</span> + next.stopped + <span class="string">&quot; visible=&quot;</span> + next.visible);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If the previous activity is translucent, force a visibility update of</span></span><br><span class="line">            <span class="comment">// the next activity, so that it&#x27;s added to WM&#x27;s opening app list, and</span></span><br><span class="line">            <span class="comment">// transition animation can be set up properly.</span></span><br><span class="line">            <span class="comment">// For example, pressing Home button with a translucent activity in focus.</span></span><br><span class="line">            <span class="comment">// Launcher is already visible in this case. If we don&#x27;t add it to opening</span></span><br><span class="line">            <span class="comment">// apps, maybeUpdateTransitToWallpaper() will fail to identify this as a</span></span><br><span class="line">            <span class="comment">// TRANSIT_WALLPAPER_OPEN animation, and run some funny animation.</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> lastActivityTranslucent = lastStack != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; (lastStack.inMultiWindowMode()</span><br><span class="line">                    || (lastStack.mLastPausedActivity != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; !lastStack.mLastPausedActivity.fullscreen));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// The contained logic must be synchronized, since we are both changing the visibility</span></span><br><span class="line">            <span class="comment">// and updating the &#123;@link Configuration&#125;. &#123;@link ActivityRecord#setVisibility&#125; will</span></span><br><span class="line">            <span class="comment">// ultimately cause the client code to schedule a layout. Since layouts retrieve the</span></span><br><span class="line">            <span class="comment">// current &#123;@link Configuration&#125;, we must ensure that the below code updates it before</span></span><br><span class="line">            <span class="comment">// the layout can occur.</span></span><br><span class="line">            <span class="keyword">synchronized</span>(mWindowManager.getWindowManagerLock()) &#123;</span><br><span class="line">                <span class="comment">// This activity is now becoming visible.</span></span><br><span class="line">                <span class="keyword">if</span> (!next.visible || next.stopped || lastActivityTranslucent) &#123;</span><br><span class="line">                    next.setVisibility(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// schedule launch ticks to collect information about slow apps.</span></span><br><span class="line">                next.startLaunchTickingLocked();</span><br><span class="line"></span><br><span class="line">                ActivityRecord lastResumedActivity =</span><br><span class="line">                        lastStack == <span class="keyword">null</span> ? <span class="keyword">null</span> :lastStack.mResumedActivity;</span><br><span class="line">                <span class="keyword">final</span> ActivityState lastState = next.getState();</span><br><span class="line"></span><br><span class="line">                mService.updateCpuStats();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_STATES) Slog.v(TAG_STATES, <span class="string">&quot;Moving to RESUMED: &quot;</span> + next</span><br><span class="line">                        + <span class="string">&quot; (in existing)&quot;</span>);</span><br><span class="line"></span><br><span class="line">                next.setState(RESUMED, <span class="string">&quot;resumeTopActivityInnerLocked&quot;</span>);</span><br><span class="line"></span><br><span class="line">                mService.updateLruProcessLocked(next.app, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">                updateLRUListLocked(next);</span><br><span class="line">                mService.updateOomAdjLocked();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Have the window manager re-evaluate the orientation of</span></span><br><span class="line">                <span class="comment">// the screen based on the new activity order.</span></span><br><span class="line">                <span class="keyword">boolean</span> notUpdated = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (mStackSupervisor.isFocusedStack(<span class="keyword">this</span>)) &#123;</span><br><span class="line">                    <span class="comment">// We have special rotation behavior when here is some active activity that</span></span><br><span class="line">                    <span class="comment">// requests specific orientation or Keyguard is locked. Make sure all activity</span></span><br><span class="line">                    <span class="comment">// visibilities are set correctly as well as the transition is updated if needed</span></span><br><span class="line">                    <span class="comment">// to get the correct rotation behavior. Otherwise the following call to update</span></span><br><span class="line">                    <span class="comment">// the orientation may cause incorrect configurations delivered to client as a</span></span><br><span class="line">                    <span class="comment">// result of invisible window resize.</span></span><br><span class="line">                    <span class="comment">// <span class="doctag">TODO:</span> Remove this once visibilities are set correctly immediately when</span></span><br><span class="line">                    <span class="comment">// starting an activity.</span></span><br><span class="line">                    notUpdated = !mStackSupervisor.ensureVisibilityAndConfig(next, mDisplayId,</span><br><span class="line">                            <span class="keyword">true</span> <span class="comment">/* markFrozenIfConfigChanged */</span>, <span class="keyword">false</span> <span class="comment">/* deferResume */</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (notUpdated) &#123;</span><br><span class="line">                    <span class="comment">// The configuration update wasn&#x27;t able to keep the existing</span></span><br><span class="line">                    <span class="comment">// instance of the activity, and instead started a new one.</span></span><br><span class="line">                    <span class="comment">// We should be all done, but let&#x27;s just make sure our activity</span></span><br><span class="line">                    <span class="comment">// is still at the top and schedule another run if something</span></span><br><span class="line">                    <span class="comment">// weird happened.</span></span><br><span class="line">                    ActivityRecord nextNext = topRunningActivityLocked();</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_SWITCH || DEBUG_STATES) Slog.i(TAG_STATES,</span><br><span class="line">                            <span class="string">&quot;Activity config changed during resume: &quot;</span> + next</span><br><span class="line">                                    + <span class="string">&quot;, new next: &quot;</span> + nextNext);</span><br><span class="line">                    <span class="keyword">if</span> (nextNext != next) &#123;</span><br><span class="line">                        <span class="comment">// Do over!</span></span><br><span class="line">                        mStackSupervisor.scheduleResumeTopActivities();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!next.visible || next.stopped) &#123;</span><br><span class="line">                        next.setVisibility(<span class="keyword">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    next.completeResumeLocked();</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">final</span> ClientTransaction transaction = ClientTransaction.obtain(next.app.thread,</span><br><span class="line">                            next.appToken);</span><br><span class="line">                    <span class="comment">// Deliver all pending results.</span></span><br><span class="line">                    ArrayList&lt;ResultInfo&gt; a = next.results;</span><br><span class="line">                    <span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> N = a.size();</span><br><span class="line">                        <span class="keyword">if</span> (!next.finishing &amp;&amp; N &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (DEBUG_RESULTS) Slog.v(TAG_RESULTS,</span><br><span class="line">                                    <span class="string">&quot;Delivering results to &quot;</span> + next + <span class="string">&quot;: &quot;</span> + a);</span><br><span class="line">                            transaction.addCallback(ActivityResultItem.obtain(a));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (next.newIntents != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        transaction.addCallback(NewIntentItem.obtain(next.newIntents,</span><br><span class="line">                                <span class="keyword">false</span> <span class="comment">/* andPause */</span>));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Well the app will no longer be stopped.</span></span><br><span class="line">                    <span class="comment">// Clear app token stopped state in window manager if needed.</span></span><br><span class="line">                    next.notifyAppResumed(next.stopped);</span><br><span class="line"></span><br><span class="line">                    EventLog.writeEvent(EventLogTags.AM_RESUME_ACTIVITY, next.userId,</span><br><span class="line">                            System.identityHashCode(next), next.getTask().taskId,</span><br><span class="line">                            next.shortComponentName);</span><br><span class="line"></span><br><span class="line">                    next.sleeping = <span class="keyword">false</span>;</span><br><span class="line">                    mService.getAppWarningsLocked().onResumeActivity(next);</span><br><span class="line">                    mService.showAskCompatModeDialogLocked(next);</span><br><span class="line">                    next.app.pendingUiClean = <span class="keyword">true</span>;</span><br><span class="line">                    next.app.forceProcessStateUpTo(mService.mTopProcessState);</span><br><span class="line">                    next.clearOptionsLocked();</span><br><span class="line">                    transaction.setLifecycleStateRequest(</span><br><span class="line">                            ResumeActivityItem.obtain(next.app.repProcState,</span><br><span class="line">                                    mService.isNextTransitionForward()));</span><br><span class="line">                    mService.getLifecycleManager().scheduleTransaction(transaction);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_STATES) Slog.d(TAG_STATES, <span class="string">&quot;resumeTopActivityLocked: Resumed &quot;</span></span><br><span class="line">                            + next);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">// Whoops, need to restart this activity!</span></span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_STATES) Slog.v(TAG_STATES, <span class="string">&quot;Resume failed; resetting state to &quot;</span></span><br><span class="line">                            + lastState + <span class="string">&quot;: &quot;</span> + next);</span><br><span class="line">                    next.setState(lastState, <span class="string">&quot;resumeTopActivityInnerLocked&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// lastResumedActivity being non-null implies there is a lastStack present.</span></span><br><span class="line">                    <span class="keyword">if</span> (lastResumedActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        lastResumedActivity.setState(RESUMED, <span class="string">&quot;resumeTopActivityInnerLocked&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Slog.i(TAG, <span class="string">&quot;Restarting because process died: &quot;</span> + next);</span><br><span class="line">                    <span class="keyword">if</span> (!next.hasBeenLaunched) &#123;</span><br><span class="line">                        next.hasBeenLaunched = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span>  <span class="keyword">if</span> (SHOW_APP_STARTING_PREVIEW &amp;&amp; lastStack != <span class="keyword">null</span></span><br><span class="line">                            &amp;&amp; lastStack.isTopStackOnDisplay()) &#123;</span><br><span class="line">                        next.showStartingWindow(<span class="keyword">null</span> <span class="comment">/* prev */</span>, <span class="keyword">false</span> <span class="comment">/* newTask */</span>,</span><br><span class="line">                                <span class="keyword">false</span> <span class="comment">/* taskSwitch */</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    mStackSupervisor.startSpecificActivityLocked(next, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// From this point on, if something goes wrong there is no way</span></span><br><span class="line">            <span class="comment">// to recover the activity.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                next.completeResumeLocked();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// If any exception gets thrown, toss away this</span></span><br><span class="line">                <span class="comment">// activity and try the next one.</span></span><br><span class="line">                Slog.w(TAG, <span class="string">&quot;Exception thrown during resume of &quot;</span> + next, e);</span><br><span class="line">                requestFinishActivityLocked(next.appToken, Activity.RESULT_CANCELED, <span class="keyword">null</span>,</span><br><span class="line">                        <span class="string">&quot;resume-exception&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Whoops, need to restart this activity!</span></span><br><span class="line">            <span class="keyword">if</span> (!next.hasBeenLaunched) &#123;</span><br><span class="line">                next.hasBeenLaunched = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (SHOW_APP_STARTING_PREVIEW) &#123;</span><br><span class="line">                    next.showStartingWindow(<span class="keyword">null</span> <span class="comment">/* prev */</span>, <span class="keyword">false</span> <span class="comment">/* newTask */</span>,</span><br><span class="line">                            <span class="keyword">false</span> <span class="comment">/* taskSwich */</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_SWITCH) Slog.v(TAG_SWITCH, <span class="string">&quot;Restarting: &quot;</span> + next);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_STATES) Slog.d(TAG_STATES, <span class="string">&quot;resumeTopActivityLocked: Restarting &quot;</span> + next);</span><br><span class="line">            mStackSupervisor.startSpecificActivityLocked(next, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>继续调用 startSpecificActivityLocked</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startSpecificActivityLocked</span><span class="params">(ActivityRecord r,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> andResume, <span class="keyword">boolean</span> checkConfig)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Is this activity&#x27;s application already running?</span></span><br><span class="line">        ProcessRecord app = mService.getProcessRecordLocked(r.processName,</span><br><span class="line">                r.info.applicationInfo.uid, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (app != <span class="keyword">null</span> &amp;&amp; app.thread != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ((r.info.flags&amp;ActivityInfo.FLAG_MULTIPROCESS) == <span class="number">0</span></span><br><span class="line">                        || !<span class="string">&quot;android&quot;</span>.equals(r.info.packageName)) &#123;</span><br><span class="line">                    <span class="comment">// Don&#x27;t add this if it is a platform component that is marked</span></span><br><span class="line">                    <span class="comment">// to run in multiple processes, because this is actually</span></span><br><span class="line">                    <span class="comment">// part of the framework so doesn&#x27;t make sense to track as a</span></span><br><span class="line">                    <span class="comment">// separate apk in the process.</span></span><br><span class="line">                    app.addPackage(r.info.packageName, r.info.applicationInfo.longVersionCode,</span><br><span class="line">                            mService.mProcessStats);</span><br><span class="line">                &#125;</span><br><span class="line">                realStartActivityLocked(r, app, andResume, checkConfig);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">&quot;Exception when starting activity &quot;</span></span><br><span class="line">                        + r.intent.getComponent().flattenToShortString(), e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If a dead object exception was thrown -- fall through to</span></span><br><span class="line">            <span class="comment">// restart the application.</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mService.startProcessLocked(r.processName, r.info.applicationInfo, <span class="keyword">true</span>, <span class="number">0</span>,</span><br><span class="line">                <span class="string">&quot;activity&quot;</span>, r.intent.getComponent(), <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>自此，从APP进程调用到了AMS进程</p><h2 id="1-2-AMS进程调到zygote进程"><a href="#1-2-AMS进程调到zygote进程" class="headerlink" title="1.2 AMS进程调到zygote进程"></a>1.2 AMS进程调到zygote进程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GuardedBy(&quot;this&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> ProcessRecord <span class="title">startProcessLocked</span><span class="params">(String processName,</span></span></span><br><span class="line"><span class="function"><span class="params">            ApplicationInfo info, <span class="keyword">boolean</span> knownToBeDead, <span class="keyword">int</span> intentFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">            String hostingType, ComponentName hostingName, <span class="keyword">boolean</span> allowWhileBooting,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> isolated, <span class="keyword">boolean</span> keepIfLarge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> startProcessLocked(processName, info, knownToBeDead, intentFlags, hostingType,</span><br><span class="line">                hostingName, allowWhileBooting, isolated, <span class="number">0</span> <span class="comment">/* isolatedUid */</span>, keepIfLarge,</span><br><span class="line">                <span class="keyword">null</span> <span class="comment">/* ABI override */</span>, <span class="keyword">null</span> <span class="comment">/* entryPoint */</span>, <span class="keyword">null</span> <span class="comment">/* entryPointArgs */</span>,</span><br><span class="line">                <span class="keyword">null</span> <span class="comment">/* crashHandler */</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GuardedBy(&quot;this&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">startProcessLocked</span><span class="params">(String hostingType, String hostingNameStr, String entryPoint,</span></span></span><br><span class="line"><span class="function"><span class="params">            ProcessRecord app, <span class="keyword">int</span> uid, <span class="keyword">int</span>[] gids, <span class="keyword">int</span> runtimeFlags, <span class="keyword">int</span> mountExternal,</span></span></span><br><span class="line"><span class="function"><span class="params">            String seInfo, String requiredAbi, String instructionSet, String invokeWith,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">long</span> startTime)</span> </span>&#123;</span><br><span class="line">        app.pendingStart = <span class="keyword">true</span>;</span><br><span class="line">        app.killedByAm = <span class="keyword">false</span>;</span><br><span class="line">        app.removed = <span class="keyword">false</span>;</span><br><span class="line">        app.killed = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> startSeq = app.startSeq = ++mProcStartSeqCounter;</span><br><span class="line">        app.setStartParams(uid, hostingType, hostingNameStr, seInfo, startTime);</span><br><span class="line">        <span class="keyword">if</span> (mConstants.FLAG_PROCESS_START_ASYNC) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_PROCESSES) Slog.i(TAG_PROCESSES,</span><br><span class="line">                    <span class="string">&quot;Posting procStart msg for &quot;</span> + app.toShortString());</span><br><span class="line">            mProcStartHandler.post(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (ActivityManagerService.<span class="keyword">this</span>) &#123;</span><br><span class="line">                        <span class="keyword">final</span> String reason = isProcStartValidLocked(app, startSeq);</span><br><span class="line">                        <span class="keyword">if</span> (reason != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            Slog.w(TAG_PROCESSES, app + <span class="string">&quot; not valid anymore,&quot;</span></span><br><span class="line">                                    + <span class="string">&quot; don&#x27;t start process, &quot;</span> + reason);</span><br><span class="line">                            app.pendingStart = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        app.usingWrapper = invokeWith != <span class="keyword">null</span></span><br><span class="line">                                || SystemProperties.get(<span class="string">&quot;wrap.&quot;</span> + app.processName) != <span class="keyword">null</span>;</span><br><span class="line">                        mPendingStarts.put(startSeq, app);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">final</span> ProcessStartResult startResult = startProcess(app.hostingType, entryPoint,</span><br><span class="line">                            app, app.startUid, gids, runtimeFlags, mountExternal, app.seInfo,</span><br><span class="line">                            requiredAbi, instructionSet, invokeWith, app.startTime);</span><br><span class="line">                    <span class="keyword">synchronized</span> (ActivityManagerService.<span class="keyword">this</span>) &#123;</span><br><span class="line">                        handleProcessStartedLocked(app, startResult, startSeq);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (ActivityManagerService.<span class="keyword">this</span>) &#123;</span><br><span class="line">                        Slog.e(TAG, <span class="string">&quot;Failure starting process &quot;</span> + app.processName, e);</span><br><span class="line">                        mPendingStarts.remove(startSeq);</span><br><span class="line">                        app.pendingStart = <span class="keyword">false</span>;</span><br><span class="line">                        forceStopPackageLocked(app.info.packageName, UserHandle.getAppId(app.uid),</span><br><span class="line">                                <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,</span><br><span class="line">                                UserHandle.getUserId(app.userId), <span class="string">&quot;start failure&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> ProcessStartResult startResult = startProcess(hostingType, entryPoint, app,</span><br><span class="line">                        uid, gids, runtimeFlags, mountExternal, seInfo, requiredAbi, instructionSet,</span><br><span class="line">                        invokeWith, startTime);</span><br><span class="line">                handleProcessStartedLocked(app, startResult.pid, startResult.usingWrapper,</span><br><span class="line">                        startSeq, <span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">                Slog.e(TAG, <span class="string">&quot;Failure starting process &quot;</span> + app.processName, e);</span><br><span class="line">                app.pendingStart = <span class="keyword">false</span>;</span><br><span class="line">                forceStopPackageLocked(app.info.packageName, UserHandle.getAppId(app.uid),</span><br><span class="line">                        <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,</span><br><span class="line">                        UserHandle.getUserId(app.userId), <span class="string">&quot;start failure&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> app.pid &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ProcessStartResult <span class="title">startProcess</span><span class="params">(String hostingType, String entryPoint,</span></span></span><br><span class="line"><span class="function"><span class="params">            ProcessRecord app, <span class="keyword">int</span> uid, <span class="keyword">int</span>[] gids, <span class="keyword">int</span> runtimeFlags, <span class="keyword">int</span> mountExternal,</span></span></span><br><span class="line"><span class="function"><span class="params">            String seInfo, String requiredAbi, String instructionSet, String invokeWith,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">long</span> startTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">&quot;Start proc: &quot;</span> +</span><br><span class="line">                    app.processName);</span><br><span class="line">            checkTime(startTime, <span class="string">&quot;startProcess: asking zygote to start proc&quot;</span>);</span><br><span class="line">            <span class="keyword">final</span> ProcessStartResult startResult;</span><br><span class="line">            <span class="keyword">if</span> (hostingType.equals(<span class="string">&quot;webview_service&quot;</span>)) &#123;</span><br><span class="line">                startResult = startWebView(entryPoint,</span><br><span class="line">                        app.processName, uid, uid, gids, runtimeFlags, mountExternal,</span><br><span class="line">                        app.info.targetSdkVersion, seInfo, requiredAbi, instructionSet,</span><br><span class="line">                        app.info.dataDir, <span class="keyword">null</span>,</span><br><span class="line">                        <span class="keyword">new</span> String[] &#123;PROC_START_SEQ_IDENT + app.startSeq&#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                startResult = Process.start(entryPoint,</span><br><span class="line">                        app.processName, uid, uid, gids, runtimeFlags, mountExternal,</span><br><span class="line">                        app.info.targetSdkVersion, seInfo, requiredAbi, instructionSet,</span><br><span class="line">                        app.info.dataDir, invokeWith,</span><br><span class="line">                        <span class="keyword">new</span> String[] &#123;PROC_START_SEQ_IDENT + app.startSeq&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            checkTime(startTime, <span class="string">&quot;startProcess: returned from zygote!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> startResult;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过process的start方法调用zygoteProcess的start方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Start a new process.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * &lt;p&gt;If processes are enabled, a new process is created and the</span></span><br><span class="line"><span class="comment">     * static main() function of a &lt;var&gt;processClass&lt;/var&gt; is executed there.</span></span><br><span class="line"><span class="comment">     * The process will continue running after this function returns.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * &lt;p&gt;If processes are not enabled, a new thread in the caller&#x27;s</span></span><br><span class="line"><span class="comment">     * process is created and main() of &lt;var&gt;processClass&lt;/var&gt; called there.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The niceName parameter, if not an empty string, is a custom name to</span></span><br><span class="line"><span class="comment">     * give to the process instead of using processClass.  This allows you to</span></span><br><span class="line"><span class="comment">     * make easily identifyable processes even if you are using the same base</span></span><br><span class="line"><span class="comment">     * &lt;var&gt;processClass&lt;/var&gt; to start them.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * When invokeWith is not null, the process will be started as a fresh app</span></span><br><span class="line"><span class="comment">     * and not a zygote fork. Note that this is only allowed for uid 0 or when</span></span><br><span class="line"><span class="comment">     * runtimeFlags contains DEBUG_ENABLE_DEBUGGER.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> processClass The class to use as the process&#x27;s main entry</span></span><br><span class="line"><span class="comment">     *                     point.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> niceName A more readable name to use for the process.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid The user-id under which the process will run.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gid The group-id under which the process will run.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gids Additional group-ids associated with the process.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> runtimeFlags Additional flags for the runtime.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetSdkVersion The target SDK version for the app.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seInfo null-ok SELinux information for the new process.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> abi non-null the ABI this app should be started with.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> instructionSet null-ok the instruction set to use.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> appDataDir null-ok the data directory of the app.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invokeWith null-ok the command to invoke with.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> zygoteArgs Additional arguments to supply to the zygote process.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> An object that describes the result of the attempt to start the process.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RuntimeException on fatal start failure</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@hide</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ProcessStartResult <span class="title">start</span><span class="params">(<span class="keyword">final</span> String processClass,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">final</span> String niceName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">int</span> uid, <span class="keyword">int</span> gid, <span class="keyword">int</span>[] gids,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">int</span> runtimeFlags, <span class="keyword">int</span> mountExternal,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">int</span> targetSdkVersion,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  String seInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  String abi,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  String instructionSet,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  String appDataDir,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  String invokeWith,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  String[] zygoteArgs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> zygoteProcess.start(processClass, niceName, uid, gid, gids,</span><br><span class="line">                    runtimeFlags, mountExternal, targetSdkVersion, seInfo,</span><br><span class="line">                    abi, instructionSet, appDataDir, invokeWith, zygoteArgs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>zygoteProcess通过socket与zygote进行通信，zygote进程fork出应用进程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Process.<span class="function">ProcessStartResult <span class="title">start</span><span class="params">(<span class="keyword">final</span> String processClass,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                  <span class="keyword">final</span> String niceName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                  <span class="keyword">int</span> uid, <span class="keyword">int</span> gid, <span class="keyword">int</span>[] gids,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                  <span class="keyword">int</span> runtimeFlags, <span class="keyword">int</span> mountExternal,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                  <span class="keyword">int</span> targetSdkVersion,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                  String seInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                  String abi,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                  String instructionSet,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                  String appDataDir,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                  String invokeWith,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                  String[] zygoteArgs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> startViaZygote(processClass, niceName, uid, gid, gids,</span><br><span class="line">                    runtimeFlags, mountExternal, targetSdkVersion, seInfo,</span><br><span class="line">                    abi, instructionSet, appDataDir, invokeWith, <span class="keyword">false</span> <span class="comment">/* startChildZygote */</span>,</span><br><span class="line">                    zygoteArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ZygoteStartFailedEx ex) &#123;</span><br><span class="line">            Log.e(LOG_TAG,</span><br><span class="line">                    <span class="string">&quot;Starting VM process through Zygote failed&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="string">&quot;Starting VM process through Zygote failed&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-zygote-fork出应用进程"><a href="#1-3-zygote-fork出应用进程" class="headerlink" title="1.3 zygote fork出应用进程"></a>1.3 zygote fork出应用进程</h2><p>这部分可以参考zygote部分</p><h1 id="2-应用启动流程断点调试"><a href="#2-应用启动流程断点调试" class="headerlink" title="2.应用启动流程断点调试"></a>2.应用启动流程断点调试</h1><p>启动DDMS调试工具,选中system_process进程</p><p><img src="/images/AMS-03-%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image-20201111112552304.png" alt="image-20201111112552304"></p><p>开始调试</p><p><img src="/images/AMS-03-%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image-20201111112623418.png" alt="image-20201111112623418"></p><p>根据前面分析，APP启动最终会调用AMS的startActivityAsUser函数：因此，这里就以startActivityAsUser为调试的起点。</p><p>这里以启动系统设置为例进行分析，点击系统设置图标，启动系统设置应用：</p><p><img src="/images/AMS-03-%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image-20201111112959728.png" alt="image-20201111112959728"></p><p>进入AndroidStudio调试界面</p><p><img src="/images/AMS-03-%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/image-20201111113059664.png" alt="image-20201111113059664"></p><p>参数解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityAsUser</span><span class="params">(IApplicationThread caller, //</span></span></span><br><span class="line"><span class="function"><span class="params">                                     String callingPackage,//由于是从Launcher发起，因此这里是</span></span></span><br><span class="line"><span class="function"><span class="params">                                     Intent intent, </span></span></span><br><span class="line"><span class="function"><span class="params">                                     String resolvedType, </span></span></span><br><span class="line"><span class="function"><span class="params">                                     IBinder resultTo, </span></span></span><br><span class="line"><span class="function"><span class="params">                                     String resultWho, </span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">int</span> startFlags, </span></span></span><br><span class="line"><span class="function"><span class="params">                                     ProfilerInfo profilerInfo, </span></span></span><br><span class="line"><span class="function"><span class="params">                                     Bundle bOptions, </span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,</span><br><span class="line">                               resultWho, requestCode, startFlags, profilerInfo, bOptions, userId,</span><br><span class="line">                               <span class="keyword">true</span> <span class="comment">/*validateIncomingUser*/</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>IApplicationThread caller</strong>, //应用进程的代理IApplicationThread.stub.proxy<br>        <strong>String callingPackage</strong>,//由于是从Launcher发起，因此这里是com.android.car.carlauncher<br>        <strong>Intent intent</strong>, //Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 pkg=com.android.settings cmp=com.android.settings/.Settings }<br>        <strong>String resolvedType</strong>, //null<br>        <strong>IBinder resultTo</strong>, //<br>        <strong>String resultWho</strong>, //null<br>        <strong>int requestCode</strong>,//-1<br>        <strong>int startFlags</strong>, //0<br>        <strong>ProfilerInfo profilerInfo</strong>, //null<br>        <strong>Bundle bOptions</strong>, //null<br>        <strong>int userId</strong>//0</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-应用启动流程总览&quot;&gt;&lt;a href=&quot;#1-应用启动流程总览&quot; class=&quot;headerlink&quot; title=&quot;1.应用启动流程总览&quot;&gt;&lt;/a&gt;1.应用启动流程总览&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/AMS-03-%E5%BA%94%E7%</summary>
      
    
    
    
    <category term="AMS" scheme="http://example.com/categories/AMS/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
</feed>
